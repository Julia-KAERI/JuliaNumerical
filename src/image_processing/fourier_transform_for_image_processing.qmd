---
title: "푸리에 변환"
number-sections: true
number-depth: 2
crossref:
  chapters: false
---


## 푸리에 급수와 푸리에 변환

### 푸리에 급수


어떤 함수가 주기 $T$ 를 갖는다는 것은 모든 $t\in \mathbb{R}$ 에 대해 $f(t+T)=f(T)$ 임을 의미한다. 이 경우 $f(t)$ 는 다음과 같이 표현 할 수 있다. 주기 $T$ 에 대해 $\nu = 1/T$ 를 **진동수(frequency)** 라고 하고 $\omega = 2\pi/T = 2\nu$ 를 **각진동수 (angular frequency)** 라고 한다. 

::: {.callout-note appearance="simple" icon="false"}
::: {#def-fourier_series}

#### 실함수의 푸리에 급수

주기 $T$ 를 갖는 실함수 $f: X \subset \mathbb{R} \to \mathbb{R}$ 는 다음과 같은 푸리에 급수로 표현 할 수 있다. 여기서 $\omega = 2\pi/T$ 이다. 

$$
\begin{aligned}
f(t) &= \dfrac{a_0}{2} + \sum_{n=1}^{\infty} a_n \cos (n\omega t) + \sum_{n=1}^{\infty} b_n \sin (n \omega t)\,,\\
\text{where}\qquad  a_n &= \dfrac{2}{T}\int_{-T/2}^{T/2} f(t) \cos (n\omega t)\, dt\\
b_n &= \dfrac{2}{T}\int_{-T/2}^{T/2} f(t) \sin (n\omega t)\, dt.
\end{aligned}
$$

:::
:::



::: {.callout-note appearance="simple" icon="false"}
::: {#def-fourier_series_2}

#### 푸리에 급수

주기 $T$ 를 갖는 함수 $f(t)$ 는 다음과 같은 푸리에 급수로 표현 할 수 있다. 여기서 $\omega = 2\pi/T$ 이다. 

$$
\begin{aligned}
f(t) &= \sum_{n=-\infty}^{\infty} c_n e^{in\omega t}\,,\\
\text{where}\qquad c_n &= \dfrac{1}{T}\int_{-T/2}^{T/2} f(t) e^{-in\omega t}\, dt\,, \qquad n\in \mathbb{Z}
\end{aligned}
$$

:::
:::


</br>

@def-fourier_series 는 실함수의 경우, @def-fourier_series_2 는 실함수를 포함한 복소함수의 경우에 사용 할 수 있다. 아래 그림은 두가지 함수에 대한 푸리에 급수를 $n=1,\ldots,\,4$ 까지 표한 것이다. 


![푸리에 급수](imgs/fourier_expansion.png)


</br>

$[-T/2,\, T/2]$ 구간에서 연속인 함수의 집합 $X$ 를 생각하자. 이 집합은 벡터공간이다. 여기에 내적을 다음과 같이 정의한다. 

$$
\langle \phi,\, \psi \rangle = \int_{-T/2}^{T/2} \psi^\ast(t)\, \phi(t)\, dt
$$


수학적으로 푸리에 급수가 의미 있기 위해서는 $\omega = 2\pi/T$ 에 대해 $\{e^{in\omega t} : n\in \mathbb{Z}\}$ 가 $[T/2,\,T/2]$ 구간에서 연속인 모든 복소 함수의 집합에 대해 정규직교기저이어야 한다. 직교성은 보이기 쉽지만 completeness 즉, 주기 $T$ 인 모든 함수가 $\{\sin (n\omega t),\, \cos (n \omega t) : n \in \mathbb{Z}\}$ 의 선형결합으로 표현되는 것은 여기의 범위를 벗어난다. 단지 직교성과 completeness 를 알고 넘어가자.



::: {#exm-fourier_exmapsion}

#### 기저함수의 직교성

임의의 정수 $m,\,n$ 에 대해 다음이 성립함을 보여라.

$$
\int_{-T/2}^{T/2} \exp \left( \dfrac{i 2\pi m}{T}t\right) \exp \left(-\dfrac{i 2\pi n}{T}t \right)\, dt = \delta_{nm}
$$

:::


</br>

### 푸리에 변환


::: {.callout-note appearance="simple" icon="false"}
::: {#def-fourier_transform}

### 1차원 푸리에 변환

함수 $f(t)$ 에 대한 푸리에 변환은 $\mathfrak{F}[f(t)]$ 로 쓰고 다음과 같이 정의된다.

$$
\begin{aligned}
F(u) &:= \mathfrak{F}\left[ f(t)\right] = \int_{-\infty}^{\infty} f(t) \, e^{-2i\pi u t} \, dt,\\
f(t) &= \mathfrak{F}^{-1}[F(\mu)] = \int_{-\infty}^{\infty} F(u)\, e^{2i \pi u t} \, d\mu\,.
\end{aligned}
$$


:::
:::


::: {.callout-note appearance="simple" icon="false"}
::: {#def-fourier_transform}

### 2차원 푸리에 변환

함수 $f(x, y)$ 에 대한 푸리에 변환은 $\mathfrak{F}[f(x, y)]$ 로 쓰고 다음과 같이 정의된다.

$$
\begin{aligned}
F(u,\,v) &= \mathfrak{F} \left[f(x,\,y)\right]=\int_{-\infty}^{\infty}\int_{-\infty}^{\infty} f(x,\,y)e^{-2i\pi (ux+vy)}\, dxdy\,, \\
f (x,\,y) &= \mathfrak{F}^{-1} \left[F(u,\,v)\right] = \int_{-\infty}^{\infty} \int_{-\infty}^{\infty} F(u, v) e^{2i \pi (ux+vy)} \, dudv
\end{aligned}
$$

:::
:::


위의 경우 $F(u)$ 와 $F(u,\,v)$ 는 복소수이므로 다음과 같이 표현 할 수 있다. 

$$
F(u,\,v) = |F(u,\,v)| e^{i\Phi(u,\,v)}
$$


이 때 $|F(u,\,v)|$ 를 **푸리에 스펙트럼 (Fourier spectrum)** 이라 하고, $\Phi(u,\,v)$ 를 **위상 (phase)** 이라 한다. 또한 $P(u,\,v) =|F(u,\,v)|^2$ 를 **푸리에 파워 스펙트럼 (Fourier power spectrum)** 이라 한다.

</br>

### 푸리에 변환의 몇가지 수학적 성질

여기서 $F(u) = \mathfrak{F}[f(t)]$, $F(u, v) = \mathfrak{F}[f(x, y)]$ 이며, 2차원 푸리에 변환에 대해서 증명한다. 1차원에 대해서는 그 결과를 쉽게 유추 할 수 있다.

::: {#prp-fourier_linearity}
#### 선형성 (linearity)
상수 $a,\,b$ 에 대해 다음이 성립한다.
$$
\mathfrak{F}[af(x, y) + bg(x, y)] = a\mathfrak{F}[f(x, y)] + b\mathfrak{F}[g(x, y)].
$$
:::

::: {.proof}

$$
\begin{aligned}
\mathfrak{F}[af(x, y) + bg(x, y)]&= \iint (af(x, y) + bg(x, y)) e^{-2i\pi (ux+vy)}\, dxdy \\
&= \iint af(x, y)  e^{-2i\pi (ux+vy)}\, dxdy + \iint  bg(x, y) e^{-2i\pi (ux+vy)}\, dxdy  \\
&=  a\mathfrak{F}[f(x, y)] + b\mathfrak{F}[g(x, y)] \qquad \square
\end{aligned}
$$

:::

::: {#prp-fourier_similarity}
#### Similarity
$$
\mathfrak{F}[f(ax,\,by)] =\dfrac{1}{ab} F\left(\dfrac{u}{a},\, \dfrac{v}{b}\right)
$$
:::

::: {.proof}

$$
\begin{aligned}
\mathfrak{F}[f(ax,\,by)] &= \iint f(ax,\, by) e^{-2i\pi (ux+vy)}\,dxdy \qquad &; t=ax,\, s=by\\
&= \dfrac{1}{ab} \iint f(s,\,t) e^{-2i \pi (ut/a+vs/b)}\, dtds \\
&= \dfrac{1}{ab} F \left(\dfrac{u}{a},\, \dfrac{v}{b} \right)
\end{aligned}
$$

:::

</br>

::: {#prp-fourier_shift_property}
#### Shift property

$$
\mathfrak{F}[f(x-a,\, y-b)] = \exp (i2\pi (au+bv)) F(u,\,v)
$$

:::

::: {.proof}
$$
\begin{aligned}
\mathfrak{F}[f(x-a,\, y-b) ]&= \iint f(x-a,\, y-b) e^{-2i\pi (ux+vy)} \,dxdy \qquad &; t=x-a,\, s=y-b\\
&=\iint f(t,\,s) e^{-2i\pi (ux+vy)} e^{2i\pi (au+bv)} \, dxdy \\
&= e^{2i\pi (au+bv)}F(u,\,v)
\end{aligned}
$$

:::

</br>

::: {#prp-fourier-differential}
#### 도함수의 푸리에 변환

$$
\mathfrak{F}\left[ \dfrac{d^k}{dx^k}f(x) \right] =( 2i\pi u)^k F(u) 
$$

:::

::: {.proof}
$k=1$ 인 경우만 보이면 나머지는 쉽게 일반화 된다.$f(x)=\displaystyle \int_{-\infty}^{\infty} F(u)e^{2i\pi ux}\, du$ 이므로

$$
f'(x) =  \int_{-\infty}^{\infty}(2i\pi u) F(u)e^{2i \pi ux} \, du
$$

이다. 따라서 

$$
\mathfrak{F}[f'(x)] = (2i\pi u) F(u)
$$
이다.
:::

</br>

::: {#exm-fourier_transform_of_rect_fuction}

$\text{rect}\left(\dfrac{x}{w}\right)$ 함수의 푸리에 변환은 다음과 같다.

$$
\begin{aligned}
F(u) = \mathfrak{F}\left[\text{rect}\left(\dfrac{x}{w}\right)\right] &= \int_{-w/2}^{w/2} e^{-2\pi i u t}\, dt = \dfrac{\sin \pi w u}{\pi u}
\end{aligned}
$$

이것을 그래프로 그리면 아래 그림과 같다. 

![rect 함수의 푸리에 변환](imgs/fourier_of_rect.png){#fig-fourier_of_rect}

$\text{rect}\left(\dfrac{x}{w}\right)$ 함수의 폭은 $w$ 이다. 그리고 $F(u) =0$ 을 만족하는 주기는 $u=0$ 일 때를 제외하면 $1/w$ 이다. 즉 신호의 폭과, 푸리에 변환된 신호의 폭은 대략적으로 반비례 관계에 있다는 것을 알 수 있다. 


:::


</br>


### 샘플링 함수의 푸리에 변환

샘플링 함수 $S_T(t)$ 를 생각하자. 이는 주기함수이므로 푸리에 급수로 표현 할 수 있으며 다음과 같다. 

$$
\begin{aligned}
S_T(t) &= \sum_{k=-\infty}^{\infty} \delta \left(t-kT \right) = \dfrac{1}{T} \sum_{k=-\infty}^{\infty} \exp \left( \dfrac{-2\pi i k t}{T}\right)
\end{aligned}
$$

단일 임펄스 함수 $\delta(u-u_0)$ 에 대한 푸리에 변환은 다음과 같다.

$$
\mathfrak{F}[\delta (u-u_0)] = \int_{-\infty}^{\infty} \delta (u-u_0) e^{2\pi i u t}\, du = e^{2\pi i u_0 t}
$$

따라서,

$$
\mathfrak{F}^{-1} \left[ \delta \left( u-\dfrac{k}{T} \right) \right] = \exp \left( \dfrac{2ik\pi t}{t} \right) \iff \mathfrak{F}\left[  \exp \left( \dfrac{2ik\pi t}{t} \right) \right] =  \delta \left(u-\dfrac{k}{T} \right)
$$

이다. 이를 이용하면 $s_T(t)$ 의 푸리에 변환식 $S(u)=\mathfrak{F}[s_N(t)]$ 를 계산 할 수 있으며 다음과 같다.

$$
S (u) = \mathfrak{F}\left[\dfrac{1}{T} \sum_{k=-\infty}^{\infty} \exp \left( \dfrac{-2\pi i kt}{T}\right)\right] = \dfrac{1}{T} \sum_{k=-\infty}^{\infty} \mathfrak{F}\left[ \exp \left( \dfrac{-2\pi i k t}{T}\right) \right] = \dfrac{1}{T} \sum_{k=-\infty}^{\infty} \delta \left(u - \dfrac{k}{T}\right)
$$


</br>

### Convolution 의 푸리에 변환

두 함수 $f(t),\, g(t)$ 의 convolution  $f(t) \ast g(t)$ 은 다음과 같이 정의된다.

$$
f(t) \ast g(t) \equiv \int_{-\infty}^{\infty} f(\tau) g(t-\tau) \, d\tau
$$

$F(\mu)= \mathfrak{F}[f(t)],\, G(\mu)=\mathfrak{F}[g(t)]$ 라 할 때, $f(t)\otimes g(t)$ 의 푸리에 변환을 구하면,

$$
\begin{aligned}
\mathfrak{F}[f(t) \ast g(t)] &= \int_{-\infty}^{\infty} \left[ \int_{-\infty}^{\infty} f(\tau)g(t-\tau) d\tau\right] e^{-2in\pi \mu t}\, dt \\
&= \int_{-\infty}^{\infty}f(\tau) \left[  \int_{-\infty}^{\infty} g(t-\tau)e^{-2in \pi \mu t}\, dt\right] \,d\tau \\
&= \int_{-\infty}^{\infty} f(\tau) G(\mu)e^{-2in \pi \mu \tau} \, d\tau \\
&= F(\mu)G(\mu)
\end{aligned}
$$


즉 합성곱의 푸리에 변환은 푸리에 변환의 곱이다. 이를 응용하면 두 함수의 곱의 푸리에변환은 합성곱이 됨을 보일 수 있다. 즉,

$$
\mathfrak{F}[f(t)g(t)]=F(\mu)\ast G(\mu)
$$

가 된다.


일반적으로 컴퓨터에서 계산할 때 크기가 크게 다르지 않은 두 함수의 합성곱을 직접 구하는 것보다 푸리에 변환을 시킨 후 이것을 곱하고 역 푸리에 변환을 하는 것이 계산 속도가 더 빠르다. 이것은 이산 푸리에 변환의 빠른 속도 때문인데, 많은 경우 convolution의 구현은 푸리에 변환과 역푸리에 변환을 이용하여 구현된다.

</br>

###  푸리에 변환과 샘플링

임의의 연속함수 $f(t)$ 를 $T$ 를 주기로 샘플링 하였다고 하자. 그렇다면 이 샘플링 $\tilde{f}(t)$ 은 다음과 같은 식으로 표현 할 수 있다.

$$
\tilde{f}(t) = \sum_{k=-\infty}^{\infty} f(t) \, \delta (t-kT)
$$

이 때 $\mathfrak{F}[f(t)]= F(\mu),\, \mathfrak{F}[s_T(t)]= S(\mu)$ 라 하자 $\displaystyle S(\mu)=\dfrac{1}{T} \sum_{k=-\infty}^{\infty} \delta \left( \mu - \dfrac{k}{T}\right)$ 임은 알고 있다. 그렇다면 $\tilde{F}(\mu)=\mathfrak{F}\left[\tilde{f}(t) \right]$ 를 구하면,

$$
\begin{aligned}
\tilde{F}(\mu) & = F(\mu)\otimes S(\mu) = \int_{-\infty}^{\infty} F(\tau)S(\mu-\tau)\, d\tau \\
&= \dfrac{1}{T} \sum_{k=-\infty}^{\infty}\int_{-\infty} F(\tau) \delta \left(\mu-\tau-\dfrac{k}{T}\right)\, d\tau \\
&= \dfrac{1}{T}\sum_{k=-\infty}^{\infty} F\left( \mu - \dfrac{k}{T} \right)
\end{aligned}
$$

이다. 즉, 주기 $T$ 로 샘플링된 연속 함수 $f(t)$의 함수의 푸리에 변환은 원래 함수의 푸리에 변환 $F(\mu)$ 를 주기 $1/T$ 를 갖는 임펄스 함수로 바꾼 형태임을 알 수 있다.


</br>

## 이산 푸리에 변환 (Discrete Fourier Transformation, DFT)


### 1차원 DFT

1차원 공간상의 함수 $f$ 에 대해 $k$ 번째 에서의 값을 $f_k$ 라 하자. 그리고 이 수열을 $\langle f\rangle$ 라 하자. 즉,
$$
\langle f \rangle =(f_1,\ldots,\,f_{N})
$$

이다.

우리는 여기서 한가지 가정을 하게 되는데 $f$ 이 주기 $N$ 을 갖는다는 것이다. 즉 $f_{k+N}=f_k$ 이다. 예를 들어 $(1, 3, 2, 4)$ 에 대한 이산 푸리에 변환은 

$$
\ldots , \underline{1, 3, 2 , 4}, 1, 3,2,4, \underline{1, 3, 2,4},\ldots
$$

에 대한 푸리에 변환이라는 의미이다 (주기적으로 반복되는 것을 잘 보이게 하기 위해 밑줄로 표현하였다). $N$ 개의 데이터가 $N$ 의 주기로 반복되기 때문에 전체적으로 주기는 $0, 1,\ldots,\, N-1$ 이며 



이 때 $\mathfrak{F}[f]=\langle F\rangle = (F_1,\ldots,\,F_{N})$ 의 $F_u$ 는 다음과 같이 구할 수 있다.

$$
F_u = \mathfrak{F}[f]_u=\dfrac{1}{N} \sum_{k=1}^{N} f_k \exp\left(-\dfrac{i2\pi (u-1) }{N} (k-1) \right).
$$

위의 식, 그리고 아래에서 에서 $(u-1)$ 이라던가 $(n-1)$ 같은 약간 어색한 항이 있는 이유는 우리가 앞으로 사용할 `FFTW` 가 C 언어 기반이며, 따라서 인덱스가 0 부터 시작하기 때문이다. 


또한 $f_k$ 는 다음과 같이 표현 할 수 있다.

$$
f_k = \mathfrak{F}^{-1}[F]_k = \sum_{u=1}^{N} F_u \exp \left(\dfrac{i2\pi (k-1)}{N} (u-1) \right)
$$

</br>

이제 푸리에 변환과 역변환을 통해 $f_k$ 를 복원 할 수 있음을 보이자. 증명을 좀 더 깔끔하게 하기 위해 $\sum_{1}^N$ 을 $\sum_{0}^{N-1}$ 로 바꾸었다.

$$
\begin{aligned}
f_{k'} = \mathfrak{F}^{-1}[F]_{k'} &=  \sum_{u=0}^{N-1} F_u \exp \left(\dfrac{i2\pi k'u}{N}  \right) \\
&= \dfrac{1}{N}\sum_{u=0}^{N-1} \left[\sum_{k=0}^{N-1} f_k \exp \left(\dfrac{-i2\pi k u}{N}  \right)  \right]\exp \left(\dfrac{i2\pi k'u}{N} \right)  \\
&= \dfrac{1}{N}\sum_{k=0}^{N-1} f_k \sum_{u=0}^{N-1} \exp\left( \dfrac{2\pi i (k'-k)u}{N}  \right) \\
% &= \dfrac{1}{N}\sum_{k=0}^{N-1} f_k \dfrac{{1-\exp \left( \dfrac{2\pi i (k'-k) N}{N}\right)}}{1-\exp \left( \dfrac{2\pi i (k'-k)}{N}\right)}
\end{aligned}
$$

우리는 여기서 $k'=k$ 이면 $\sum_{u=0}^{N-1} \exp (\cdots )= N$ 임을 안다. $k'\ne k$ 라면 $|k'-k|\le N-1$ 이므로

$$
\sum_{u=0}^{N-1} \exp\left( \dfrac{2\pi i (k'-k)u}{N}  \right) = \dfrac{{1-\exp \left( \dfrac{2\pi i (k'-k) N}{N}\right)}}{1-\exp \left( \dfrac{2\pi i (k'-k)}{N}\right)} = 0
$$

이며, 이로부터 $\mathfrak{F}^{-1}[F]_{k} = f_k$ 을 얻었다. 즉 DFT 로도 푸리에 변환과 역변환이 똑같이 성립한다. 

</br>

우리는 위의 식으로 부터 다음을 알 수 있다.

- 푸리에 변환으로 얻는 $F_u = \mathfrak{F}[f_k]$ 의 변수 $u$ 는 각진동수(angular frequency) 이다. 따라서 이 신호를 진동수(frequency) 에 대한 신호로 바꾸고 싶다면 변수를 $2\pi u$ 로 변경시켜야 한다.

- 입력되는 신호 $f$ 가 실수 신호더라도 푸리에 변환 신호는 복소수가 된다. 각진동수에 대한 분포를 알고싶다면 $|F_u|$ 를 보아야 한다. Julia 에서는 `abs` 함수가 복소수에 대한 절대값을 반환한다.



다음은 1차원 DFT 와 IDFT 를 julia 로 구현한 것이다. 1차원 벡터 `x` 에 대해 `dft(x)` sk `idft(x)` 와 같이 사용한다. 하지만 아래의 코드는 앞으로 사용하지 않는다. 그 이유는 곧 밝힌다.

```julia
function _dft(
    f::Vector{T}, 
    inverse = false) where T<:Union{Real, Complex}
    
    N = length(f)
    if T <:AbstractFloat
        F = zeros(Complex{T}, N)
    elseif T<:Complex 
        F = zeros(eltype(f), N)
    else 
        F = zeros(Complex{Float64}, N)
    end

    if inverse
        for i in 1:N
            F[i] = [f[k] * exp(2.0im * π* (i-1) * (k-1)/N) for k ∈ 1:N]./N |> sum
        end
    else     
        for i in 1:N
            F[i] = [f[k] * exp(-2.0im * π* (i-1) * (k-1)/N) for k ∈ 1:N] |> sum
        end
    end

    return F
end

dft = v-> _dft(v, false)
idft = v-> _dft(v, true)
```
</br>

참고로 정수 $k,\, N$ 에 대해 $1 = e^{-i2\pi } = e^{-i 2 \pi N(k-1)/N}$ 이므로 

$$
\begin{aligned}
F_{-u} &= \dfrac{1}{N} \sum_{k=1}^N f_k \exp \left( \dfrac{i 2 \pi (u +1)(k-1) }{N}\right) \\
&= \dfrac{1}{N} \sum_{k=1}^N f_k \exp \left( \dfrac{i 2 \pi (u +1)(k-1) }{N}\right) \exp \left( \dfrac{-i 2 \pi N (k-1)}{N} \right) \\
&= \dfrac{1}{N} \sum_{k=1}^Nf_k \exp \left( \dfrac{i 2 \pi (N-u-1)(k-1)}{N}\right) \\
&= F_{N-u}
\end{aligned}
$$

이다. 이때문에 $u$ 의 범위를 $1\le u \le N$ 로 표현하는 것보다 $N$ 이 홀수일 때는 $-\dfrac{N-1}{2} \le u \le \dfrac{N-1}{2}$ 로, $N$ 이 짝수일 때는 $-\dfrac{N}{2} \le u \le \dfrac{N}{2}-1$ 로 관례적으로 표현한다. 



### 2차원 DFT

2차원 DFT 의 경우 $F(u, v)$ 는 아래와 같이 구할 수 있다.

$$
\begin{aligned}
F_{uv} &= \dfrac{1}{MN} \sum_{j=1}^{M}\sum_{k=1}^{N} f_{jk} \exp \left[-2i\pi \left(\dfrac{(j-1)(u-1)}{M}+\dfrac{(k-1)(v-1)}{N}\right)\right] \\
f_{jk} &=  \sum_{j=1}^{M}\sum_{k=1}^{N} F_{uv} \exp \left[2i\pi \left(\dfrac{(j-1)(u-1)}{M}+\dfrac{(k-1)(v-1)}{N}\right)\right]
\end{aligned}
$$

여기서도 $\mathfrak{F}^{-1}\left[\mathfrak{F}[f]\right] = f$ 와 $\mathfrak{F}\left[\mathfrak{F}^{-1}[F]\right]=F$ 가 성립한다. 



</br>

### 고속 푸리에 변환과 `FFTW.jl`

고속 푸리에 변환(Fast Fourier Transform, FFT)은 DFT 과 그 역변환을 빠르게 수행하는 효율적인 알고리즘이다. 위의 푸리에 변환은 $\mathcal{O}(n^2)$ 의 연산이 필요하지만, FFT를 이용하면 $\mathcal{O}(n \log n)$ 의 연산만으로 가능하다. FFT 는 알고리즘이며 그것을 구현한 것 가운데 가장 널리 사용되는 것이 [FFTW](https://www.fftw.org) 이다. FFTW 는 *Fastest Fourier Transform in the West* 의 약자로 C 언어로 구현되어 있으며, Julia 에서 가장 많이 사용하는 FFT 라이브러리인 `FFTW.jl` 은 `FFTW` 의 Julia [바인딩](https://ko.wikipedia.org/wiki/언어_바인딩) 이다. 설치는 일반적인 라이브러리와 같이 `using Pkg; Pkg.add("FFTW")` 명령어를 사용한다. [바인딩이란 간략히 말하면 어떤 언어로 구현된 라이브러리를 다른 언어에서 사용 할 수 있도록 해 주는 라이브러리이다.]{.aside}


푸리에 변환을 하는 함수는 차원에 무관하게 `fft` 이며, 역푸리에 변환을 하는 함수는 `ifft` 이다. 



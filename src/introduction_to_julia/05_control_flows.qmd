---
title: "흐름 제어"

number-sections: true
number-depth: 2
crossref:
  chapters: false
---



## `for ... end` 

컨테이너를 순회하며 컨테이너에 포함된 아이템 만큼의 어떤 일을 수행하기 위한 구문입니다. 또한 컨테이너의 각 아이템을 이용한 계산과 명령을 수행 할 수 있습니다. 예를 들어 아래는 1 부터 100 까지의 합을 구하는 코드인데 `for i ∈ 1:100` 은 StepRange 타입인 `1:100` 의 각 성분들을 순서대로 `i` 라는 변수로 받아 `end` 까지의 명령을 수행한다는 의미입니다. 여기서 `∈` 는 `in` 으로 대체할 수 있습니다.

```julia
nsum = 0
for i ∈ 1:100
    nsum+= i
end
```

같은 크기의 컨테이너를 `zip` 명령어로 묶어서 동시에 순회할 수도 있습니다.

```julia
aa=("a", "b", "c", "d")
for (a, v) in zip(aa, 1:4)
    println("$a, $v")
end
```

그 결과는 아래와 같습니다.

```txt
a, 1
b, 2
c, 3
d, 4
```

</br>

`enumerate()` 함수를 통해 인덱스 와 포함된 아이템을 같이 순회할 수도 있습니다다.

```julia
for (i, v) in enumerate(aa)
    println("Index = $i, value = $v")
end
```
```txt
Index = 1, value = a
Index = 2, value = b
Index = 3, value = c
Index = 4, value = d
```

</br>

사전 타입의 경우 key 와 value 를 다음과 같이 순회할 수 있습니다. 사전은 순서가 없으므로, 아래와 같은 경우에는 key 와 value 가 나오는 순서는 임의적이라고 생각해야 합니다.

```julia
dict1 = Dict("a"=>1, "b"=>2, "c"=>3.3)
for (k, v) in dict1
    println("Key = $k, value = $v")
end
```

```txt
Key = c, value = 3.3
Key = b, value = 2
Key = a, value = 1
```

</br>

컨테이너에 포함된 아이템의 수만큼 1부터 순회하고 싶다면 `eachindex()` 를 사용할 수 있습니다. 

```julia
for i in eachindex(("a", "b", "c", "d"))
    println(i)
end
```






</br>

### 겹친 `for ... end`

구구단을 `for` 문을 써서 출력한다면 우선 다음과 같이 코드를 짤 수 있습니다.

```julia
for i in 2:9 
    for j in 1:9
        println("$i x $j = $(i*j)")
    end
end
```

하나의 `for` 문마다 하나의 `end` 가 필요합니다. Julia 는 다중 루프를 한 줄에 처리할 수 있게 해 줍니다. 아래의 코드는 위의 코드와 같은 일을 합니다.

```julia
for i in 2:9, j in 1:9
    println("$i x $j = $(i*j)")
end
```

</br>

## `while ... end`

`while` 이후에 조건이 오고 그 조건이 참이면 `end` 까지 실행합니다. 1 부터 100 까지의 합을 구하는 코드를 `while ... end` 를 이용하여 구현해 봅시다.

```julia
nsum = 0
nn = 1
while nn<=100
    nsum += nn
    nn += 1
end
```

`while ... end` 를 쓸 때 조심할 것은 종료조건이 충족되지 않는 것입니다. `for ... end` 의 경우는 정해진 수의 컨테이너의 아이템만을 순회하므로 어쨌든 무조건 종료되지만 `while ... end` 의 경우는 종료되지 않는 무한루프에 빠질 수 있습니다. 

</br>


### 루프에서 벗어나기

루프 수행 도중 벗어나고자 할 때는 `break` 를 씁니다. 예를 들어 1, 1/2, 1/3 과 같이 자연수의 역수를 계속 곱하다가 1/10000 보다 작아지는 첫번째 자연수를 구한다면, 1 부터 충분히 큰 수 (그 역수가 1/10000 보다 작은 수를 선택 할 수도 있다) 까지 루프를 수행하고 그 누적곱이 1/10000 보다 작을 때 `break` 로 루플에서 빠져나오면 됩니다.

```julia
result = 1.0
for n in 1:10000
    result *=(1/n)
    if result < 1.0/10000
        print("$n is the value")
        break
    end
end
```

`break` 는 전체 루프에서 벗어나는 것이 아니라 `break` 를 포함하는 가장 인접한 루프로부터만 벗어납니다. 예를 들어,

```julia
for i in 1:10
    for j in 1:10
        println("i=$i, j=$j")
        if j > 5
            break
        end
    end
end
```

코드의 `break` 는 `j>5` 일 때 `break` 되며, `i` 루프는 벗어나지 못하고 `1` 부터 `10` 까지 진행됩니다. 그러나,

```julia
for i in 1:10, j in 1:10
    println("i=$i, j=$j")
    if j > 5
        break
    end
end
```

는 `i=1, j=6` 에서 `break` 되어 멈춥니다.


</br>

## `if` 분기문

어떤 조건이 충족되는 지 여부를 따질 때 `if ... elseif ... end` 구문을 사용합니다. 어떤 수 `x` 에 대해 `x>0` 이면 `1` 을 `x<0` 이면 `-1` 을, `x=0` 이면 `0` 을 리턴하는 함수 `msign(x)` 를 만들어 봅시다.

```julia
function msign(x)
    if x>zero(x)
        return one(x)
    elseif x<zero(x) 
        return -one(x)
    else
        return zero(x)
    end
end
```

`zero(x)` 는 `x` 의 타입에서의 `0` 값을 리턴하는 함수이며, `one(x)` 는 `x` 타입의 `1` 값을 리턴하는 함수입니다. `x` 는 어떤 값일 수도 있고 타입일 수도 있습니다. `zero(1)` 은 `Int64` 타입의 `1` 이며, `one(Float32)` 는 `Float32` 타입의 `0.0` 입니다. `for`, `while` 과 같이 `if` 블럭도 `end` 로 끝내야 합니다. 

`if` 블록에서 `elseif` 나 `else` 는 필요 없다면 생략해도 됩니다. 예를 들어 1 부터 100 까지의 정수 가운데 3의 배수만을 더한 합을 구한다고 하면,

```julia
result = 0
for i in 1:100
    if i % 3 == 0
        result += i
    end
end
```

와 같이 사용 할 수 있습니다. `i % 3 == 0` 일 때만 `result += i` 를 수행하고 다른 경우는 아무 일도 수행하지 않습니다.

</br>

## 삼항 연산자 `a ? b : c`

`a` 는 `true`/`false` 를 따질 수 있는 조건이며, `true` 이면 `b` 를 실행시키고 `false` 이면 `c` 를 실행 시킵니다. 예를 들어, 절대값을 리턴하는 함수 `mabs()` 를 다음과 같이 짧게 구현 할 수 있습니다. 

``` julia
mabs(x) = (x>0) ? x : -x
```

여기서 주의해야 할 것은 `?` 와 `:` 각각의 앞, 뒤에 공백이 존재해야 한다는 것입니다. `(x>0)? x : -x` 나 `(x>0)? x: -x` 같은 것들은 에러를 발생시킵니다.

</br>

## `begin ... end` 블럭

Julia 에서 한줄에 여러 명령을 처리하기 위해 `;` 을 사용 할 수 있습니다. 예를 들어

```julia
x=3;y=5;z=x+y
```

는 세가지 명렁을 차례로 입력한 것과 같습니다. 이것을 `begin ... end` 블럭으로 묶을 수 있습니다.

```julia
z = begin
    x=3
    y=5
    x+y
end
```

</br>


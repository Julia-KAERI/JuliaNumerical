# Interude : 정렬 {.unnumbered}

정렬(sorting)이란 데이터를 정해진 순서에 따라 나열하는 것을 말합니다. 예를 들어 $1, 3, 2$ 를 오름차순으로 정렬하면 $1, 2, 3$ 이 되고, 내림차순으로 정렬하면 $3, 2, 1$ 이 됩니다. 일반적으로 정렬이라고 하면 오름차순 정렬을 말합니다.

정렬은 컴퓨터로 아주 많이 수행하는 연산중의 하나이며, 정렬을 효율적으로 하기 위해 많은 알고리즘이 제안되기도 하였습니다. 여기서는 그 알고리즘을 다루지는 않으며, 기본적인 정렬 함수와 그 사용법에 대해서만 다루도록 합니다. 좀 더 자세히 알고 싶으면 julia 문서 [Soring and Related Functions](https://docs.julialang.org/en/v1/base/sort/) 를 참고하시기 바랍니다.

`sort()` 가 정렬을 수행하는 기본적인 함수입니다. `sort(a)` 는 컨테이너 `a` 를 정렬한 컨테이너를 반환하며 `a` 자체를 바꾸지는 않습니다. 그러나 `sort!(a)` 는 `a` 를 정렬된 상태로 바꿉니다. 그리고 함수 인자에 `rev = true` 를 입력하면 내림차순으로 정렬합니다.

```html
In [1]: a=[1, 3, 5, 2]; b = sort(a)
Out[1]: 4-element Vector{Int64}:
 1
 2
 3
 5

In [2]: sort!(b, rev = true);

In [3]: b
Out[3]: 4-element Vector{Int64}:
 5
 3
 2
 1
```

`sortperm()` 함수는 컨테이너가 정렬되었을 때의 인덱스를 반환합니다. 예를 들어 `v=[11, 3, 22]` 일 때 `v` 를 정렬하면 `[3, 11, 22]` 될 것이며 원래 `v` 의 입장에서는 `v[2]`, `v[1], `v[3]` 가 될 것입니다. `sortperm()` 함수는 바로 그 인덱스 `[2, 1, 3]` 을 반환합니다.

```html
In [1]: v = [11, 3, 22]
Out[1]: 3-element Vector{Int64}:
 11
  3
 22

In [2]: sortperm(v)
Out[2]: 3-element Vector{Int64}:
 2
 1
 3
```

배열 `a` 에 대해 `a[[1, 3, 2, 4]]` 는 `[a[1], a[3], a[2], a[4]]` 와 같습니다. 즉 `a[sortperm(a)]` 는 `sort(a)` 와 같습니다. `sortperm` 함수는 어떤 컨테이너의 정럴 순서로 다른 컨테이너를 정렬 할 수 있게 해 줍니다. 예를 들어 우리가 다음과 같은 데이터를 얻었다고 합시다.

| `x` | `y`|
|:----:|:----:|
| 5 | 10 |
| 2 | 3 |
| 1 | 6 |
| 7 | 12 |

배열 `x` 는 `[5, 2, 1, 7]` 이고 `y` 는 `[10, 3, 6, 12]` 입니다. 이것을 보기 좋게 `x` 의 순서대로 `y` 까지 정렬해 봅시다..

```html
In [10]: x=[5, 2, 1, 7];y=[10, 3, 6, 12];

In [11]: v = sortperm(x); x1 = x[v]; y1 = y[v]
Out[11]: 4-element Vector{Int64}:
  6
  3
 10
 12

In [12]: for (x, y) in zip(x1, y1)
         @show x, y
         end
(x, y) = (1, 6)
(x, y) = (2, 3)
(x, y) = (5, 10)
(x, y) = (7, 12)
```

`x1` 과 `y1` 이 각각 `x` 의 순서대로 `x` 와 `y` 를 정렬한 것임을 확인 할 수 있습니다..


</br>

### 함수에 의한 정렬

함수 `f` 에 대해 `b = sort(a, by = f)` 는 함수 `f` 의 결과값에 따라 `a` 를 정렬한 배열입니다. 다음 예를 봅시다. `sort(0, by=cos)` 은 `a[perm(cos.(0))]` 와 같습니다. 물룐 `rev=true` 를 인자로 넣으면 역순으로 정렬합니다.

```html
In [1]: θ = [0, π/2, π, 3*π/2]
Out[1]: 4-element Vector{Float64}:
 0.0
 1.5707963267948966
 3.141592653589793
 4.71238898038469

In [2]: θ[sortperm(cos.(θ))]
Out[2]: 4-element Vector{Float64}:
 3.141592653589793
 4.71238898038469
 1.5707963267948966
 0.0

In [3]: sort(θ, by = cos)
Out[3]: 4-element Vector{Float64}:
 3.141592653589793
 4.71238898038469
 1.5707963267948966
 0.0

In [4]: sort(θ, by = cos, rev=true)
Out[4]: 4-element Vector{Float64}:
 0.0
 1.5707963267948966
 4.71238898038469
 3.141592653589793
```
---
title: "연산자와 함수"

number-sections: true
number-depth: 2
crossref:
  chapters: false
---

## 기본 연산자 

연산자는 `add(a, b)` 와 같은 함수 이름, 괄호, 인자 의 형식을 따르지 않는 함수를 말합니다.


### `=`, `==`, `===`

많은 다른 프로그래밍 언어에서와 같이 `x = y` 는 `y` 의 값을 `x` 에 할당한다는 표현식이며 `==` 와 `===` 는 이 기호의 왼편과 오른편의 변수나 값이 같은지 아닌지를 판단하여 같으면 `true` 다르면 `false` 를 반환하는 연산자입니다. `===` 는 `==` 보다 더 엄격하게 판단합니다. 예를 들어,

```html
In [1]: 2==2.0
Out[1]: true

In [2]: 2===2.0
Out[2]: false
```

를 보면 `2==2.0` 은 `true` 이지만 `2===2.0` 은 `false` 입니다. `===` 는 타입의 종류까지 같아야 `true` 를 반환합니다. 그런데 `==` 는 좀 혼란스럽습니다. 다음 경우를 봅시다.

```html
In [3]: 1.0 == 1.0f0
Out[3]: true

In [4]: 2.0 == 2.0f0
Out[4]: true

In [5]: 1.2 == 1.2f0
Out[5]: false

In [6]: Float32(1.2) == 1.2f0
Out[6]: true
```

`1.0` 등 왼쪽의 값들은 모두 `Float64` 타입이며 오른쪽의 값들은 `Float32` 의 값입니다. `1.0 == 1.0f0` 는 `true` 인데 `1.2 == 1.2f0` 는 `false` 입니다. 이런 행동을 내부적인 코드 수준에서 이해하는 것은 힘든 일입니다. 다만 다른 타입의 값을 비교할 때, 특히 같은지 여부를 판단할 때는 매우 조심해야 한다는 것을 알아야 합니다.

</br>

###  기본 수치 연산 {#sec-basic_operators_for_number}

기본적인 값에 대한 연산에는 다음과 같은 것들이 있습니다.

| 표현 | 정의 |
|:---:|:-----|
| `+x` | 항등 연산 |
| `-x` | 덧셈에 대한 역원. 혹은 `x` 에 `-1` 을 곱한 수|
| `x + y` |	덧셈 |
| `x - y` | 뺄셈 |
| `x * y` |	곱셈 |
| `x / y` | 나눗셈 |
| `x ÷ y` |	나눗셈의 정수 몫, `div(x, y)` 와 같다. |
| `x \ y` |	역 나눗셈. `y / x` 와 같다. |
| `x ^ y` |	거듭제곱. `x` 의 `y` 승 |
| `x % y` |	나머지. `rem(x, y)` 와 같다. |
| `x//y` | `x`, `y` 가 정수일 때 유리수 타입의 $x/y$ |

- `÷` 는 `\div`+ [tab] 키 로 입력 할 수 있습니다.
  
- `x / y` 에서 `x` 와 `y` 가 모두 정수일 때는 실수로 타입이 변환됩니다. 즉 `5/2` 는 `2.5` 이며 `6/3` 은 `2.0` 입니다.

- `x//y` 는 `x`, `y` 가 정수일 때 Julia 의 `Rational` 타입의 값을 반환합니다. 앞서 말했듯이 Julia 에서 유리수는 `Int64` 나 `Float64` 와 같은 고유한 타입입니다.

- `x ÷ y` 는 `x` 와 `y` 가 모두 정수 타입이라면 정수몫을 리턴하지만 `x` 나 `y` 가 정수가 아닌 부동수일 경우에는 정수몫을 부동소수로 반환합니다. 아래의 예를 참고하세요.

```html
In [7]: 173 ÷ 2
Out[7]: 86

In [8]: 173 ÷ 2.0
Out[8]: 86.0

In [9]: 173.0 ÷ 2
Out[9]: 86.0

In [10]: -173 ÷ 2
Out[10]: -86
```
</br>

#### 몫과 나머지

실수 $a$ 를 실수 $d$ 로 나눌 때 $a=k\cdot d + r$ 을 만족하는 정수 $k$를 몫이라고 하고 $r$ 을 나머지라고 합니다. $a,\,d$ 가 양수라면 $0\le r < d$ 를 만족하는 $r$ 을 찾으면 됩니다. 그런데 $a,\,d$ 둘 가운데 하나라도 음수 일 경우를 생각해 봅시다. 예를 들어 $13.0$ 을 $-3.0$ 으로 나누는 경우,

$$
\begin{aligned}
13.0 &= (-4.0) \times (-3.0) -1.0, \\
13.0 &= (-5.0) \times (-3.0) + 2.0,
\end{aligned}
$$

과 같이 몫 나머지를 각각 (-4.0, -1.0) 이나 (-5.0, 2.0) 으로 생각 할 수 있습니다. $a=kd + r$ 로 표현할 때 나머지 $r$ 의 부호를 $a$ 를 따르도록 하는 경우와 $d$ 의 부호를 따르도록 하는 경우가 있는데 julia 의 나머지 `a % r` 은 `a` 의 부호를 따릅니다. 모든 경우에 대해 $0 \le |r| < |d|$ 입니다.

```html
In [11]: -13.0 % 3.0
Out[11]: -1.0

In [12]: 13.0 % -3.0
Out[12]: 1.0

In [13]: -13.0 % -3.0
Out[13]: -1.0
```

::: {.callout-warning icon="false"}

#### 부동소수 나머지 연산에서의 Round-off 에러 

원칙적으로는 `a == (a ÷ d) * d + (a % d)` 이어야 하지만, `a` 나 `d` 가 부동소수일 경우 round-off 에러로 인해 차이가 있을 수 있습니다.

```html
In [14]: (-13.3 ÷ 3.0) * 3.0 + (-13.3 % 3.0)
Out[14]: -13.3

In [15]: (17.24 ÷ 3.42) * 3.42 + (17.24 % 3.42)
Out[15]: 17.240000000000002
```
:::

</br>

### 불 연산 {#sec-boolian_operators}

불(Bool) 타입에 대한 연산은 다음과 같은 것이 있습니다.

| 표현 | 설명 |
|:--:|:------|
| `!x` | 부정(negation) |
| `x && y` | short-circuiting and |
| `x || y` | short-circuiting or |


- `!(true)` 는 `false` 이고 `!(false)` 는 `true` 입니다.

- 아래에 나오는 비트별 연산자 `&` 와 `|` 도 불 연산에 and 연산과 or 연산으로 사용될 수 있습니다. 

</br>

### short-circuiting 연산 {#sec-short_circuiting_operators}

논리연산자 `x && y` 는 `x` 를 먼저 평가하여 `true` 이면 `y` 를 평가하며 `y` 도 `true` 이면 연산의 결과는 `true` 가 됩니다. `x` 가 `false` 이면 `y` 는 평가할 필요가 없이 결과는 `false` 가 됩니다. 그런데 `y` 가 불 값이 아닌 어떤 기능을 하는 함수라면 어떻게 될까요? `x && y` 는 `x` 가 `true` 일 경우에만 `y` 를 실행시키는 조건부 실행문이 됩니다. `x || y` 일 때는 반대로 `x` 가 `true` 이면 `true` 를 리턴하고 `x` 가 거짓이면 `y` 를 실행시킵니다. 불 연산을 사용하여 조건에 따라 실행시키는 것을 **short-circuiting** 연산이라고 하며, julia 에서 상당히 많이 사용되는 테크닉 입니다.


```html
In [19]: x=3
Out[19]: 3

In [20]: x>0 && println("true and short-circuiting and")
true and short-circuiting and

In [21]: x<0 && println("false and short-circuiting and")
Out[21]: false

In [22]: x>0 || println("true and short-circuiting or")
Out[22]: true

In [23]: x<0 || println("false and short-circuiting or")
false and short-circuiting or
```

</br>

### 비트 연산 (Bitwise operation)

비트는 `true` 혹은 `false` 값을 갖는 정보 단위입니다. 아래의 표는 비트에 대한 연산자를 설명합니다.

| 표현  | Name |
|:----:|:--------|
| `~x`  | bitwise not |
| `x & y` | bitwise and |
| `x | y` |	bitwise or |
| `x ⊻ y` | bitwise xor (exclusive or) |
| `x ⊼ y` | bitwise nand (not and) |
| `x ⊽ y` | bitwise nor (not or) |
| `x >>> y` | logical shift right |
| `x >> y` | arithmetic shift right |
| `x << y` | logical/arithmetic shift left |

- `⊻` 는 `\xor` + 탭키, `⊼` 는 `\nand` + 탭키, `⊽` 는 `\nor` + 탭키 로 입력합니다. `>>>` 나 `<<` 는 단순한 키보드 입력입니다.

- [한국어 위키백과-비트연산](https://ko.wikipedia.org/wiki/비트_연산) 과 [영어 위키백과-비트연산](https://en.wikipedia.org/wiki/Bitwise_operation) 을 참고하시기 바랍니다

- `x>>y` 의 경우는 정수 `x` 를 $2^y$ 로 나눈 몫을 계산하는데 자주 사용됩니다. 예를 들어 

```html
In [24]: 15>>1 # 15 나누기 2^1=2 의 몫
Out[24]: 7

In [25]: 427>>2 #427 나누기 2^2=4 의 몫
Out[25]: 106
```

입니다. 비트연산에 대해 편리한 함수로 입력값을 비트 문자열로 바꾸어주는 `bitstring()` 함수가 있습니다.

```html
In [26]: bitstring(1)
Out[26]: "0000000000000000000000000000000000000000000000000000000000000001"

In [27]: bitstring(3.23)
Out[27]: "0100000000001001110101110000101000111101011100001010001111010111"
```

</br>

### 비교 연산

비교 연산은 표현을 평가하여 `true` 혹은 `false` 를 반환합니다.

| 표현 | `true` 인 경우 |
|:---:|:------|
| `x == y`|	`x` 와 `y` 가 같을 때 |
| `x != y`, `x ≠ y` |	`x` 와 `y` 가 다를 때 |
| `x < y` | `x` 가 `y` 보다 작을 때 |
| `x <= y`, `x ≤ y` |	`x` 가 `y` 보다 작거나 같을 때 |
| `x > y`	| `x` 가 `y` 보다 클 때 |
| `x >= y` , `x ≥ y` |	`x` 가 `y` 보다 크거나 같을 때 |

- `≠` 는 `\ne`+탭 키, `≤` 는 `\le`+ 탭 키, `≥` 는 `\ge` + 탭 키 를 통해 입력합니다. 

- 비교 연산을 `1 < 2 <= 3 < 5 != 10 < 12` 같이 이어서 쓸 수 있습니다. 모든 비교 항목이 `true` 일 때만 `true` 를 리턴합니다.

특히 부동소수가 포함된 계산의 결과를 비교할때는 조심해야 합니다. Round-off 에러로 인해 오류가 발생 할 수 있습니다.

```html
In [28]: 0 == 0.0
Out[28]: true

In [29]: 4 == 4.0
Out[29]: true

In [30]: 8.3-1.0 == 7.3
Out[30]: false
```

</br>

## 함수

Julia 에서의 함수는 많은 다른 언어들과 마찬가지로 함수명 뒤의 괄호 `( )` 안에 필요한 값들을 입력하여 함수를 실행시킵니다. 변수 `a` 에 대한 `sin` 함수값을 알고싶다면 `sin(a)` 로 입력합니다. 이 때 `sin` 이 함수 이름이며 함수에 입력되는 값 `a` 를 인자(argument) 라고 합니다. 인자는 값일수도 있고 문자열 혹은 다른 것일 수 있으며, 하나일 수도 있고 여러개일 수도 있습니다.


### 수학 함수

Julia 에서 제공 하는 함수 가운데 기본적인 함수를 소개합니다. 이 함수들의 정의와 사용법에 대해서는 [관련 문서](https://docs.julialang.org/en/v1/manual/mathematical-operations/) 를 참고하기 바랍니다.

| 설명 | 함수 | 
|:--------:| :-----------------|
| 최대공약수, 최소공배수 | `gcd`, `lcm` |
| 절대값과 부호 | `abs`, `abs2`, `sign`, `signbit`, `copysign`, `flipsign` |
| 제곱근, 지수, 로그 관련 | `sqrt`, `cbrt` , `hypot`, `exp`, `expm1`, `ldexp`, `log`, `log2`, ,`log10`, `exponent` |
| 반올림, 올림, 내림 관련 | `round`, `floor`, `ceil`, `trunc` |
| 삼각함수 | `sin`, `cos`, `tan`, `cot`, `sec`, `csc` |
| 역 삼각함수 | `asin`, `acos`, `atan`, `acot`, `asec`, `acsc` |
| 쌍곡선 함수 | `sinh`, `cosh`, `tanh`, `coth`, `sech`, `csch` |
| 역 쌍곡선 함수 | `asinh`, `acosh`, `atanh`, `acoth`, `asech`, `acsch`|
| 기타 | `sinc`, `cosc`|


</br>


### 사용자 정의 함수

예를 들어 두 값 `x` 와 `y` 를 입력 받아 두 값의 합을 반환하는 함수는 다음과 같이 정의합니다. 

```julia
function myadd(x, y)
    return x+y
end
```

혹은 간단하게

```julia
myadd2(x, y) = x+y
```

와 같이 정의할 수도 있습니다. 위의 `myadd` 와 `myadd2` 는 기능상 동일합니다.

함수 정의는 `function` 으로 시작하여 함수 이름이 나오고 `( )` 안에 인자를 받는 변수와 그 정보를 나열합니다. 결과를 반환해야 할 경우 `return` 후에 반환해야 할 값이나 변수를 써 주고, `end` 로 끝납니다. `return` 이 나오면, 그 이후는 평가하지 않고 종료합니다.

```julia
function myadd3(x)
    return x+1
    println(x+2)
end
```

에 대해 `myadd3(3)` 을 실행시키면 `3+1=4` 를 반환하고 종료하며 `return` 의 다음 명령인 `println(x+2)` 명령은 수행하지 않습니다. 

만약 함수 정의 안에 `return` 이 없다면 `end` 바로 앞의 표현식의 결과를 리턴합니다.

```julia
function aa(a)
    a+1
end
```

에 대해 `b=aa(3)` 을 수행하면 `end` 바로 앞의 `a+1` 을 리턴하므로 `b==4` 입니다. 만약 아무 것도 리턴하고 싶지 않다면 명시적으로 `return nothing` 이라고 해 주는 것이 좋습니다. 

</br>

### 익명함수 (람다함수) {#sec-anonymous_function}

`인자 -> 반환하는 함수의 표현식` 꼴로 선언되는 이름 없는 함수를 익명함수(anonymous function) 혹은람다 함수(lambda function) 이라고 합니다. 우선은 함수를 간단하게 정의하는 데도 사용합니다.

```html
In [1]: sq = (x->x^2)
Out[1]: #11 (generic function with 1 method)

In [2]: sq(3)
Out[2]: 9

In [3]: sq("ab")
Out[3]: "abab"
```

`sq = (x->x^2)` 를 봅시다. 오른쪽의 `(x->x^2)` 는 입력 `x` 에 대해 `x^2` 를 반환하는 익명 함수를 의미하며 `sq = (x->x^2)` 는 이 함수 객체를 `sq` 변수에 할당했습니다. 따라서 `sq` 는 함수이며 `sq(3)` 는 `3^2` 인 `9` 를 반환하고 `sq("ab")` 는 `"ab"^2=="abab"` 를 반환합니다.

익명 함수는 여려개의 인자를 가질 수도 있습니다.

```html
In [4]: madd = (x, y) -> x+y
Out[4]: #13 (generic function with 1 method)

In [5]: madd(3, -2)
Out[5]: 1
```

익명함수를 위와 같이 사용하는 것은 다음과 같은 경우에 비해 이점이 없습니다.

```html
In [10]: madd2(x,y) = x+y
Out[10]: madd2 (generic function with 1 method)

In [11]: madd2(3, -2)
Out[11]: 1
```

익명함수는 [`map` 함수에서의 익명함수의 사용](04_containers.qmd#sec-anonymous_function_in_map) 에서 볼 수 있듯이 `map`, `reduce`, 등에서 유용하게 사용됩니다. 또한 [`배열 comprehension`](06_arrays.qmd#sec-array_comprehension) 에서도 유용하게 사용 할 수 있습니다.


</br>

### 익명 함수 : `do ... end`, `begin ... end` {#sec-anonymous_function_do_end_begin_end}

람다 함수 이외에 익명함수를 정의하는 방법은 `do ... end` 블럭과 `begin ... end` 블럭이 있습니다. 이것은 [`do ... end`, `begin ... end` 의 사용](04_containers.qmd#sec_usage_of_do_end_begin_end) 에서 좀 더 다루도록 하겠습니다.


</br>

### 선택적 인자

인자의 값을 입력하지 않아도 되는 인자를 선택적 인자(optional arguments) 라고 합니다. 

#### 기본값이 있는 선택적 인자

함수의 특정 인자에 대한 기본값을 정할 수 있으며 함수를 실행 할 때 이 인자에 값을 입력하지 않으면 기본값이 사용됩니다. 영어로는 Optional argument 라고 합니다. 예를 들어,

```julia
myadd3(x, y=1) = x+y
```
와 같이 정의하면 `y` 를 입력하지 않았을 경우 즉 `myadd(3)` 으로 함수를 실행시켰을 경우 `y=1` 로 수행 됩니다. 즉 `myadd(3)==4` 입니다.


</br>

#### 기본값이 없는 선택적 인자

실제로 코드상에서 기본값이 없는 선택적 인자는 없습니다. 일반적으로 기본값이 없는 선택적 인자는 인자의 값이 주어졌느냐 안주어졌느냐가 중요 할 때 사용합니다. 예를 들어 위의 `myadd3` 에서 `myadd(2, 1)` 과 `myadd(2)` 는 구별 할 수 없습니다. 인자가 선택되지 않았을 때 어떤 기능을 하고싶다면 어떻게 할까요? 특별히 인자가 특정 타입을 받는 경우라면? 이때는 보통 `nothing` 을 기본 인자로 놓습니다. 이 선택적 인자에 값을 입력한다면 정수여야 한다면 타입 유니온을 사용할 수 있습니다.

```julia
function optional_arg(x, y::Union{Nothing, Integer} = nothing)
    if y === nothing
        return x^2
    else
        return x+y
    end
end
```

이 경우 `optional_arg(3)` 은 `y=nothing` 으로 입력이 되기 때문에 $9$ 를 반환하지만 `optional_arg(3, 4)` 는 `y=4` 로 입력이 되므로 `3+4` 인 `7` 이 반환됩니다.


```html
In [10]: function optional_arg(x, y::Union{Nothing, Integer} = nothing)
             if y === nothing
                 return x^2
             else
                 return x+y
             end
         end
Out[10]: optional_arg (generic function with 2 methods)

In [11]: optional_arg(3)
Out[11]: 9

In [12]: optional_arg(3, 4)
Out[12]: 7
```



</br>

### 키워드 인자

인자에 특정한 키워드를 반드시 사용하도록 정할 수도 있습니다. 함수의 정의에서 `;` 으로 구분하여 `;` 앞에는 순서대로 정해진 인자가, `;` 에는 키워드로 정해진 인자가 오도록 합니다. 

```html
In [1]: function myfunc(x, y; color="red")
            println("color = $color, x=$x, y=$y")
        end
Out[1]: myfunc (generic function with 1 method)

In [2]: myfunc(1, color=2, 3)  # 키워드로 정해진 인자는 인자 입력의 순서를 무시한다.
color = 2, x=1, y=3

In [3]: myfunc(1, 2)
color = red, x=1, y=2
```

함수 호출에서 키워드로 정해진 인자는 인자의 입력 순서를 무시하며, 키워드가 없는 인자끼리의 순서대로 인자가 입력된다는 것을 알 수 있습니다.

</br>

### 인자와 반환값의 타입 지정

함수를 정의 할 때 인자나 반환값의 타입을 `::` 연산자를 통해 지정 할 수 있습니다. 예를 들어,

```julia
function mfunc(x::Int64)::Int64
    return x+1
end
```

는 인자 `x` 의 타입을 `Int64` 로 지정하였으며, `x` 에 `Int64` 타입이 아닌 인자가 할당될 경우 에러가 발생합니다. 리턴값의 타입을 지정하는 경우는 약간 다른데 julia 는 리턴 값을 지정된 타입으로 변환시키려고 하며, 변환될 경우는 변환된 값을, 변환되지 않을 경우는 에러를 출력합니다. 예를 들어,

```julia
function mfunc2(x)::Int64
    return x/2
end
```
에서 `mfunc2(1)` 은 `1/2` 가 정수로 변환되지 않으므로 에러를 출력하지만 `myfunc(2.0)` 은 `2.0/2` 가 정수로 변환되므로 변환된 `Int64` 타입의 값 `1` 을 리턴합니다.

```html
In [1]: function myfunc2(x)::Int64
        return x/2
        end
Out[1]: myfunc2 (generic function with 1 method)

In [2]: myfunc2(1)
ERROR: InexactError: Int64(0.5)
...

In [3]: myfunc2(2.0)
Out[3]: 1
```

</br>

여러분들은 타입에 너무 엄격한 것이 아니냐고 생각 할 수 있습니다. 만약 어떠 함수의 인자로 `UInt8` 이든 `Int64` 든 상관 없이 정수만을 받고 싶을 수도 있습니다. 이에 대한 방법은 [`타입의 계층 구조`](08_type_hierarchy.qmd#sec-type_hierarchy) 에서 다루도록 하겠습니다.


</br>

### 함수의 시그너쳐와 메서드

함수 이름과 인자의 갯수, 각 인자의 타입의 정보를 함수의 **시그너쳐(signature)**라고 합니다. Julia 에서는 하나의 함수 이름으로 인자의 타입과 갯수에 따라 각각 다른 기능을 하게 할 수 있는데 이를 메서드(method)라고 합니다. 자세한 것은 [메서드 다중 디스패치](08_type_hierarchy.qmd#sec-method_multiple_dispatch) 에서 다루도록 하겠습니다.




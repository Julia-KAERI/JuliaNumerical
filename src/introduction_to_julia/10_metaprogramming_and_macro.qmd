---
title: "메타프로그래밍과 매크로"

number-sections: true
number-depth: 2
crossref:
  chapters: false
---


[메타프로그래밍](https://en.wikipedia.org/wiki/Metaprogramming)은 프로그램 실행중에 자기 자신 혹은 다른 프로그램을 읽고 수정하고 실행할 수 있는 기술을 말합니다. Julia 처럼 어떤 언어가 자기 자신을 메타프로그래밍 하는것을 **reflection** 이라고 합니다. Julia 에서는 메타프로그래밍이 macro 를 통해 구현됩니다. Julia 에서의 메타프로그래밍과 매크로를 이해하기 위해서는 소스코드가 어떻게 실행되는지 그 과정을 이해해야 합니다.

</br>

## 표현식

### 표현식의 생성

#### `Meta.parse`

Julia 에서 소스코드의 실행은 소스코드의 문자열을 파싱(parsing) 하여 `Expr` 객체인 표현식(expression) 을 만드는데서 시작합니다. 문자열을 표현식으로 바꾸는 함수는 `Meta.parse` 입니다. `

```txt
In [1]: ex1 = Meta.parse("1+2")
Out[1]: :(1 + 2)

In [2]: typeof(ex1)
Out[2]: Expr

In [3]: ex1.head
Out[3]: :call

In [4]: ex1.args
Out[4]: 3-element Vector{Any}:
  :+
 1
 2
```

`Expr` 객체는 `head` 와 `args` 라는 두 부분으로 나뉩니다. `head` 는 Symbol 타입으로 표현식의 종류를, `args` 는 표현식에 사용되는 Symbol, 값, 구문 등을 의미합니다. 앞서 `ex1.head` 가 `:call` 인데 이것은 함수, 혹은 연산자 호출이라는 것을 의미합니다. 아래의 코드에서 보듯이 함수 호출이 아닌 할당에서는 head 가 `:(=)` 로 바뀝니다.

```txt
In [5]: ex2=Meta.parse("a=2")
Out[5]: :(a = 2)

In [6]: ex2.head, ex2.args
Out[6]: (:(=), Any[:a, 2])
```

</br>

표현식은 `eval` 함수를 통해 실행 할 수 있습니다. 

```txt
In [8]: eval(ex1)
Out[8]: 3
```

</br>

#### Quoting

우리는 앞서 [심볼 타입](02_variables_basic_types.qmd#sec-symbol_types) 에서 `a=:b` 와 같이 `:` 를 사용하여 심볼 타입을 정의하는 것을 보았습니다. `:` 로 시작하는 구문은 심볼 타입 뿐만 아니라 표현식도 생성합니다. `Out[1]` 에서 보듯이 `:` 로 시작하여 `( )` 안에 표현된 구문은 표현식을 정의합니다. 이렇게 `:( )` 를 이용하여 표현식을 정의하는 것을 **quoting** 이라고 합니다.

```txt
In [1]: ex1 = :(a=1+2)
Out[1]: :(a = 1 + 2)

In [2]: ex2 = Meta.parse("a=1+2")
Out[2]: :(a = 1 + 2)

In [3]: ex1==ex2
Out[3]: true

In [4]: eval(ex1)
Out[4]: 3

In [5]: a
Out[5]: 3
```

</br>

##### 표현식의 내부

이제 표현식이 내부적으로 어떻게 구성되는지를 봅시다. 보통 두가지 방법이 있습니다. 하나는 `dump` 함수를 통해 들여쓰기와 참조 표시를 포함하여 출력하는 것입니다.

```txt
In [7]: dump(ex1)
Expr
  head: Symbol =
  args: Array{Any}((2,))
    1: Symbol a
    2: Expr
      head: Symbol call
      args: Array{Any}((3,))
        1: Symbol +
        2: Int64 1
        3: Int64 2
```

다른 하나는 [S-표현식](https://en.wikipedia.org/wiki/S-expression) 의 형태로 보는 것으로 `Meta.show_sexp` 함수를 이용합니다.

```txt
In [8]: Meta.show_sexpr(ex1)
(:(=), :a, (:call, :+, 1, 2))
```



</br>

##### `:( )` 안에 값이 있는 경우 {#sec-value_in_quote}

한가지 유의해야 할 것은 표현식에 `:(3)` 처럼 `:( )` 안에 값을 넣는다면 표현식이 아닌 값이 됩니다.

```txt
In [12]: :(3)
Out[12]: 3

In [13]: :(3.34)
Out[13]: 3.34

In [14]: :("aBγΔ")
Out[14]: "aBγΔ"
```

</br>

### `quote ... end` {#sec-quote_end_block}

앞서 알아본 것처럼 `:( )` 를 이용한 quting 을 통해 표현식을 정의 할 수 있으며 단순한 표현식에 적합합니다. 좀 더 복잡한 표현식을 위해서는 `quote ... end` 블럭을 다음과 같이 사용 할 수 있습니다.

```julia
ex = quote
    x = 1
    y = 2
    x + y
end
```

`ex` 는 `:(x=1;y=2;x+y)` 와 같습니다.


</br>

### 표현식의 보간법

#### `$` 를 이용한 보간

`$` 를 이용한 문자열 보간처럼 `$` 를 이용하여 표현식을 보간 할 수 있습니다.

```txt
In [1]: a=1;

In [2]: ex1 = :(b=$a+3)
Out[2]: :(b = 1 + 3)
```

`ex1` 표현식 내의 `$a` 는 즉시 `a` 라는 변수가 가진 값 `1` 로 치환됩니다. `$` 로 보간하지 않았을 경우에는 `a` 변수의 값이 바뀔 경우 그 결과가 달라집니다.

```txt
In [3]: ex2 = :(b=a+3)
Out[3]: :(b = a + 3)

In [4]: eval(ex1), eval(ex2)
Out[4]: (4, 4)

In [5]: a=4; eval(ex1), eval(ex2)
Out[5]: (4, 7)
```

앞서 말했듯이 `$` 로 보간했을 때는 즉시 변수가 현재의 값으로 치환됩니다. 따라서 `ex1` 에는 변수 `a` 의 흔적이 남아 있지 않습니다. 그러나 `$` 로 보간되지 않은 `ex2` 는 `eval` 함수가 실행 될 때의 `a` 값이 입력되므로 그 값이 바뀌게 됩니다.

```txt
In [6]: Meta.show_sexpr(ex1)
(:(=), :b, (:call, :+, 1, 3))

In [7]: Meta.show_sexpr(ex2)
(:(=), :b, (:call, :+, :a, 3))
```

</br>

#### 스플래팅 보간

`$` 를 이용한 보간은 한번에 하나의 표현식만 보간합니다. 앞서 알아본 [... 연산자](04_containers.qmd#sec-splat) 처럼 표현식의 배열을 이용하여 한꺼번에 보간 할 수 있습니다. 

```txt
In [1]: exprs = [:a, :b, :c]
Out[1]: 3-element Vector{Symbol}:
 :a
 :b
 :c

In [2]: :(f(1, $(exprs...)))
Out[2]: :(f(1, a, b, c))
```

</br>

#### 중첩된 quote

앞서 우리는 표현식의 보간을 알아보았습니다. 표현식 또한 표현식에 보간 될 수 있습니다. 다음을 봅시다.

```txt
In [1]: ex = :(1+2);

In [2]: ex1 = quote $ex end
Out[2]: quote
    #= REPL[2]:1 =#
    1 + 2
end

In [3]: eval(ex1)
Out[3]: 3

In [4]: ex2 = quote ex end
Out[4]: quote
    #= REPL[4]:1 =#
    ex
end

In [5]: eval(ex2)
Out[5]: :(1 + 2)

In [6]: eval(eval(ex2))
Out[6]: 3
```

`ex` 는 표현식이며 `ex1` 은 `quoto ... end` 안에 `$ex` 즉 `1+2` 라는 식을 삽입합니다. 따라서 `ex1` 은 `quote 1+2 end` 와 같습니다. `ex2` 는 `quote ... end` 안에 `:(1+2)` 를 삽입합니다. 따라서 `ex2` 는 `quote :(1+2) end` 와 같으며, `eval(ex2)` 는 `(1 + 2)` 를 반환합니다. 아래의 `ex3` 는 당연히 `quote ex end` 와 같습니다.

```txt
In [8]: ex3 = quote quote $ex end end
Out[8]: quote
    #= REPL[8]:1 =#
    $(Expr(:quote, quote
    #= REPL[8]:1 =#
    $(Expr(:$, :ex))
end))
end
```

</br>

### `QuoteNode`




</br>

### 함수를 호출하는 표현식

두 수의 최대공약수를 구하는 함수는 `gcd` 입니다. 즉 `gcd(4, 6)` 은 `2` 입니다. 이 표현식에 대한 S-표현식은 다음과 같습니다.

```txt
In [1]: ex1 = :(gcd(4, 6))
Out[1]: :(gcd(4, 6))

In [2]: Meta.show_sexpr(ex1)
(:call, :gcd, 4, 6)
```

S- 표현식을 이용하여 `ex1` 과 같은 표현식을 `Expr(:call, :gcd, 4, 6)` 을 통해 만들 수 있습니다. 

```txt
In [3]: ex3 = Expr(:call, :gcd, 4, 6)
Out[3]: :(gcd(4, 6))

In [4]: eval(ex3)
Out[4]: 2
```

즉 인자 `op1`, `op1` 를 받는 함수 `func1` 을 호출하는 표현식은 `Expr(:call, :func1, op1, op2)` 입니다. 만약 인자가 많아지면 계속 `,` 로 이어 쓰면 됩니다.


</br>

## 매크로

매크로는 인자를 받아 표현식을 반환하는 특별한 타입의 함수라고 볼 수 있습니다. `mymacro` 라는 함수에 인자로 `ag1`, `ag2` 를 입력 할 때 `@mymacro(ag1, ag2)` 혹은 `@mymacro ag1 ag2` 와 같이 실핼 시킬 수 있습니다. 좀 더 자세히 알아봅시다.


### 매크로와 함수의 차이

매크로에 인자를 입력 할 수 있으며, 역시 함수와 유사합니다. 그러나 매크로는 함수와 다른 몇가지 차이점이 존재합니다.

1. 매크로는 전역 범위 내에서만 정의 될 수 있습니다.
2. 매크로의 인자는 매크로 내부에서 인자에 대한 표현식으로 바뀝니다.
3. 매크로의 반환값은 표현식이며 반환값을 값으로 반환하지 않고 실행합니다.
4. 매크로는 함수처럼 괄호 안에 인자를 나열할 수도 있으며, 괄호 없이 공백으로 구분하여 나열할 수도 있습니다.

</br>

1은 매크로가 함수 정의 안이나 `for ... end` 같은 블럭 내부에서 정의될 수 없다는 것을 말합니다. 함수는 이와 반대로 함수 내부나 블럭 내부에서 정의 될 수 있습니다. 

</br>


#### 매크로의 정의와 반환값

매크로는 인자들을 받아 표현식을 반환하는 함수를 의미합니다. 매크로는 함수와 비슷하게 `macro ... end` 구문으로 정의하며, 매크로 이름 앞에 `@` 를 붙여 실행 할 수 있습니다.

```txt 
In [1]: macro hello_world()
            return :(println("Hello, world!"))
        end
Out[1]: @hello_world (macro with 1 method)

In [2]: @hello_world()
Hello, world!
```

</br>

#### 매크로의 인자

우선 매크로에 전달되는 인자가 매크로 내부에서 어떻게 되는지 알아봅시다.

```txt
In [1]: macro hello_world(your_name)
            println("In macro, arg is = ", your_name, ", and the type is ", typeof(your_name))
            return :(println(:"Hello, world! I'm ", $your_name))
        end
Out[1]: @hello_world (macro with 1 method)

In [2]: @hello_world("Julia")
In macro, arg is = Julia, and the type is String
Hello, world! I'm Julia

In [3]: @hello_world(1+1)
In macro, arg is = 1 + 1, and the type is Expr
Hello, world! I'm 2
```

`In [3]` 를 봅시다. 인자로 `1+1` 을 넣었을 때 macro 내부에서는 `Expr` 객체인 `:(1+1)` 로 인식이 된다는 것을 알 수 있습니다. `In [2]` 의 경우처럼 식이 아닌 값을 넣는 경우는 [앞에서](#sec-value_in_quote) 언급했듯이 표현식이 값으로 바뀝니다. 

</br>

#### 매크로의 반환값과 `macroexpand` 매크로

매크로는 정의상 표현식을 반환하지만 실제로는 반환되는 표현식을 실행합니다. 표현식을 반환받기 위해서는 `macroexpand` 라는 매크로를 사용합니다. 

```txt
In [10]: @macroexpand(hello_world("Julia"))
Out[10]: :(hello_world("Julia"))
```

`@macroexpand` 는 매크로 분석에 아주 유용한 메크로입니다. [앞으로 `@macroexpand` 와 같이 `@` 로 시작하는 이름은 별다른 설명이 없다면 매크로를 의미합니다.]{.aside}

</br>

#### 매크로 실행시 인자의 입력

매크로는 인자를 함수처럼 `( )` 안에 넣어서 전달 할 수도 있지만 매크로 이름 뒤와 인자들 사이에 공백을 두고 나열 할 수 있습니다.
```txt
In [1]: macro club_members(mem1, mem2, mem3)
            return :(println("Members are : ", $mem1, ", ", $mem2, ", ", $mem3))
            end
Out[1]: @club_members (macro with 1 method)

In [2]: @club_members("John", "Jenny", "Jucy")
Members are : John, Jenny, Jucy

In [3]: @club_members "Henny" "Mark" "Tony"
Members are : Henny, Mark, Tony
```


</br>

### `@assert` 매크로

개인적으로 많이 사용하는 매크로입니다. `@assert` 매크로는 인자로 `true` 나 `false` 를 판별하는 표현식과 문자열을 받으며 표현식이 `true` 일 경우는 아무것도 하지 않고 `false` 일 경우는 에러를 내며 프로그램을 정지합니다. `@assert` 매크로는 built-in 이므로 julia 에서 추가 패키지 설치 없이 실행 할 수 있습니다. 

```txt
In [1]: @assert 2==3 "에러 메시지"
ERROR: AssertionError: 에러 메시지
...
```

`2==3` 은 거짓이므로 에러를 발생시킵니다. 에러에는 여러 종류가 있으며 여기서는 `AssertionError` 를 발생시켰습니다. 에러를 발생시킬 때는 추가 메시지를 출력 할 수 있는데 `@assert` 의 두번째 인자가 바로 추가메시지 입니다. `@macroexpand` 를 통해 `@assert` 가 반환하는 표현식을 봅시다.

```txt
In [22]: @macroexpand @assert a==b
Out[22]: :(if a == b
      nothing
  else
      Base.throw(Base.AssertionError("a == b"))
  end)
```

자 이제 이것과 같은 일을 하는 매크로를 작성 해 봅시다. 실제 `@assert` 매크로와는 다를 수 있지만 거의 똑같이 작동합니다.

```txt
In [1]: macro myassert(ex, msgs...)
            msg = ((isempty(msgs) ? ex : msgs[1]) |> string)
            return :($ex ? nothing : AssertionError($msg))
        end
Out[1]: @myassert (macro with 1 method)

In [2]: @myassert 3>4 "맞을 경우는 메시지가 출력되지 않음"
Out[2]: AssertionError("맞을 경우는 메시지가 출력되지 않음")

In [3]: @myassert 3<4 "맞을 경우는 메시지가 출력되지 않음"
```

</br>

### 청결한 매크로

매크로에 전달되는 표현식이 매크로를 오염시킬 수 있습니다. 다음의 코드를 봅시다.

```{.julia code-line-numbers="false"}
macro mm(ex)
    return quote
        t = 1
        println("표현식 평가 이전 t = ", t)
        val = $ex
        println("표현식 평가 이후 t = ", t, ", val = ", val)
        return val
    end
end
```

`@mm t=100` 으로 실행시키면 다음과 같은 출력을 얻습니다.

```sh
표현식 평가 이전 t = 1
표현식 평가 이후 t = 100, val = 100
100
```

코드의 5 번째 줄 `val = $ex` 에서 실제로 수행하는 것은 `val = t = 100` 이며, `t` 와 `val` 모두 `100` 이 됩니다. 이 때 사용될 수 있는 것이 `esc` 함수입니다. `esc` 함수는 매크로 내에서만 사용 할 수 있는 함수로, 표현식을 평가할 때 내부 변수의 오염을 막아줍니다. 이제 다음 코드를 봅시다.

```{.julia code-line-numbers="false"}
macro nn(ex)
    return quote
        t = 1
        println("표현식 평가 이전 t = ", t)
        val = $(esc(ex))
        println("표현식 평가 이후 t = ", t, ", val = ", val)
        val
    end
end
```

`@mm` 과 `@nn` 의 차이는 5번째 줄에 `esc` 함수를 사용했다는 것 뿐입니다. `@nn t=100` 을 실행하면 우리가 원했던 오염되지 않은 결과를 얻습니다.

```txt
표현식 평가 이전 t = 1
표현식 평가 이후 t = 1, val = 100
100
```

</br>

### 코드 생성

예를 들어 당신이 `Float64` 형태의 값에 대한 특별한 타입을 필요로 한다고 하자. 이 값은 일반적인 실수에 대해 `sin` 과 `cos` 값이 바뀌고, 따라서 `tan` 와 `cot` 함수값이 바뀌어야 한다고 하자. 실제로 이런 타입이 필요한지는 모르겠지만 일단은 연습이다. 새로운 타입을 `XNum` 이라고 하자. 물론 `sin(v::XNum) = cos(v.val)` 과 같이 네 함수에 대해 정의 할 수 있지만 표현식을 이용하여 다음과 같이 일괄적으로 바꿔 줄 수 있다.


```julia
struct XNum
    val::Real

    function XNum(v::Real)
        return new(Float64(v))
    end
end

for (op1, op2) ∈ zip((:sin, :cos, :tan, :cot), (:cos, :sin, :cot, :tan))
    eval(quote
        Base.$op1(a::XNum) = XNum($op2(a.val))
    end)
end
```

`for ...` 문 안의 `eval(ex::Expr)` 함수는 표현식 `ex` 를 실행시키며 이것은 `@eval` 매크로를 사용하여 다음과 같이 쓸 수 있다.

```julia
for (op1, op2) ∈ zip((:sin, :cos, :tan, :cot), (:cos, :sin, :cot, :tan))
    @eval Base.$op1(a::XNum) = XNum($op2(a.val))
end
```



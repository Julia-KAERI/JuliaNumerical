---
title: "이름공간, 모듈, 패키지"
language: ../_language-ko_custom.yml 

number-sections: true
number-depth: 2
crossref:
  chapters: false
---

## 이름 공간과 변수의 범위

프로그래밍할 때에는 많은 변수, 함수, 자료형의 이름이 필요합니다. 보통은 이름이 중복된다면 에러가 발생하거나 나중에 나오는 것이 앞에 나온 것을 삭제시키고 그 자리를 대신하게 되는데 이것은 큰 문제를 발생시킬 수 있습니다. 이런 것을 막기 위해 중복되지 않은 이름을 사용해야 하지만 코드가 길어지면 이것도 아주 골치아픈 일이 될 수 있습니다. 그래서 많은 프로그래밍 언어들이 이름공간(namespace)과 변수가 유효한 범위를 구현합니다. Julia 에서 이름공간은 뒤에 설명할 모듈(module) 마다 생성됩니다. Julia 가 실행될 때 `Main` 모듈로 실행되며, julia REPL 이나 Jupyter 에서도 `Main` 이 최상위 모듈입니다.

</br>

## 모듈

모듈은 어떤 기능과 관련된 값, 함수, 자료형 등의 모음입니다. 추상적인 개념이 아닌 julia 에 그 문법이 정의된 기능으로 아래의 예제 코드와 같이 `module` 로 시작해서 `end` 로 끝납니다. 모듈 안에는 다른 모듈이 포함 될 수 있습니다. 하나의 파일에 여러개의 모듈이 같이 있을 수도 있습니다. 


```julia
module mymodule1

export a, mf
a=2
b=3
function mf(x)
    return x*2
end

end
```

앞서 설명했듯이 모듈은 새로운 전역적인 이름공간을 만들 수 있습니다. 그 안에서 정의된 이름들은 다른 이름공간의 이름과 충돌할 염려 없이 사용 할 수 있습니다. 다른 이름공간에서 모듈의 이름을 사용하기 위해서는 우선 모듈 내에서 `export` 명령어를 통해 밖에서 사용 할 수 있는 이름을 지정해 줘야 합니다. 예를 들어

```txt
In [1]: module mymodule1
        export a, mf
        a=2
        b=3
        function mf(x)
            return x*2
        end
        end
Out[1]: Main.mymodule1
```

이 모듈은 REPL 이 실행될 때 만들어지는 `Main` 이라는 전역적인 이름공간 내에 `mymodule1` 이라는 이름이 붙은 부분적인 이름공간을 만듭니다. 부분적 이름공간의 이름에 접근할 때는  `.` 으로 구분하여 `Main.mymodule1.a` 와 같이 접근하거나 전역적 이름공간을 제외한 `mymodule1.a` 와 같이 접근합니다. 예를 들어

```txt
In [2]: mymodule1.mf(3)
Out[2]: 6
```

는 `mymodule1` 모둘의 함수 `mf` 를 의미합니다. 

</br>

### `using`

`using` 명령어는 `module` 에서 `export` 명령어를 통해 지정한 이름들을 전역적 이름공간에서 사용 할 수 있게 해 줍니다.

```html
In [6]: using .mymodule1

In [7]: a
Out[7]: 2

In [8]: mf(3)
Out[8]: 6

In [9]: mymodule1.b
Out[9]: 3

In [10]: b
ERROR: UndefVarError: `b` not defined
```

`export` 를 통해 지정되지 않은 `b` 는 전역 이름공간에서 사용 할 수 없으며 굳이 접근하고자 하면 `mymodule1.b` 와 같이 접근해야 합니다.


</br>

### `import`

`using` 명령어는 모듈 내의 이름을 전역적인 이름공간으로 가져오는데 비해 `import` 명령어는 모듈 이름만을 전역적인 이름공간으로 가져옵니다. 즉 `import mymodule1` 을 하면 `mymodule1.a` 나 `mymodule1.mf` 를 통해 접근해야 합니다. 그렇다면 단순히 REPL 에서 사용할 때는 차이가 없게 됩니다. 이 차이를 알기 위해 다음과 같은 내용을 `mymodule.jl` 파일로 저장합니다.

``` {.julia}
module mymodule1
export a, mf
a=2
b=3
function mf(x)
    return x*2
end
end

module mymodule2
export b, mf
a=4
b=5
function mf(x)
    return x*a*b
end
```

두 모듈 모두 `mf` 란 함수가 존재하며 `export` 되므로 충돌의 가능성이 있습니다.. 이제 julia REPL 에서 모듈이 있는 파일을 읽고 `mf` 함수를 실행시켜 봅니다.

```txt
In [1]: include("mymodule.jl")
Out[1]: Main.mymodule2

In [2]: using .mymodule1

In [3]: mf(1)
Out[3]: 2
```

`In [2]` 에서는 `mymodule1` 모듈만을 반입했으므로 `mf` 함수는 `mymodule1` 모듈의 그것입니다. 

```txt
In [4]: using .mymodule2
WARNING: using mymodule2.mf in module Main conflicts with an existing identifier.

In [5]: b
Out[5]: 5

In [6]: mf(3)
Out[6]: 6
```

`using .mymodule2` 를 하면 충돌이 발생하기 때문에 julia 인터프리터는 경고합니다. `b` 는 `mymodule2` 에서 반입된 `5` 가 사용되며 `mf` 함수는 먼저 반입된 `mymodule1` 의 그것입니다. 이렇게 이름이 충돌하는 것은 중요한 오류를 발생시킬 수 있으므로 절대로 피해야 합니다. 이런 경우에는 `import` 를 사용하는 것이 하나의 방법입니다. 아래와 같이 `import` 다음에 `.` 을 앞에 붙이고 모듈 이름을 써서 반입하면 모듈 이름과 모듈 내의 이름을 `.` 으로 구분하여 사용 할 수 있습니다. 

```html
In [1]: include("mymodule.jl")
Out[1]: Main.mymodule2

In [2]: import .mymodule1

In [3]: import .mymodule2

In [4]: mymodule1.mf(1)
Out[4]: 2

In [5]: mymodule2.mf(2)
Out[5]: 40
```

</br>

### `using ... as`, `import ... as`

또 하나의 방법은 이름을 바꾸는 것입니다. `usimg .mymodule1: a as a1, mf as mf1` 이라고 하면 `mymodule1` 모듈의 `a` 를 전역적인 이름영역으로 반입하면서 그 이름을 `a1` 으로 바꾸며, `mf` 를 `mf1` 으로 이름을 바꿉니다. 이름울 바꾸지 않고 반입할 경우는 `as ...` 없이 이름만 쓰면 됩니다. 아래 코드의 `In [2]` 처럼 하면 됩니다.

```html
In [1]: include("mymodule.jl")
Out[1]: Main.mymodule2

In [2]: using .mymodule1: a, mf as mf1

In [3]: a
Out[3]: 2

In [4]: mf
ERROR: UndefVarError: `mf` not defined
...

In [5]: mf1
Out[5]: mf (generic function with 1 method)

In [6]: using .mymodule2:b, mf as mf2

In [7]: b
Out[7]: 5

In [8]: mf2(a)
Out[8]: 40

In [9]: mf1(1)
Out[9]: 2
```

이름을 바꾸는 것은 이름의 중복을 방지하는데도 사용되지만, 긴 이름을 짧게 해서 편리하게 쓰고자 할 경우나, 짧은 이름을 명확하게 하기위해 긴 이름으로 바꿀 때도 사용할 수 있습니다. 

</br>



## 변수의 범위

모듈을 통해 이름공간과 다른 이름공간을 현재의 이름공간으로 반입하는 법을 알아보았습니다. 이름공간 내에서 사용 할 수 있는 변수를 전역적(global) 이라고 합니다. 반대로 이름공간 내의 특정 부분에서만 사용할 수 있는 변수를 지역적(local) 이라고 합니다. 변수가 유효한 지역적인 범위를 만들어 낼 수 있는 코드 영역을 **블럭 (block)**이라고 합시다. 대표적으로 함수를 정의하는 `function ... end` 구문이나 흐름 제어문인 `for ... end` 구문입니다. 이들은 그 내에서만 유효한 변수를 선언 할 수 있습니다.


이제 이름 공간 내에서 변수의 범위를 알아봅시다. 아래 코드를 수행하기 전에 `i` 와 `j` 라는 변수를 할당하지 않았다고 합시다.

```julia
for i in 1:10
    j=i+1
end
```

이 때 `i` 나 `j` 는 `for ... end` 블럭 밖에서는 접근 할 수 없으며, 접근하려고 하면 `ERROR: UndefVarError` 에러가 발생합니다.


그러나 아래 코드와 같이 미리 `j` 변수를 정해둔 경우에는 `j` 변수는 `for ... end` 블럭 안에서 그대로 적용됩니다.

```julia
j=0
for i in 1:10
    j=i+1
end
println("j=$j")
```

</br>

이젠 함수의 경우를 봅시다.

```txt
In [1]: j=4
Out[1]: 4

In [2]: function mf1(x)
        k = x+j
        return k
        end
Out[2]: mf1 (generic function with 1 method)

In [3]: mf1(5)
Out[3]: 9

In [4]: k
ERROR: UndefVarError: `k` not defined
```

위의 코드에서 `j` 는 전역적 범위에서 `4` 를 할당받았습니다$^\ast$. `mf1` 이라는 함수 안의 `k` 라는 변수는 함수 내부에만 영항을 끼칠 수 있습니다. 그러나 `j` 는 전역변수이므로 함수 내의 `j` 는 함수 밖의 `j` 와 동일합니다.  [$^\ast$ 함수 내에서 인자로 주어지지 않은 함수 밖의 변수를 사용하는 것은 대부분의 경우 피해야 할 습관입니다. 이 경우는 무조건 인자로 전달해서 함수에서 처리해야 하지만, 변수 범위를 설명하기 위해 억지로 예를 든 것입니다.]{.aside}


</br>

```html
In [4]: function mf2(x)
        k = x+1
            function mf3(y)
                return (k+1)
            end
            return mf3(x+1)
        end

Out[4]: mf2 (generic function with 1 method)

In [5]: mf2(3)
Out[5]: 5
```

`mf2` 함수 정의 안에서는 새로운 지역적 변수들을 정의 할 수 있으며 `mf3` 는 `mf2` 안에서 더 지역적인 변수들을 만들 수 있습니다. `k` 는 `mf2` 함수 내에서 정의되었기 때문에 `mf3` 함수 정의 내에서 사용 할 수 있습니다. 이렇게 변수의 범위는 계층적입니다. 최상위에 전역적인 이름들이 있으며, 그 하위 범위마다 지역적인 변수를 사용 할 수 있습니다. 하위의 블럭에서는 상위의 변수를 사용 할 수 있습니다. 필요하다면 지역적 블럭에서 전역적인 혹은 상위의 블럭의 변수와 같은 이름을 갖지만 별도로 동작하는 이름을 만들 수 있습니다$^\ast$. [$^\ast$ 이렇게 상위 이름공간에서 정의된 이름을 하위 이름공간에서 별도로 사용할 때, 해당하는 상위 이름공간의 이름의 효과를 일시적으로 멈추는 것을 **shadowing** 이라고 합니다.]{.aside} 하지만 혼동을 일으키며, 이러한 혼동은 에러의 큰 원인이 되기 때문에 되도록이면 피해야 할 것입니다.

</br>




### 영역 타입

전역적 혹은 지역적 범위의 변수를 생성 할 수 있는 블럭은 다음과 같습니다.

| Construct | 영역 타입 | 혀용되는 이름공간 |
|:----------:|:----:|:----:|
| `module`, `baremodule` | 전역 | 전역 |
| `struct` | 지역 (soft) | 전역 |
| `for`, `while`, `try` | 전역, 지역 (soft) | 전역 |
| `macro` | 지역 (hard) | 전역 |
|`functions`, `do` 블럭, `let` 블럭, comprehensions, generators | 지역 (hard) | 전역, 지역 |


여기에 빠진 `begin` 블럭과,  `if` 블럭은 영역 변수를 만들 수 없습니다. 즉 이 두 블럭 내에서 변수를 선언하더라도 상위 영역의 변수에 포함됩니다.

상위 범위의 이름은 하위 범위에서 사용 할 수 있습니다. 문제는 상위 범위에 있는 이름과 같은 이름을 하위 범위에서 사용할 때 이며 크게 두가지로 나눌 수 있겠습니다.

1. 상위 범위 변수를 그대로 사용하고 싶을 때.
2. 상위 변수와 같은 이름을 가진 변수를 별도로 하위 범위에서 사용하고 싶을 때.

2번의 경우는 굳이 상위 변수와 같은 이름을 사용한다기 보다는, 상위 범위에 많은 변수명과 연산이 얽혀 있는데 그것을 일일이 확인하고 싶지 않을 때에 발생한다고 볼 수 있겠습니다. 이때는 [`local`](#sec-local_keyword) 을 사용하면 되는데 이후 설명하겠습니다.

상위 범위에서 `v=1` 이라고 이름을 할당 했다고 합시다. 하위 범위에서 `v=2` 라고 변수를 명시적으로 할당 했다면 하위 이름공간의 영역에서는 `v==2` 이며 상위 이름공간의 `v` 는 가려집니다. 그런데 변수에 값을 할당 하지 않고 `w=v+2` 와 같이 `v` 의 값을 사용 할 때의 성질에 따라 hard scope 와 soft scope 로 나뉩니다.

1. Hard scope 의 경우 : 해당 하위 이름공간에 지역적 범위의 변수 `v` 가 생성됩니다.

```html
In [1]: v=1
Out[1]: 1

In [2]: function myfunc1(x)
            println("in myfunc1, v+x=", v+x)
        end
Out[2]: myfunc1 (generic function with 1 method)

In [3]: function myfunc2(x)
            v=3 # local variable 이 생성됩니다. shadowing !!
            println("in myfunc1, v=3, v+x=", v+x)
        end
Out[3]: myfunc2 (generic function with 1 method)

In [4]: myfunc1(3)
in myfunc1, v+x=4

In [5]: myfunc2(3)
in myfunc1, v=3, v+x=6

In [6]: v
Out[6]: 1
```

2. Soft scope 의 경우
   - Julia REPL 이나 jupyter 와 같이 interactive mode 일 경우에는 상위 범위의 변수 `v` 가 할당됩니다.
   - Interactive mode 가 아닐경우에는 경고가 출력되며 하위 범위의 변수 `v` 가 생성됩니다.


</br>

::: {#exr-variable_scope_1}
`for ... end` 는 soft scope 입니다. 아래의 코드를 파일로 저장하고 julia 로 실행시켜보고 어떤 경고(`Warning`) 가 출력되는지 확인해 봅시다. Julia REPL 이나 jupyter 로 실행시켜 봅시다.

```html
v=10
for i in 1:10
    v=i
end
```

:::


</br>

### `local` {#sec-local_keyword}

다음 코드를 봅시다.

```{.julia code-line-numbers="true"}
v1 = 0
v2 = 3
if v2 < 5 
    v1 = v2+1
    x = sin(v1)
end
```

이미 `v1=0` 라고 선언되었으며 `if` 문의 분기조건을 충족하기 때문에 위 코드의 실행이 끝나면 `v1=4` 가 됩니다. 그런데 당신이 실제로 원하는 것은 `v1` 값을 바꾸는 것이 아니라 단지 `sin(v2+1)` 을 계산하는 것이었다고 합시다. 코드가 길거나 많은 변수가 복잡하게 계산되고 있다면 이런 일이 벌어질 수 있습니다. 이 때 변수 할당 앞에 `local` 키워드를 놓으면 이 변수는 더 상위 범위의 같은 이름의 변수와 내부적으로 다르게 처리하며, 상위 범위의 미리 선언된 변수의 값에 영향을 주지 않습니다. 즉

```{.julia code-line-numbers="true"}
v1 = 0
v2 = 3
if v2 < 5 
    local v1 = v2+1
    x = sin(v1)
end
```

를 실행시키고 난 뒤에도 `v1 == 0` 입니다. `local` 키워드는 전역적으로 어떤 변수가 선언되었더라도 지역적인 변수를 만들어서 그 변수를 사용하며, 전역적인 변수는 건드리지 않도록 합니다.


</br>


## 패키지 

패키지는 모듈들과 모듈들을 관리하고 테스트하기위한 여러 파일들의 모음입니다. 공식적으로 지원되는 패키지들은 [https://juliapackages.com](https://juliapackages.com) 에서 확인 할 수 있습니다. 

Julia 를 설치하면 기본적으로 많은 자료형과 함수들도 같이 설치되지만 이것만으로는 충분하지 않습니다. 어떤 패키지는 Julia 언어와 함께 제공되며, 어떠 패키지는 패키지 관리자 `Pkg.jl` 을 이용하여 설치할 수 있습니다. Julia 의 패키지들은 Github 저장소에서 관리됩니다. 

### 패키지 추가

패키지를 추가하는 방법은 두가지가 있습니다. 우선은

```julia
using Pkg
```

를 실햄합니다. `Pkg` 는 패키지를 관리해주는 패키지로 기본적으로 julia 에 포함된 패키지 입니다. `using Pkg` 는 이제 `Pkg` 패키지에 포함된 여러 값, 함수, 자료형 등을 사용수 있도록 julia 에게 준비하라는 뜻입니다. 패키지 설치는 `Pkg.add` 함수를 사용합니다. 예를 들어 코드의 수행을 분석해주는 `BenchmarkTools` 를 설치한다면 

```julia
Pkg.add("BenchmarkTools")
```

를 실행시키면 됩니다. 보통 하나의 패키지는 다른 패키지를 필요로 하는데 이 필요성 관계를 **의존성(dependency)** 이라고 합니다. Julia 는 자동적으로 이 패키지를 설치하는데 필요한 다른 패키지도 설치합니다. 패키지 설치가 성공하면

```julia
using BenchmarkTools
```

명령문을 통해 `BenchmarkTools` 패키지의 여러 기능을 사용 할 수 있습니다.

</br>

### 패키지 update

보통 널리 사용되는 패키지는 끊임없이 개선됩니다. 이것을 update 라고 하며

```julia
Pkg.update()
```

명령어는 이미 설치된 패키지 전체를 자동적으로 업데이트 합니다. 설치된 패키지가 많으면 몇분 정도의 시간이 걸릴 수도 있습니다.

</br>

### 패키지 제거

`BenchmarkTools` 패키지를 제거할때는 `Pkg.rm("BenchmarkTools")` 명렬어를 수행하면 됩니다. 만약 제거하고자 하는 패키지에 의존하는 다른 패키지가 존재한다면 제거 할 수 없습니다. 억지로 제거할 수는 있지만 추천하지 않습니다. 다른 패키지를 먼저 제거하고 제거하십시요.

</br>

### 패키지의 사용

앞의 모듈의 사용과 마찬가지로 `using` 혹은 `import` 명령문을 사용합니다. 

</br>

---
title: "설치와 환경 구성"

number-sections: true
number-depth: 2
crossref:
  chapters: false
---

## Julia 설치

[다운로드 페이지](https://julialang.org/downloads/) 에서 다운받을 수도 있고, 맥 OSX 의 경우에는 homebrew, Ubuntu Linux 의 경우에는 apt 같은 운영체제별 패키지 관리자를 이용하여 설치할 수도 있습니다만 Julia 는 공식적으로는 다운로드 페이지에서 다운로드 받아서 설치하거나 `juliaup` 이라는 패키지를 이용할 것을 권합니다. 설치가 완료된 후 터미널에서 julia 명령을 수행하면 다음과 같은 화면을 볼 수 있을 것입니다.

![Julia REPL screenshot](julia_repl_screenshot.png){#fig-julia_repl width=600}


위의 화면이 보인다면 julia 가 정상적으로 설치 된 것입니다. Julia 언어를 사용하는 방법은 크게 두가지가 있습니다. 하나는 REPL 이라고 불리는 상호작용을 통해 코드의 전체 혹은 일부를 수행하고 결과를 보는 방법이고 다른 하나는 전체 julia 코드를 한번에 수행하는 방법입니다.

### Julia REPL

위의 스크린샷과 같이 `julia>` 옆에 무언가를 치면 그대로 입력됩니다. 예를 들어 3+3 을 계산하고 싶으면 `3+3` 을 치고 엔터키를 누르면 그 결과가 출력됩니다.

```none
julia> 3+3
6
```

이렇게 입력을 기다리다가 입력이 되면 읽어서(Read), 그 값을 평가하고(Evaluation), 그 결과를 출력하는(Printing) 것을 계속 반복하게(Loop) 하게 됩니다. 이것을 영어 단어의 첫글자만 따서 REPL 이라고 합니다. Julia 언어의 기본적인 상호작용은 터미널에서 REPL 을 수행하는 것입니다. 별도의 다른 프로그램이 필요하지 않고, 간단한 계산을 할 때 가장 빠르다는 장점이 있지만 긴 코드를 짤 때 불편하며, 그래프를 출력하는데 많은 제한이 있습니다. 그래서 보통은 다른 환경에서 julia 를 수행합니다. 대표적으로 [Jupyter notebook/lab](https://jupyter.org)이나 [Visual Studio Code](https://code.visualstudio.com) 가 있습니다. 

</br>

### Julia REPL 프롬프트 변경

기본적으로 julia REPL 의 프롬프트는 `julia>` 이지만 개인적으로

```none
In [1]: 5 + 3
Out[1]: 8
```

와 같은 방식을 선호하기 때문에 위와 같은 방식을 사용합니다. Julia 공식 메뉴얼의 [Numbered Prompt](https://docs.julialang.org/en/v1/stdlib/REPL/#Numbered-prompt) 대로 고치면 이렇게 사용 할 수 있습니다.

</br>

## 개발환경 설정에 관해

Julia 의 개발 환경은 많은 선택지가 있습니다. Python 에서 많이 사용하는 jupyter notebook 을 사용할 수도 있으며, emacs, vim, atom, vscode 와 같은 다양한 편집기를 사용할 수도 있습니다. 개인적으로 Microsoft 사에서 제공하는 텍스트 편집기 겸 통합개발환경인 [Visual Studio code (vscode)](https://code.visualstudio.com) 를 사용하는 개발환경을 추천합니다. [vscode 에서의 julia 지원](https://code.visualstudio.com/docs/languages/julia) 페이지 대로 따라 하면 julia 개발 환경을 구성 할 수 있습니다.


저는 짧은 코드를 계속 입력하면서 결과를 확인하는 작업을 많이 할때는 vscode 의 jupyter 환경을 주로 사용하며, 긴 코드를 사용할 때는 vscode 와 Julia 언어 지원을 사용합니다. Jupyter 에 익숙하지 않다면 단순히 julia 지원만을 사용하는 것도 좋은 방법입니다. 여기에서도 줄단위, 블럭단위, 파일단위로 실행시켜 볼 수 있습니다. 그 이외에도 저는 사용해 본 적이 없지만 [Pluto.jl](https://plutojl.org) 도 있습니다. 검색창에서 `julia 개발 환경` 을 검색하면 많은 내용이 나옵니다. 그 중에 여러분의 입맞에 맡는 것을 선택하면 됩니다. 여기에서는 짧은 코드는 Julia REPL 을 바탕으로 설명하겠지만 다른 개발 환경에서도 거의 그대로 결과가 나올 것입니다. 

</br>

## 기본 제공 문서

영어로 되어 있는 Julia 에 포함된 기본 도움말은 매우 훌륭합니다$^\ast$.[$^\ast$ 이 도움말은 별도로 제공되는 것이 아니라 소스코드에 주석으로 포함되어 있습니다.]{.aside} Julia REPL 에서는 `julia> ` 프롬프트에 `?` 를 치면 `help> `로 변경되는 것을 볼 수 있을 것입니다. 여기에 함수 이름이라든가, 타입 이름 같은 것을 치면 그에 대한 도움말을 제공합니다. Jupyter 에서는 입력 셀에 `?sin` 과 같이 `?` 를 맨 앞에 두고 입력한후 실행하면 문서를 찾아 제공합니다. vscode 에서는 자동적으로 팝업 윈도우로 제공합니다만 2023년 12월 현재로서는 완전하지 않습니다. 이렇게 제공되는 문서는 당신이 사용하는 Julia 와 페키지에 대한 공식 문서이므로, 가장 믿을만하고 우선적으로 참고해야하는 문서가 되겠습니다.

Julia 언어에 기본적으로 포함되어있는 함수, 모듈들 이외에 많은 모듈을 설치하게 될텐데 그 모듈들도 대부분 똑같은 형식의 도움말을 제공합니다. 

</br>

## 유니코드 및 수학 기호 지원 {#sec-unicode_support}

Julia 에서는 REPL 에서도 수학 기호를 포함한 다양한 문자를 입력하고 사용 할 수 있습니다. `\` 로 시작되는 구문을 입력한 후에 공백 없이 탭 키를 누르면 자동적으로 기호로 변환된됩니다. 예를 들어 Julia REPL(Julia 에서 지원하는 interactive command line 환경), jupyter notebook, vscode 에서 `\alpha` 를 치고 곧바로 탭(tab) 키를 누르면 `α` 로 변환됩니다. 정확히 말하면 `\alp` 정도 까지만 입력한 후 탭키를 눌러도 자동완성 기능으로 인해 `\alpha` 가 다 입력된 후 `α` 로 변환된 것입니다. 이렇게 입력된 α 는 일반 알파벳과 같이 변수명으로도 사용 될 수 있습니다. 이 때 입력되는 구문은 LaTeX 와 같거나 유사한 경우가 많습니다. 주의할 것은 `π`(`\pi`+[tab]) 와 `ℯ`(`\euler` + [tab]) 는 특정 값이 지정되어 있는 대표적인 수학 기호입니다. `pi` 역시 원주율 입니다.


```sh
julia> π
π = 3.1415926535897...

julia> ℯ
ℯ = 2.7182818284590...

julia> pi
π = 3.1415926535897...
```

Julia 에서 사용할 수 있는 유니코드 기호와 `\`로 시작하여 탭 키를 눌러 완성되는 문자들은 julia 공식 문서의 [Unicode Input](https://docs.julialang.org/en/v1/manual/unicode-input/) 을 참고하시기 바랍니다.


</br>


## 완벽한 초보를 위한 설치 가이드

만약 당신이 완벽한 초보자라면 아래의 방법을 따라 해 보시기 바랍니다. 

### Julia 설치

[Julia 다운로드 페이지](https://julialang.org/downloads/) 에서 다운로드 받고 설치합니다. 윂페이지를 아래로 내리다 보면 크게 **Official Binaries for Manual Download** 라고 써 있고 거기에 최신 버젼(Current stable release) 을 다운로드 받을 수 있도록 해 놨습니다. 윈도우즈 계열의 OS 라면 시작 버튼을 눌렀을 때 나오는 프로그램 목록에서 Julia 를 실행 시킬 수 있으며 이 때 Julia REPL @fig-julia_repl 과 같이 실행됩니다. 


</br>

### Visual Studio Code 설치

Visual Studio Code (이하 vscode) 는 현재 전 세계에서 가장 많이 사용하는 텍스트 편집기로 Microsoft 사에서 제작하여 무료로 배포합니다. 

[VS code 홈페이지](https://code.visualstudio.com) 로 가면 운영체제에 따른 다운로드 버튼이 있습니다. 다운로드 후 실행하면 VS 코드가 설치됩니다. 이후 vscode 를 실행시키면 다음과 같은 화면이 뜨게 됩니다. 

</br>

![VS code 처음 시작 화면](vscode_startup.png){#fig-vscode_startup}

</br>

#### VS code 한글 설정

시작화면의 맨 오른쪽의 바로가기 아이콘들중에 윗부분은 아래와 같은 기능을 합니다. 

![VS code 바로가기](vscode_shortcut.png){#fig-vscode_shortcut width=150}


여기서 확장은 vs code 위에서 vs code 의 기능을 추가해주는 작은 프로그램과 자료들이라고 보면 됩니다. 우선 vscode 의 메뉴와 명령을 한글화해주는 한글팩을 설치합시다. 영어가 익숙하거나 편한 분들은 그대로 사용해도 됩니다. 확장 아이콘을 누르면 많이 사용하는 확장 프로그램의 긴 목록 위에 텍스트를 입력 할 수 있는 칸이 나옵니다. 여기에 `korea` 혹은 `한국` 을 입력하면 지구본 모양의 아이콘과 함께 Korean Language pack 이 리스트의 맨 위로 올 것이고 그 옆에 파란 바탕의 하얀 글씨로 Install 이라고 보일 것입니다. 여기서 Install 버튼을 누르면 설치가 시작됩니다. 설치가 종료되면 vscode 오른쪽 아래에 `Change Language and Restart` 버튼이 보일 것입니다. 이것을 누르면 VS code 가 종료 후 다시 실행되면서 메뉴와 설명의 많은 부분이 한글로 바뀝니다.

</br>

#### Julia 확장 설치

한글 설정 때와 같이 vscode 바로가기 에서 확장 아이콘을 누르고 julia 를 검색합니다. 맨 위에 `Julia` 라는 이름과 로고를 가진 확장 프로그램이 보일 것입니다. 한글 팩을 설치했다면 Install 이 아닌 설치 버튼이 보일 것입니다. 이것을 설치해 줍니다. 이것을 설치하면 바로가기 아이콘에 Julia 아이콘이 추가됩니다. 



</br>

#### 최초의 Julia 파일 작성

바로가기의 탐색기 버튼을 누릅니다. 그러면 바로가개 버튼의 바로 오른쪽에 새로운 칸이 열리면서 **폴더 열기** 버튼이 보일 것입니다. 폴더 열기 버튼을 누르면 운영 체제에 따라 새로운 폴더를 만드는 창이 생깁니다. 여기에 코드를 작성할 폴더를 만들어 줍니다. 저의 경우는 홈 디렉토리 밑에 `developement` 폴더를 만들고 그 폴더 아래에 `test001` 폴더를 만들 것입니다. 이미 존재하는 폴더를 선택하면 그 폴더의 파일들이 보일 것입니다. 왠만하면 폴더와 파일 이름은 한글이나 다른 언어를 사용하지 않고 영어 알파벳, 숫자, `_` 문자만 사용하시길 추천합니다. 

폴더를 선택하면 운영체제나 계정에 따라 이 폴더의 작성자를 신뢰하느냐는 메시지가 뜰 것입니다. 자신의 계정의 폴더라면 신뢰한다는 버튼을 누르십시요. 타인의 폴더라면 계정의 주인과 상의하시기 바랍니다.

탐색기 창에 지정한 폴더의 이름과 이 폴더에 포함된 파일들의 이름이 보일 것입니다. 그리고 폴더 이름 옆에 네개의 아이콘이 보입니다. 각각의 아이콘 위에 커서를 가져다만 대고 누르지 않으면 *새 파일...*, *새 폴더...*, *탐색기 새로고침*, *탐색기에서 폴더 축소* 라는 설명을 볼 수 있습니다. 설명대로 각각 새로운 파일을 만들거나, 지정한 폴더 아래에 새로운 폴더를 만들거나, 탐색기의 파일 목록을 다시 읽습니다. *탐색기에서 폴더 축소는* 현재 폴더 아래에 파일과 폴더가 많은 경우 특히 하위폴더의 파일 이름이 보일 경우 이것을 접어서 더 간략하게 보도록 해 줍니다.

이제 *새 파일* 버튼을 누르면 폴더창 아래에 입력칸이 생길 것입니다. 여기에 파일 이름을 입력합니다. 앞서 말했듯이 영어 알파벳과 숫자만을 사용하여 `test01.jl` 이라고 입력합니다.

여기에 다음과 같이 입력합니다.

```julia
2+3

exp(1)

cos(0)
```


첫번째 줄의 `2+3` 줄에 커서를 옮기고 Control+Enter (혹은 Ctrl+Enter) 를 누릅니다. 그렇게 되면 커서가 위치한 줄, 혹은 블럭을 실행하여 그 결과를 julia REPL 로 출력합니다. 아마 vscode 의 하단에 터미널이 열리면서 

```txt
Out[1]: 5
```

과 같이 보일 것입니다. vscode 는 자체에 터미널이 내장되어 있어 다른 터미널을 사용하지 않고 여기서 많은 일을 할 수 있습니다.

Windows/Linux 에서 Alt+Enter, Mac 에서 Option+Enter 키를 누르면 파일의 코드 전체를 REPL 에서 실행합니다.


</br>

#### Notebook

같은 폴더에 `test01.ipynb` 라는 이름을 가진 파일을 새로 만들어 줍니다. 그렇다면 아래와 같은 모양이 될 것입니다.

![vscode notebook 시작화면](vscode_notebook_0.png){#fig-vscode_notebook}

</br>

오른쪽 상단에 커널 선택이 아니라 Julia 1.10.3 과 같은 방금전 설치한 julia 버젼이 나타난다면 그냥 두고 아니라면 커널 선택을 눌러 선택해 줍니다. 그리고 1이라고 써 있는 칸(이것을 **입력셀** 이라고 합니다)의 오른쪽 하단이 보기처럼 Python 이나 julia 가 아닌 다른 것이라면 그 부분을 눌러 julia 를 선택해 줍니다. 아래와 같이 julia 버젼과 입력셀에 julia 가 보이면 성공입니다.

![vscode notebook julia](vscode_notebook_1.png){#fig-vscode_notebook_julia}

</br>

입력셀에 아래의 코드를 복사&붙여넣기를 해 봅니다.


```julia
tsum = 0
for i in 1:10
    tsum+=i
end
println(tsum)
```

그리고 Shift+Enter 를 누릅니다. 다음과 같이 입력창 아래에 55 라는 결과가 나오면 성공입니다.

![vscode notebook 입력창 실행](vscode_notebook_2.png){#fig-vscode_notebook_julia_cell}

Shift+Enter 는 입력창을 실행시키고, 가장 마지막 명령어의 실행 결과를 출력하며, 다음 입력창으로 갑니다. 다음 입력창이 존재하지 않으면 새로운 입력창을 만듭니다. 

</br>


Visual Studio Code 의 노트북은 Jupyter notebook 혹은 그 개선 버젼인 Jupyter-lab 과 유사한 실행 환경입니다. 정확히는 이미 존재하던 jupyter 




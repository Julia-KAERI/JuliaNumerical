---
title: "복합 타입"

number-sections: true
number-depth: 2
crossref:
  chapters: false
---

## 복합 타입

### 단순한 복합 타입과 필드

복합 타입(composite type) 은 필드(field)라고 불리는 하위 변수를 갖는 타입이며, 필드는 정수나 실수 타입 뿐만 아니라 함수 타입이나 다른 복합 타입이 될 수 있습니다. 아주 간단한 복합 타입으로 2차원 평면 상의 점에 대한 복합타입을 다음과 같이 정의 할 수 있습니다.

```julia
struct Point
    x
    y
end
```

복합타입의 정의는 `struct` 로부터 시작하여 `end` 로 끝납니다. 위에서 `Point` 는 구체적 타입의 이름이 되며, `x`, `y` 라는 두개의 필드를 가질 수 있습니다.

```txt
In [2]: isconcretetype(Point)
Out[2]: true
```

`Point` 타입의 변수는 `p1 = Point(1, 2)` 와 같이 생성할 수 있으며 각 필드는 `p1.x`, `p1.y` 와 같이 접근합니다. 

```txt
In [3]: p1 = Point(1, 2)
Out[3]: Point(1, 2)

In [4]: println("Point p1.x=$(p1.x), p1.y=$(p1.y)")
Point p1.x=1, p1.y=2

In [5]: typeof(p1) # `Point` is a name of type
Out[5]: Point
```

복합 타입 인스턴스는 특별히 따로 정하지 않았다면 타입이름을 함수처럼 사용하여 생성합니다. 인자는 타입 정의에서 나열된 필드순으로 입력하면 됩니다. 즉 `p1=Point(1, 2)` 는 `x` 필드는 `1`, `y` 필드는 `2` 의 값을 갖는 `Point` 객체 인스턴스를 생성하라는 뜻입니다. 이렇게 타입 인스턴스를 만드는 함수를 **생성자(constructor)** 라고 합니다. 생성자는 별도로 정의할수도 있지만 위에서처럼 타입 이름을 함수로 사용하여 인자로 필드 값을 나열하는 생성자를 **기본 생성자(default constructor)** 라고 합니다.



</br>

### 매개변수를 갖는 복합타입 : 기본

복합타입을 정의 할 때 아래와 같이 타입 매개 변수를 사용하여 정의 할 수 있습니다. 

```julia
struct OneValue{T}
    val::T
end
```

```txt
In [8]: x=OneValue(3)
Out[8]: OneValue{Int64}(3)

In [9]: y=OneValue{Float64}(4)
Out[9]: OneValue{Float64}(4.0)

In [10]: typeof(x) == typeof(y)
Out[10]: false

In [11]: typeof(x) == typeof(OneValue{Int64}(5))
Out[11]: true
```

`struct OneValue{T}` 에서 `OneValue` 는 타입 이름이며 `{T}` 에서 `{T}` 가 타입에 대한 매개변수입니다. 타입에 대한 매개변수는 타입 이름일 수도 있으며 정수, 실수, `Symbol` 이나 `Bool` 과 같은 bit 타입의 값이 올 수 있습니다. 일단 매개변수로 받으면 필드의 정의나 생성자의 정의에서 사용 할 수 있습니다. 이 때 `x` 와 `y` 의 타입 즉 `OneValue{Int64}` 와 `OneValue{Float64}` 는 다른 타입입니다.

`In [8]` 을 봅시다. 매개변수 `T` 는 필드 `val` 의 타입으로 정의되었습니다. `x=OneValue(3)` 처럼 매개변수를 사용하지 않고 인스턴스를 만들면 `val` 의 타입이 자연스럽게 `T` 가 됩니다. `In [9]` 의 경우처럼 `y=OneValue{Float64}(4)` 와 같이 매개변수를 명시적으로 지정했을 경우에는 필드 `val` 의 타입이 `T==Float64` 로 강제로 변환됩니다. 

이렇게 타입 매개변수로 타입을 만들면 그 매개변수를 이후에도 사용 할 수 있습니다. 아래의 `isIntType(o::OneValue{T})` 함수는 `OneValue{T}` 의 `T` 가 `Integer` 의 하위타입인지를 확인하는 함수입니다. 물론 `o.val` 의 타입을 확인할 수도 있지만 아래의 것이 훨씬 깔끔합니다.

```julia
function isIntType(o::OneValue{T}) where T
    if T<:Integer
        return true
    else
        return false
    end
end
```

```txt
Out[13]: isIntType (generic function with 1 method)

In [14]: isIntType(x)
Out[14]: true

In [15]: isIntType(y)
Out[15]: false
```


</br>

### 매개변수를 갖는 복합타입 : 매개변수의 타입 제한


이제 우선 우리에게 아마도 익숙할 복소수 타입을 봅시다. Julia 는 복소수를 다루기 위한 `Complex{T}` 타입을 내장하고 있습니다. `Complex{T}` 는 필드로 실수부와 허수부를 가지며 다음과 같이 정의됩니다.

```{.julia}
struct Complex{T<:Real} <: Number
    re::T
    im::T
end

Complex(x::Real, y::Real) = Complex(promote(x,y)...)
Complex(x::Real) = Complex(x, zero(x))
```

- `<:Number` 를 통해 `Complex` 객체는 `Number` 의 하위타입으로 정의됩니다. 

- `Complex{T<:Real}` 은 매개변수 `T` 를 통해 `re` 와 `im` 필드의 타입을 제한합니다. `T<:Real` 이며 `re::T`, `im::T` 이므로 두 필드 는 `Real` 의 동일한 하위타입이어야 합니다. 두 개 이상의 타입이 필요할 경우는 `{T1<:Real, T2<:Integer}` 와 같이 `{ }` 안에 `,` 로 분리하여 나열하면 됩니다. 

- 생성자가 타입 정의 외부에 존재합니다. 이를 외부생성자라고 합니다. 

- 첫번째 생성자는 `x` 와 `y` 가 `Real` 타입의 하위 타입일 때 타입을 일치시키기 위한 생성자입니다. `promote(x, y)` 는 `x` 와 `y` 변수의 타입을 두 변수를 공통적으로 표현할 수 있는 타입으로 변환시켜 튜플로 반환합니다. 이렇게 다른 타입의 둘 이상의 값을 같은 타입이 되도록 변환하는 것을 julia 에서는 **promotion** 이라고 합니다. `promote(2, 3.0) == (2.0, 3.0)` 입니다. 그런데 `Complex(promote(2, 3.0))` 은 `Complex(2.0, 3.0)` 이 아니라 `Complex((2.0, 3.0))` 으로 튜플 인자 하나만 주어지며, 따라서 에러가 발생합니다. `Complex(promote(2, 3.0)...)` 는 `promote(2, 3.0)` 의 결과로 주어지는 튜플을 풀어서 함수의 인자로 넣도록 합니다. 즉, `Complex(promote(2, 3.0)...)` 은 결과적으로 `Complex(2.0, 3.0)` 입니다. [함수를 실행시킬때 인자에서의 사용법](04I_splat_operator.qmd#sec-splat_operator_in_function_argument) 을 참고하시기 바랍니다.

- 두번째 생성자는 인자가 하나만 주어졌을 때 `im` 필드를 인자 `re` 필드와 같은 타입의 `0` 으로 간주하여 생성하도록 하는 생성자입니다.


`Complex{T<:Real}` 은 다음과 같이 사용 할 수 있습니다.

```html
In [1]: com1 = Complex{Float32}(3.3, 2.3) #Float32 타입의 필드를 갖는 복소수
Out[1]: 3.3f0 + 2.3f0im

In [2]: com2 = Complex(3.3, 2.3) # 3.3, 2.3 이 Float64 이므로 타입의 필드를 갖는 복소수
Out[2]: 3.3 + 2.3im

In [3]: com3 = 3.3 + 2.3im # 복소수를 선언하는 두번째 방법
Out[3]: 3.3 + 2.3im

In [4]: com2 == com3 # 둘은 같다
Out[4]: true
true
```

</br>

복합타입 변수의 필드에 접근하기 위해서는 `.` 를 사용합니다. 

```html
In [6]: c1 = Complex{Float64}(2.0, 3.0)
Out[6]: 2.0 + 3.0im

In [7]: c1.re
Out[7]: 2.0

In [8]: c1.im
Out[8]: 3.0

In [9]: c1.im = 4.0
ERROR: setfield!: immutable struct of type Complex cannot be changed
```

</br>

복합타입의 경우는 기본적으로 immutable 입니다. 즉 필드의 값을 직접적으로 바꿀 수 없으며 `In [9]` 에서와 같이 직접적으로 변경하고자 하면 에러가 발생합니다. 복합타입의 필드의 값을 바꿀 수 있는 복합타입은 mutable 이라고 하며 뒤에 [변경할 수 있는 복합 타입](#sec-mutable_composite_types) 에서 다루겠습니다.



</br>

### 내부생성자와 외부생성자

복합 타입 선언 내부에서 정의된 생성자를 **내부생성자 (inner constructor)** 라고 하며 반대로 앞서의 `Complex{T<:Real}` 처럼 생성자가 복합 타입 선언 밖에서 정의된 생성자를 **외부 생성자 (outer constructor)** 라고 합니다. 내부생성자에는 `new` 함수를 사용 할 수 있는데 `new` 함수는 생성자를 찾지 않고 즉각적으로 멤버에 접근하여 복합 타입을 만들게 해 줍니다. `new` 함수는 외부생성자에서는 사용 할 수 없습니다.

코드 유지보수의 관점에서는 아무래도 외부생성자가 편리합니다. 그러나 내부생성자만이 할 수 있는 일은 기본생성자를 변경하는 것입니다. 다음의 예를 봅시다.

```julia
struct A
    m::Int64
    function A(x, y)
        return new(Int64(x+y))
    end
end

struct B
    m::Int64
end

function B(x, y)
    return B(Int64(x+y))
end
```

`A` 와 `B` 는 모두 `m` 이라는 필드 하나만 가지고 있습니다. 이 때 `B(3)` 은 기본생성자가 호출되어 `B.m==3` 인 객체가 만들어지지만 `A(3)` 은 기본생성자가 교체되었으므로 에러가 발생합니다.

</br>


## 다양한 복합 타입

### 변경할 수 있는 복합 타입 (mutable struct) {#sec-mutable_composite_types}

앞서 언급했듯이 복합타입은 기본적으로 immutable 입니다. 이 말은 한 번 생성된 복합타입의 필드의 값을 바꿀 수 없다는 뜻입니다. 필드의 값을 바꿀 수 있는 복합타입은 `struct` 앞에 `mutable` 키워드를 넣습니다.

```julia
mutable struct mycomplex2{T<:Real} <: Number
    re::T
    im::T
end

mycomplex2(x::Real, y::Real) = mycomplex2(promote(x, y)...)
mycomplex2(x::Real) = mycomplex2(x, zero(x))
```

위의 `mycomplext2` 타입을 생성하고 필드의 값을 바꿀 수 있습니다.

```txt
In [4]: c2 = mycomplex2(2.0, 3.0)
Out[4]: mycomplex2{Float64}(2.0, 3.0)

In [5]: c2.im
Out[5]: 3.0

In [6]: c2.im = -3
Out[6]: -3

In [7]: c2
Out[7]: mycomplex2{Float64}(2.0, -3.0)
```

</br>

### 싱글톤 타입

어떤 타입의 인스턴스가 단 하나만 존재할 수 있을 때 이를 **싱글톤(singleton)** 객체라고 합니다. 예를 들어 `Complex(3.0, 4.0)` 과 `Complex(1.0, 2.0)` 은 모두 `Complex{Float64}` 타입의 서로 다른 인스턴스입니다. 그러나 싱글톤 타입이라면 모든 타입 인스턴스가 같아야 합니다. Julia 에서 싱글톤 타입은 필드가 없는 복합타입입니다. 

```julia
struct mysingleton end
```

와 같이 정의합니다. 이 때 모든 `mysingleton` 타입의 인스턴스는 동일합니다.


```txt
In [1]: struct mysingleton end;

In [2]: a, b = mysingleton(), mysingleton();

In [3]: a===b
Out[3]: true
```

타입 매개변수를 가지는 싱글턴 타입도 존재합니다. 

```julia
struct mysingleton1{T} end
```

와 같이 정의합니다. 이 때 `T` 가 다르면 다른 인스턴스이며, `T` 가 같으면 같은 인스턴스입니다.

```txt
In [5]: struct mysingleton1{T} end

In [6]: c, d = mysingleton1{Int64}, mysingleton1{Int64}
Out[6]: (mysingleton1{Int64}, mysingleton1{Int64})

In [7]: c === d
Out[7]: true

In [8]: c, d = mysingleton1{Int64}, mysingleton1{Float64}
Out[8]: (mysingleton1{Int64}, mysingleton1{Float64})

In [9]: c === d
Out[9]: false

In [10]: c == d
Out[10]: false
```

</br>

당연히 어떤 추상 타입의 하위 타입으로서의 싱글턴 타입도 정할 수 있습니다.

```julia
abstract type AbsSingletonType end

struct abstype1 <: AbsSingletonType end
```

</br>

Julia 에서 싱글턴 타입은 아주 많이 사용됩니다. 우선 아주 많이 사용하는 `nothing` 은 `Nothing` 타입의 싱글턴 객체입니다. 또한 julia 에서의 함수는 추상타입 `Function` 의 하위타입인 싱글턴 객체입니다.

```txt
In [15]: typeof(sin)
Out[15]: typeof(sin) (singleton type of function sin, subtype of Function)
```

당신이 당신의 코드 내에서 어떤 유일한 것을 원한다면 그것을 싱글턴 객체로 만들 수 있습니다. 또 하나 중요한것은 싱글턴 객체는 저장공간을 차지하지 않습니다.


</br>

### 매개변수를 갖는 추상 타입

우리는 [추상적 타입](08_type_hierarchy.qmd#sec-abstract_type_and_concrete_type) 에 대해 이미 알아보았습니다. 매개변수를 갖는 추상적 타입도 존재합니다. 다음과 같이 선언합니다.

```julia
abstract type PAType{T} end     # parametric abstract type

struct PCType{T} <: PAType{T}   # parametric concrete type
    field::T
end
```

이렇게 되면 `PCT{T}` 는 같은 `T` 에 대해서만 `PAType{T}` 의 하위 타입 이 됩니다. 

```txt
In [3]: PCType{Float32} <: PAType{Float32}
Out[3]: true

In [4]: PCType{Float32} <: PAType{Int64}
Out[4]: false
```

</br>

이제 다음과 같은 타입 구조를 봅시다.


```julia
abstract type AA end

abstract type AB{T<:Real} <: AA end

struct AC{T} <: AB{T}
    f::T
end
```

`AC{T}` 의 상위 타입이 `AB{T<:Real}` 이므로 `T` 는 `Real` 의 하위 타입이어야만 합니다. 따라서 `AC{String}` 로 타입을 정할 수 없습니다. 또한 메서드를 정의할 때 `AA` 타입으로 인자를 정하면 모든 `AC{T}` 타입에 대해 사용 할 수 있습니다.

```txt
In [5]: qad(x::AA) = x.f+3
Out[5]: qad (generic function with 1 method)

In [6]: qad(AC{Float32}(4))
Out[6]: 7.0f0
```


</br>

## 연습 : 모듈러 산술

이제 지금까지 했던 것을 가지고 뭔가 좀 고차원적인 일을 해 봅시다. 정수를 다루는 수학의 분야를 정수론이라고 하며 여기서 모듈러 산술이라는 것을 다룹니다. 8 을 5로 나누면 나머지가 3이며 33 도 5로 나누면 나머지가 3입니다. 이것을 다음과 같이 표현합니다.

$$
8 \equiv 33 \, (\textrm{mod}\, 5)
$$

이것은 8 과 33 은 5로 나눈 나머지가 같다는 뜻입니다.두 정수 $a,\,b$ 와 자연수 $n$ 에 대해

$$
a \equiv b \, (\textrm{mod}\, n)
$$

은 $a$ 와 $b$ 는 $n$ 으로 나누었을 때의 나머지와 같다는 입니다. 재미있는 것은 이 관계를 이용하여 사칙연산을 할 수 있다는 것입니다. $a \equiv b \, (\textrm{mod}\, n)$, $c \equiv d\, (\textrm{mod}\, n)$ 일 때 다음이 성립합니다.

&emsp; ($1$) $(a+c) \equiv (b+d)\, (\textrm{mod}\, n)$.

&emsp; ($2$) $(a-c) \equiv (b-d)\, (\textrm{mod}\, n)$.

&emsp; ($3$) $ac \equiv bd\, (\textrm{mod}\, n)$.

&emsp; ($4$) $n$ 이 소수이면 $ax \equiv 1\, (\textrm{mod}\, n)$ 인 자연수 $x$ 가 존재한다.



$n$ 이 소수가 아니더라라도 $a$ 와 $n$ 의 최대공약수가 $1$ 이라면, 즉 $\gcd(a,\, n)=1$ 이면 $ax\equiv 1\, (\textrm{mod}\, n)$ 인 $x$ 가 존재하지만 모든 수에 대해 존재하는 것은 아닙니다. $n$ 이 소수일 경우에는 $n$ 보다 작은 모든 자연수 $a$ 에 대해 $\gcd (a,n)=1$ 이므로 ($4$) 가 성립합니다. 이 때 $x = a^{-1}$ 이라고 하고 나누기를 $b/a := ba^{-1}$ 로 정의 할 수 있습니다. 그렇다면 소수인 $n$ 에 대해 $a^{-1}$ 값은 어떻게 계산할까요? 그리고 주어진 $a$ 에 대해 $ax \equiv 1 \, (\text{mod}\, n)$ 인 $x$ 는 오직 하나일까요? 일단 뒤의 문제부터 답하자면 소수 $n$ 에 대해 $a^{n-1} \equiv 1\, (\text{mod}\, n)$ 이라는 것이 알려져 있습니다$^1$.[$^1$ 이를 페르마의 소정리(Fermat's little theorem) 이라고 합니다.]{.aside} 따라서 $a^{-1} \equiv a^{n-2}\, (\textrm{mod}\, n)$ 이다. 또한 $ax\equiv 1\, (\textrm{mod}\, n),\, ay\equiv 1\, (\textrm{mod}\, n)$ 이면 $n$ 이 소수일 때 $x \equiv y\, (\textrm{mod}\, n)$ 입니다. 

이렇게 어떤 자연수($n$) 에 대한 나머지로 사칙연산을 수행하는 것을 모듈러 산술(modular arithematic) 이라고 합니다. $n$ 이 소수가 아니라면 덧셈 뺄셈, 곱셈만 정의되며 나눗셈은 정의 할 수 없지만 $n$ 이 소수라면 모두 정의 할 수 있습니다. 

이제 이 모듈러 산술에 대한 자료형과 함수를 만들어 봅시다. $n$ 이 소수인 경우와 소수가 아닌 경우를 구분해야 하기 때문에 소수를 판별하는 함수를 작성해야 합니다. $n$ 이 매우 큰 수가 아니라면 가장 간단하게 사용할 수 있는 알고리즘은 $2$ 부터 $\sqrt{n}$ 보다 크지 않은 모든 정수에 대해 $n$ 과의 최대공약수가 1 인지를 확인하는 것입니다. 

```julia
const max_modular = 1_000_000_000

function isprime(v::Integer)
    @assert 1<v<max_modular 
    result = true
    for x in 2:floor(Int64, √v)
        if v % x == 0
            result = false
            break
        end
    end
    return result
end
```

`max_modular` 는 $n$ 값이 될 수 있는 최대값으로 정합니다. 너무 큰 수에 대해 계산하는 것을 방지하기 위한 것 말고는 큰 의미가 없습니다. 

우선 최상위의 추상 타입 (코드에서는 `AbstractMod{T, N}`) 과 $n$ 이 소수일 때, 그리고 소수가 아닐 때를 구별하여 타입을 만듭니다. 각각 `PrimeMod` 와 `Mod` 입니다. 값은 여러 정수의 타입을 가질수 있어야 하기 때문에 타입 매개변수 `T` 를 사용합니다. 더불어 $n$ 값도 복합타입의 매개변수 `N` 으로 넣습니다. 

```{.julia code-line-numbers="true"}
abstract type AbstractMod{T, N} end 

const max_modular = 1_000_000_000

function isprime(v::Integer)
    @assert 1<v<max_modular 
    result = true
    for x in 2:floor(Int64, √v)
        if v % x == 0
            result = false
            break
        end
    end
    return result
end

struct PrimeMod{T, N} <: AbstractMod{T, N}
    value::T
    
    function PrimeMod{T, N}(x::Integer) where {T<:Integer, N}
        @assert N > 1 "Modulos must be larger than 1"
        @assert isprime(N) "Must be a prime number"
        r = (x ≥ 0) ? x%N : (x%N)+N 
        return new{T, N}(r)
    end
end

struct Mod{T, N} <: AbstractMod{T, N}
    value::T

    function Mod{T, N}(x::Integer) where {T<:Integer, N}
        @assert N > 1 "Modulos must be larger than 1"
        x = T(x)
        r = (x ≥ 0) ? x%N : (x%N)+N 
        if isprime(N)
            return PrimeMod{T, N}(r)
        else 
            return new{T, N}(r)
        end
    end
end

Mod{N}(x::Integer) where {N} = Mod{Int64, N}(x)
PrimeMod{N}(x::Integer) where {N} = PrimeMod{Int64, N}(x)


function Base.show(io::IO, x::AbstractMod{T, N}) where {T, N} 
    println(io, "$(x.value)_$N")
end

Base.zero(a::AbstractMod{T, N}) where {T, N}  = Mod{T, N}(0)
Base.one(a::AbstractMod{T, N}) where {T, N}  = Mod{T, N}(1)
Base.:-(a::AbstractMod{T, N}) where {T, N}  = Mod{T, N}(-a.value)
Base.:isequal(a::AbstractMod{T, N}, b::AbstractMod{T, N}) where {T, N} = (a.value == b.value)

function Base.:+(a::AbstractMod{T, N}, b::AbstractMod{T, N}) where {T, N} 
    return Mod{T, N}(a.value+b.value)
end

function Base.:-(a::AbstractMod{T, N}, b::AbstractMod{T, N}) where {T, N}  
    return Mod{T, N}(a.value-b.value)
end

function Base.:*(a::AbstractMod{T, N}, b::AbstractMod{T, N}) where {T, N}  
    return Mod{T, N}(a.value*b.value)
end

function Base.:inv(a::PrimeMod{T, N}) where {T, N} 
    return Mod{T, N}(a.value^(N-2))
end

function Base.:^(a::AbstractMod{T, N}, n::Integer) where {T, N} 
     return Mod{T, N}(a.value^n)
end

function Base.:/(a::PrimeMod{T, N}, b::PrimeMod{T, N}) where {T, N} 
    if b == zero(b)
        throw(DivideError)
    end
    return a*inv(b)
end
```

`Mod` 와 `PrimeMod` 둘 다 에게 적용되는 메서드는 `AbstractMod` 타입을 인자로 받으며 `PrimeMod` 에만 적용되는 나머지나 곱셈의 역원(`Base.:inv`) 함수의 경우 인자를 `PrimeMod` 타입을 받도록 합니다. 



이것은 `NAJ.jl` 에 포함되어 있으며 다음과 같이 사용합니다. 

```txt
In [2]: using NAJ

In [3]: a=Mod{13}(5)
Out[3]: 5_13


In [4]: b=-a
Out[4]: 8_13

In [5]: a+b
Out[5]: 0_13

In [6]: a*b
Out[6]: 1_13


In [7]: a^5
Out[7]: 5_13

In [8]: a^-2
Out[8]: 12_13
```

















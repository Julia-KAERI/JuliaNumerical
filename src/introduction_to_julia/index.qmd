# Introduction to Julia

Julia 는 이제 나온지 10년이 조금 넘어가는 신생 언어입니다. 2024년 2월 현재 최신 버젼이 1.10 입니다. 많이 비교되는 파이썬은 30년이 조금 넘었으며 현재 최신 버젼이 3.10 입니다. 제가 파이썬을 처음 접한게 25년쯤 전이었는데 25년동안의 파이썬의 위상은 엄청나게 바뀌었습니다. 25년전의 파이썬은 배우기 쉽고 써먹기 좋은 언어로만 인식되었습니다. 그때는 numpy 도 없었으며(혹시나 해서 numpy 공식 사이트에서 확인해보니 2005년에 등장했군요), 과학/공학 분야에서도 코딩이 빠른 언어였지 진지한 계산에 사용할 만한 언어라는 인식은 별로 없었습니다. 파이썬으로 한시간 코딩해서 한시간동안 돌려서 결과를 볼것이냐, C/C++ 로 하루 코딩해서 1분만에 결과를 볼것이냐 하는 문제였죠. 현재는 다양한 파이썬 생태계로 인해 과학/공학 분야에서 널리 쓰이고 있으며 특히 인공지능 분야에서는 그 위치가 엄청나죠.

Julia 에 대해 설명할 때 파이썬 만큼 쉽고 C 만큼 빠르다 라고 합니다. 어떤 면에서는 맞는 말입니다. 그런데 20년전의 파이썬과 비교해 봤을때 파이썬도 많이 어려워졌거든요. 파이썬도 잘 쓰려면 배워야 할 것이 많습니다. 그런 의미에서 Julia 가 파이썬 만큼 쉬우냐 하는 질문에는 제 경험상 큰 차이는 나지 않는다고 말하겠습니다. 또 C/C++/Fortran 으로 작성하여 컴파일한것을 파이썬에서 읽어서 실행시키는 부분은 C/C++/Fortran 직접 실행시켰을 때와 거의 차이가 나지 않습니다. 즉 어떤 부분에서는 (비록 내부적으로는 최적화된 C/C++/Fortran 으로 작성된 실행 코드를 돌릴지라도) 파이썬의 속도가 느리지 않습니다. 그리고 30년 동안 이루어진 파이썬의 생태계도 엄청나게 거대하죠. Julia 언어는 numpy 와 비교해서도 많은 부분에서 상당히 빠릅니다. 특히 이미 존재하는 함수를 그냥 가져다 쓰는 것이 아닌 경우, julia 로 `for` 루프를 돌리는 것이 아주 빠른 경우가 많습니다. 파이썬으로 대규모의 루프를 돌리는 것은 별로 권장할 만하지 않죠. 그렇다고 julia 가 C/C++/Fortran 만큼 빠르냐고 하면 꼭 그렇지는 않습니다. 하지만 연산 속도를 증가시키는 여러 테크닉(주로 매크로)을 사용할 때 비슷한 속도가 나오는 경우도 많습니다.

저에게 있어 julia 언어의 장점중의 하나는 멀티스레딩입니다. 파이썬은 (적어도 공식적인 CPython 의 경우) 멀티쓰레딩이 가능하지만 수치해석적인 면에서 의미가 없습니다. Julia 는 멀티쓰레딩을 아주 편하게 사용 할 수 있으며, 강력합니다.

반면 Julia 언어의 최대의 단점은 아직은 부족한 생태계입니다. 파이썬이나 매트랩에서 이미 구현되어 널리 사용되고 있는 어떤 기능이 Julia 에 없어서 당신이 필요한 계산을 하기 위해 바닥부터 코드를 작성해야 할 수 도 있습니다. 하지만 특히 과학/공학 분야에서 점점 사용자가 많아지고 있기 때문에 이 단점은 점점 감소될 것이라고 예상합니다. 또 연산이 매우 빠른 스크립트 언어라는 장점은 과학/공학 분야 뿐만 아니라 다른 분야에서도 아주 유용하기 때문에 Julia 의 사용이 점점 확산 될 것이라고 생각합니다.
# Interude : 함수의 합성과 전달 {.unnumbered}

## 합성연산자 `∘`


함수의 합성은 `∘` 연산자를 이용하며 `\circ` + [탭키] 로 입력합니다. 예를 들어

```html
In [1]: (sqrt ∘ +)(9, 16)
Out[1]: 5.0
```

를 봅시다. 두개의 인자 9 와 16 을 더한 후 제곱근을 반환하며, 이것은 보통의 수학적인 합성함수의 정의와 일치합니다. 한 함수의 반환값을 다른 함수의 입력값으로 사용 할 때 함수의 합성을 사용하며, 함수의 합성은 다수의 함수에 대해서도 가능합니다.

```html
In [2]: (sin ∘ sqrt ∘ -)(π, π/4)
Out[2]: 0.9993590241845508
```

</br>

합성연산자는 컨테이너에 대한 도트 연산을 수행할 수 없습니다. 합성연산자와 비슷한 기능을 하며 도트 연산도 수행할 수 있는 것이 전달연산자 `|>` 입니다.

</br>

## 전달 연산자 `|>`


`|>` 는 기본적으로 합수의 합성과 같습니다. `In [1]` 과 `In [2]` 를 `|>` 을 사용한 표현으로 바꾸면 다음과 같습니다.

```html
In [3]: +(9, 16) |> sqrt
Out[3]: 5.0

In [4]: -(π, π/4) |> sqrt |> sin
Out[4]: 0.9993590241845508
```

`|>` 의 오른쪽의 연산 결과를 `|>` 왼쪽 함수에 대한 입력으로 사용합니다. `In [4]` 에서와 같이 `|>` 연산자를 이어서 사용 할 수도 있습니다. 

앞서 말한 것처럼 `.|>` 와 같은 도트 연산도 가능합니다.

```html
In [6]: 0:0.01:π .|> cos |> maximum
Out[6]: 1.0
```

익명 함수를 사용할 수도 있습니다.

```html
In [2]: -π:0.001:π .|> (x->x^2 * cos(x)) |> maximum
Out[2]: 0.5497738913075754
```

여기서 가운데의 `(x->x^2 * cos(x))` 에서 가장 바깥의 괄호를 표기하지 않으면 julia 는 연산자의 우선순위 상 `-π:0.001:π .|> x-> (x^2 * cos(x)) |> maximum)` 로 해석을 하기 때문에 다른 결과가 나옵니다.

</br>






# Interlude : `...` 연산자 {.unnumbered}

[... 연산자](04_containers.qmd#sec-splat)  에서 튜플이나 배열의 첫번째 몇개만 취할 때 `...` 연산자를 사용 할 수 있다는 것을 알아보았습니다. Julia 에서 `...` 연산자는 두가지 용법으로 사용됩니다. 

</br>

## 컨테이너에 대한 사용법 {#sec-splat_operator_for_containers}

튜플이나 `StepRange` 혹은 1차원 배열과 같이 순서가 있는 컨테이너에 대해서는 직관적으로 알 수 있습니다.

```txt
In [1]: a1, a2, a3... = (1, "a", (2, 3), 4, sin)
Out[1]: (1, "a", (2, 3), 4, sin)

In [2]: a1, a2
Out[2]: (1, "a")    

In [3]: b1, b2, b3... = 1:10
Out[3]: 1:10

In [4]: b1, b2
Out[4]: (1, 2)

In [5]: c1, c2, c3... = [1, 2, 3, 4, 5];

In [6]: c1, c2
Out[6]: (1, 2)
```

</br>

집합이나 사전과 같은 순서가 없는 컨테이너에 대해서는 에러를 발생시키지는 않지만 그 결과의 일관성을 보장할 수 없습니다.

```txt
In [14]: d1, d2, d3... = Set([1, 2, 3, 4]);

In [15]: d1, d2
Out[15]: (4, 2)

In [16]: d1, d2, d3... = Set([1, 2, 3, 4, 5]);

In [17]: d1, d2
Out[17]: (5, 4)

In [18]: a, b, c... = Dict("A"=>1, "B"=>2, "C"=>3, "D"=>4)
Out[18]: Dict{String, Int64} with 4 entries:
  "B" => 2
  "A" => 1
  "C" => 3
  "D" => 4

In [19]: a
Out[19]: "B" => 2

In [20]: b
Out[20]: "A" => 1

In [21]: c
Out[21]: Base.Iterators.Rest{Dict{String, Int64}, Int64}(Dict("B" => 2, "A" => 1, "C" => 3, "D" => 4), 4)

```

</br>

다차원 배열의 경우 [선형 인덱스](06_arrays.qmd#sec-cartesian_and_linear_index)에 따라 일차원 배열로 변환됩니다. 

```julia
In [18]: x1, x2, x3... = [1 2;3 4; 5 6];

In [19]: x1
Out[19]: 1

In [20]: x2
Out[20]: 3

In [21]: x3
Out[21]: 4-element Vector{Int64}:
 5
 2
 4
 6
```

</br>

## 함수를 정의할 때의 사용법 {#sec-splat_operator_in_function_definition}

정해진 수의 인자를 받는 것이 아니라 다양한 수의 인자를 받는 함수를 **가변 인자 함수 (function of variable number of arguments)** 라고 하며 `...` 연산자를 사용합니다. 다음을 봅시다.

```txt
In [6]: function ps(xs...)
        println(typeof(xs))
        return xs[1], xs[2]
        end
Out[6]: ps (generic function with 1 method)

In [7]: ps(1,2,3,"c")
Tuple{Int64, Int64, Int64, String}
Out[7]: (1, 2)
```

함수 정의에서 인자로 `xs...` 가 사용되었습니다. 이것은 인자를 모두 `xs` 라는 변수의 튜플로 받는다는 뜻입니다. 즉 `In [7]` 에서 함수 내부적으로 인자는 `(1, 2, 3, "c")` 입니다. 일부의 인자에 대해서만 사용할 경우에는 다음과 같습니다.

```txt
In [9]: function ps2(x1, xs...)
        return xs[1], xs[2]
        end
Out[9]: ps2 (generic function with 1 method)

In [10]: ps2(1,2,3,4,5,6)
Out[10]: (2, 3)
```


키워드 인자도 역시 `...` 를 사용하여 받을 수 있습니다. 다음의 함수를 봅시다. 예를 들어,

```julia
function ps3(xs...;vs...)
   ...         
end
```

와 같은 함수는 키워드가 없는 인자들은 `xs` 라는 변수의 튜플로, 키워드로 제시된 인자들은 `vs` 라는 기명 튜플(NamedTuple) 인자로 받습니다.


```txt
In [6]: function ps3(xs...; vs...)
        return vs
        end
Out[6]: ps3 (generic function with 1 method)

In [7]: ps3(color="red", number=4, location="Daejeon")
Out[7]: pairs(::NamedTuple) with 3 entries:
  :color    => "red"
  :number   => 4
  :location => "Daejeon"
```

</br>

## 함수를 실행시킬때 인자에서의 사용법 {#sec-splat_operator_in_function_argument}

함수의 정의에서는 인자를 튜플로 묶는다면 함수를 사용할 때는 컨테이너를 풉니다. 예를 들어,

```txt
In [12]: function ps3(a1, a2, a3)
         return a1+(a2*a3)
         end
```

와 같은 함수를 사용해야 한다고 합시다. 그런데 다른 함수의 계산 결과로 `aa=(a1, a2, a3)` 를 얻었다고 합시다. `ps3(aa[1], aa[2], aa[3])` 와 같이 실행 시킬 수도 있지만

```txt
In [13]: aa=(2, 3, 4)
Out[13]: (2, 3, 4)

In [14]: ps3(aa...)
Out[14]: 14
```

처럼 `ps3` 함수를 실행 시킬 때 인자로 `a...` 를 쓰면 튜플이 풀려서 `ps3(aa[1], aa[2], aa[3])` 를 실행시킨 것과 같게됩니다.




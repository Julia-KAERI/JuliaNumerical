## 바이어슈트라스 근사정리

이산적인 데이터 $(x_1,\,y_1),\,(x_2,\,y_2),\ldots,\, (x_N,\, y_N)$ 가 주어졌으며 $x_1<x_2<\cdots <x_N$ 으로 정렬되어 있다고 하자. 이 때 주어진 데이터를 바탕으로 임의의 $x$ 값을 추측할 경우, $x_1 \le x \le x_N$ 의 $x$ 값에 대해 추측하는 것을 보간법(interpolation) 이라 하고, $x<x_1$ 이거나 $x >x_N$ 일 경우 추축하는것을 외삽법(extrapolation) 이라 한다. 여기서는 보간법에 대해 다루기로 한다. 기본적으로 여기서 다루는 보간법은 데이터를 다항식으로 근사시키는데, 이 방법은 아래의 바이어스트라스 근사 정리(Weierstrass approximation theorem)로 정당화된다.  

::: {#thm-Weierstrass_approximation_theorem}

#### 바이어슈트라스 근사 정리

함수 $f : X \subset \mathbb{R} \to \mathbb{R}$ 가 $[a,\,b] \subset I$ 구간에서 연속일 때, 임의의 $\varepsilon > 0$ 에 대해

$$
|f(x)-P(x)|<\varepsilon,\qquad \forall x\in [a,\,b]
$$

인 다항식 $P(x)$ 가 항상 존재한다. 
:::

이 정리에 대한 증명은 해석학(Analysis) 교과서(예를 들면, Terrence Tao의 해석학 교과서 2권) 를 참고하라.

</br>

## 다항식을 이용한 전역적 보간법 {#sec-global_interpolation_using_polynomial}

전역적 보간법은 전체 데이터를 하나의 다항식으로 표현하는 방법이며, 후술할 국소적 보간법은 구하고자 하는 값 주위의 몇개의 데이터만을 이용하여 국소적으로 다항식으로 표현한다. 여기서는 $n+1$ 개의 데이터 $\{ (x_i,\, y_i): i=1,\ldots,\,n\}$ 이 주어졌으며 $i\ne j \implies x_i \ne x_j$ 일 때, 즉 어떤 두 $x_i,\,x_j$ 도 같지 않을 경우에 대해, 이 점을 모두 지나는 $n-1$ 차 다항식은 유일하게 정해진다는 사실을 이용하여 $n-1$ 차 다항식을 구하는 방법을 설명한다. 이 다항식을 구하는 방법은 방데르몽드(Vandermond) 방법, 라그랑쥬(Lagrange) 방법, 뉴턴(Newton) 방법 등이 있다

</br>

### 발데르몽드 방법 {#sec-interpolation_valdermond_method}

다항식을 다음과 같이 놓는다.
$$
V_{n} (x) = a_0 + a_1 x + \cdots + a_{n-1}x^{n-1}
$$ 

이 때 $V_{n} (x_i)= y_i$ 이므로 아래와 같은 선형방정식 $\boldsymbol{Va}=\boldsymbol{y}$ 을 통해 계수 $a_0,\ldots,\,a_{n-1}$ 을 구할 수 있다.

$$
\underbrace{\begin{bmatrix} 1 & x_1 & x_1^2 & \cdots & x_1^{n-1} \\ 1 & x_2 & x_2^2 & \cdots & x_2^{n-1} \\ \vdots & & & & \vdots \\ 1 & x_n & x_n^2 & \cdots & x_n^{n-1}\end{bmatrix}}_{{\Large \boldsymbol{V}}} \underbrace{\begin{bmatrix}a_0 \\ a_1 \\ \vdots \\ a_{n-1}\end{bmatrix}}_{{\Large \boldsymbol{a}}} = \underbrace{ \begin{bmatrix}y_1 \\ y_2 \\ \vdots \\ y_n\end{bmatrix}}_{{\Large\boldsymbol{y}}}
$$ {#eq-vandermond_matrix}


</br>

::: {#exr-determinant_of_valdermond_matrix}
위의 $\boldsymbol{V}$ 와 같이 주어진 발데르몽드 행렬의 행렬식은 다음과 같음이 잘 알려져 있다. 

$$
\det(\boldsymbol{V}) = \prod_{1\le i<j\le n} (x_j-x_i) 
$$

즉 어떤 두 $x_i,\,x_j$ 같지 않으면 행렬식은 $0$ 이 아니므로 가역행렬이다.
:::

</br>

데이터로 부터 행렬 $\boldsymbol{V}$ 와 벡터 $\boldsymbol{y}$ 를 구할 수 있으며, 어떤 두 $x_i,\,x_j$ 도 같지 않으므로 선형방정식의 풀이를 통해 다항식의 계수 벡터 $\boldsymbol{a}$ 를 구할 수 있다.

</br>

### 라그랑쥬 다항식을 이용한 보간법 {#sec-interpolation_lagrange}

가장 직관적으로 이해하기 쉬운 라그랑쥬 방법을 알아보자. $n$ 개의 데이터 $\{(x_i,\,y_i):i=1,\ldots\, n\}$ 에 대해 함수 $l_k(x)$ 를 다음과 같이 정의하자.

$$
l_k (x) := \prod_{i=1,\, i \ne k}^n \dfrac{(x-x_i)}{(x_i-x_k)} = \dfrac{(x-x_1)\cdots (x-x_{k-1})(x-x_{k+1})\cdots (x-x_n)}{(x_k-x_1)\cdots (x_k-x_{k-1})(x_k-x_{k+1})\cdots (x_k-x_n)}
$$ {#eq-lagrange_interpolation_function}

이 다항식은 다음을 만족한다.

$$
l_k (x_j) = \delta_{xj} = \left\{ \begin{array}{ll} 1 \qquad & j=k,\\ 0 \qquad &\text{otherwise} \end{array}\right.
$$

다항식 $L_n(x)$ 를 다음과 같이 정의하자.

$$
L_{n}(x) := \sum_{k=1}^n y_k \, l_k(x)
$$ {#eq-Lagrange_polynomial}

그렇다면 $i=1,\ldots,\,n$ 에 대해 $L_{n}(x_i)=y_i$ 인 것은 쉽게 알 수 있다. 즉 $L_{n} (x)$ 는 주어진 점들을 모두 지나는 다항식이다. 이 다항식 $L_{n}(x)$ 를 라그랑쥬 다항식이라고 한다.

</br>

### 뉴턴 보간법 {#sec-interpolation_newton}

뉴턴 보간법은 $n$ 개의 데이터 $\{ (x_i,\, y_i): i=1,\ldots,\,n\}$ 를 지나는 $n-1$ 차 다항식을 
$$
\begin{aligned}
N_{n}(x) & = a_0 + a_1 (x-x_1)+ a_2 (x-x_1)(x-x_2)+ \cdots \\
& \qquad + a_{n-1}(x-x_1)\cdots (x-x_{n-1})
\end{aligned}
$${#eq-Newton_polynomial}

으로 두고 그 계수 $a_0,\,a_1,\ldots,\,a_{n-1}$ 을 찾는다. 우선 $n_k(x)$ 를 아래와 같이 정의하자.
$$
n_k (x) := \left\{ \begin{array}{ll} 1 & \text{if }k=0 \\ \displaystyle \prod_{i=1}^k (x-x_i) &\text{if }k\ne 0\end{array}\right.
$$ {#eq-Newton_basis_polynomial}

이 $n_k(x)$ 를 **뉴턴 기저 다항식** 이라 한다. 뉴턴 다항식 $N_n (x)$ 는 다음과 같다.

$$
N_{n}(x) = \sum_{k=0}^{n-1} a_k n_k (x).
$$ 

이 때 $N_n(x_1)=a_1= y_1$ 이며, $k=1,\ldots,\, n-1$ 에 대해 

$$
a_k = \dfrac{y_{k+1} - a_1 - a_2(x_{k+1}-x_1) - \cdots - a_{k-1}(x_{k+1}-x_1)\cdots (x_{k+1}-x_k)}{(x_{k+1}-x_1)\cdots (x_{k+1}-x_k)}
$$

임을 알 수 있다. 이것을 아래와 같은 선형방정식 $\boldsymbol{Na}=\boldsymbol{y}$ 를 통해 표현 할 수 있다.


$$
\underbrace{\begin{bmatrix} 1 & 0 & 0 & \cdots & 0 \\ 1 & n_1(x_2) & 0 & \cdots & 0 \\ 1 & n_1(x_3) & n_2(x_3) & \cdots & 0 \\ \vdots & \vdots & \vdots & \ddots & \vdots \\ 1 & n_{n-1}(x_n) & \cdots & \cdots & n_{n-1}(x_n)  \end{bmatrix}}
_{{\Large \boldsymbol{N}}}
\underbrace{\begin{bmatrix} a_0 \\ a_1 \\ a_2 \\ \vdots \\ a_{n-1}\end{bmatrix}}_{{\Large \boldsymbol{a}}} =
\underbrace{\begin{bmatrix} y_1 \\ y_2 \\ y_3 \\ \vdots \\y_n \end{bmatrix}}_{{\Large \boldsymbol{y}}}.
$$ {#eq-newton_polynomial_matrix}

뉴턴 보간법을 행렬로 표현하는 $\boldsymbol{N}$ 은 하삼각행렬로 방데르몽드 방법이나, 라그랑쥬 방법에 의한 보간법보다 그 계수를 구하는 것이 빠르고 수치해석적으로 안정적이다. 라그랑쥬 방법과 뉴턴 방법에 의한 보간을 Julia 로 구현하면 아래와 같다.

```julia
function lagrange_polynomial(xp::AbstractVector{T1}, yp::AbstractVector{T2}) where {T1<:Number, T2<:Number}
    N = length(xp)
    @assert length(xp) == length(yp)
    
    r = SimplePolynomial([zero(T2), ])
    for i in 1:N
        coef = yp[i]
        rt = one(T2)
        for j in 1:N
            if i ≠ j
                @inbounds coef = coef/(xp[i]-xp[j])
                @inbounds rt = rt*SimplePolynomial([-xp[j], 1.0])
            end
        end
        r += rt*coef
    end
    return r
end

function newton_polynomial(xp::AbstractVector{Real}, yp::AbstractVector{Real})
    n = length(xp)    
    @assert n == length(yp)
    N = LowerTriangular(ones(T, n, n))
    for j in 2:n, i in j:n
        @inbounds N[i, j] = N[i, j-1]*(xp[i] - xp[j-1]) 
    end
    a = N\yp
    r = SimplePolynomial([a[1], ])
    for i in 2:(n)
        @inbounds r += a[i] * polynomial_from_roots(xp[1:i-1])
    end
    return r

end
```

주어진 점에 대해 보간하는 세가지 방법은 수학적으로 동등하지만 수치해석적으로는 뉴턴 방법을 권장하는데 그 이유는 다음과 같다.

1. 일반적으로 라그랑쥬 다항식보다 뉴턴 다항식을 빠르게 계산 할 수 있다.

2. $n$ 개의 데이터에 대해 다항식을 구한 후 데이터를 추가할 때 라그랑쥬 다항식은 모든 계수를 다시 계산해야 하지만 뉴턴 다항식은 위의 이미 알고 있는 계수와 점들을 를 이용하여 계산할 수 있다.

3. 데이터가 어느 정도 많이 주어졌을 때 라그랑쥬 다항식보다 뉴턴 다항식이 수치해석적으로 안정하다.


</br>

### 다항식을 이용한 보간법의 오차 {#sec-error_for_polynomial_interpolation}

::: {#prp-roll_theorem_many_x0}

$f\in C^{n}[a,\,b]$ 이고 $\{x_1,\ldots,\,x_n\}\subset [a,\,b]$ 라 하자. $P_{n-1}(x)$ 가 $P_{n-1}(x_i) = f(x_i)$ ($i=1,\ldots,\,n$) 인 $n-1$ 차 다항식이라면

$$
f(x) - P_{n-1}(x) = \dfrac{f^{(n)}(\xi)}{n!} \prod_{j=1}^n (x-x_j)
$$

를 만족하는 $\xi \in [a,\,b]$ 가 존재한다.

:::


::: {.proof}

$F(t)$ 를 다음과 같이 정의하자.

$$
F(t) = f(t) - L_n (t) - (f(x)-P_{n-1} (x)) \prod_{i=1}^n \dfrac{(t-x_i)}{(x-x_i)} \tag{1}
$$

이 때 $t=x_k,\, k=1,\ldots,\, n$ 에 대해 $F(x_k)=0$ 이다. 또한 

$$
F(x) = f(x)-P_{n-1}(x) - (f(x)-L_n(x)) = 0
$$

이므로 $x,\,x_1,\ldots,\,x_n$ 의 $n+1$ 개의 점에서 $F(t)=0$ 이 된다. 롤의 정리를 이용하면 $n$ 개의 점에서 $F'(t)=0$ 이며, 이것을 반복하면 $F^{(n)}(\xi)=0$ 을 만족하는 $\xi\in [a,\,b]$ 가 존재한다. 그런데 $P_{n-1}(x)$ 는 $n-1$ 차 다항식이므로 $P_{n-1}^{(n)} (x)=0$ 이며 ($1$) 의 $\prod_{i=1}^n \dfrac{(t-x_i)}{(x-x_i)}$ 에 대한 $n$ 차 미분은

$$
\dfrac{d^n}{dt^n} \left(\prod_{i=1}^n \dfrac{(t-x_i)}{(x-x_i)}\right) = \dfrac{n!}{\prod_{i=1}^n (x-x_i)}
$$

이므로,

$$
F^{(n)}(\xi) = f^{(n)}(\xi) - (f(x)-P_{n-1} (x))\dfrac{n!}{\prod_{i=1}^n (x-x_i)} = 0
$$

이다. 즉

$$
f(x) = P_{n-1}(x) + \dfrac{f^{(n)}(\xi)}{n!}\prod_{i=1}^n (x-x_i)
$$

를 만족하는 $\xi \in [a,\,b]$ 가 존재한다. $\square$
:::



</br>

### 전역적 보간법의 문제점

데이터 갯수가 많을 경우 고차다항식으로 보간을 하게 되는데, 이 경우 다항식이 심하게 진동하는 경우가 있을 수 있다. 아래 그림의 데이터는 15개의 포인트로 가우스 분포 $e^{-(x-x_0)/2\sigma^2}$ 를 그린 것이며, 라그랑쥬나 뉴턴 방법을 통해 14차 다항식으로 보간한 결과를 같이 보여준다.

![Oscilating behavior](interpolation_oscillation.png){width=100%}

게다가 데이터 갯수가 상당히 많으면 수치적으로 불안정해 진다. 예를 들어, 25개의 데이터에 대한 가우스 분포를 다항식으로 보간하면 아래와 같이 더 이상 사용할 수 없는 결과가 발생한다.

![Oscilating behavior2](interpolation_oscillation2.png){width=100%}


</br> 

## 다항식을 이용한 구간별 보간법 {#sec-local_interpolation_using_polynomial}

앞서의 전역적 보간법은 주어진 전체 데이터를 이용한 보간법인데 반해 지금 소개하는 보간법은 구하고자 하는 독립변수값 근처의 소수의 점만을 이용하여 다항식으로 보간한다. 따라서 전역적 보간법에서 보이는 진동이 없으며, 데이터가 많더라도 사용 할 수 있다.

</br>

### 최근접 보간법 (Nearest Neighbor Interpolation)

가장 간단한 보간법 은 최근접 보간법 (nearest neighbor interpolation) 으로 $x_1,\ldots,\,x_N$ 가운데 $x$ 값에 가장 가까운 값을 취하는 방법이다. 즉 $x_i\le x<x_{i+1}$ 일 때 $x_i$ 와 $x_{i+1}$ 중 $x$ 와의 거리가 더 가까운 값을 $f(x)$ 로 선택하는 방법이다. 가장 단순하면서도 빠르지만 보간법의 결과로 나온 함수는 연속함수가 아니다.

</br>

### 선형 보간법 (Linear Interpolation)

$x_{i}\le x < x_{i+1}$ 일 때 $(x_i,\,y_i)$ 와 $(x_{i+1},\, y_{i+1})$ 의 두 점을 지나는 직선 $l_i (x)$ 는 다음과 같다.

$$
l_i (x) = \dfrac{y_{i+1}-y_i}{x_{+1}-x_i} (x-x_i) + y_i
$$ {#eq-linear_interpolation}

이 직선 $l_i(x)$ 값으로 $f(x)$ 값을 추산하는 것을 선형보간법이라 한다. 선형 보간법으로 구한 함수는 연속이지만 일반적으로 미분가능하지 않다.

</br>

### 삼차함수 보간법 (Cubic interpolation)

$x_{i}\le x< x_{i+1}$ 일 때 $(x_{i-1},\, y_{i-1})$, $(x_i,\,y_{i})$, $(x_{i+1},\,y_{i+1})$, $(x_{i+2},\, y_{i+2})$ 를 이용하여 3차함수를 구하여 보간한다. 보간하는 함수는 라그랑쥬 다항식이나 뉴턴 다항식을 이용한다. (아래 코드에서는 뉴턴 다항식을 이용했다.)  $(x_{i-1},\, y_{i-1})$, $(x_i,\,y_{i})$, $(x_{i+1},\,y_{i+1})$, $(x_{i+2},\, y_{i+2})$ 를 이용하여 구한 3차 다항식을 $N_i(x)$ 라고 하면 $x_1\le x<x_2$ 일 경우에는 $x_0$ 가 없으므로 $N_1(x)$ 를 이용하며, $x_{N-1}\le x \le x_{N}$ 일 경우에는 $N_{N-2}$ 를 이용하여 보간한다. 삼차함수 보간법을 사용하여 구한 함수는 연속이며 선형 보간법보다 나은 결과를 보여주지만 역시 미분 가능하지 않다.

일단 이것을  julia 로 구현한 것은 아래와 같다.

```julia
"""
    nearest neighbor interpolation
"""
function interp_nearest(xp::AbstractVector{T}, yp::Vector{S}, x::AbstractVector{R}) where {T<:Real, S<:Real, R<:Real}
    @assert length(xp) == length(yp)
    N = length(xp)
    result = zero(x)
    for (i, v) in enumerate(x)
        if v<xp[1] || v>xp[end]
            result[i] = zero(T)
        else 
            ind = findfirst(xs->(xs>=v), xp)-1
            if ind == 0
                result[i]=yp[1]
            elseif v-xp[ind] > xp[ind+1]-v
                result[i] = yp[ind+1]
            else 
                result[i] = yp[ind]
            end
        end
    end
    return result
end

"""
    linear interpolation
"""
function interp_linear(xp::AbstractVector{T}, yp::Vector{S}, x::AbstractVector{R}) where {T<:Real, S<:Real, R<:Real}
    @assert length(xp) == length(yp)
    N = length(xp)
    result = zero(x)
    for (i, v) in enumerate(x)
        if v<xp[1] || v>xp[end]
            result[i] = zero(T)
        else 
            ind = findfirst(xs->(xs>=v), xp)-1
            if ind == 0
                result[i] = yp[1]
            else
                result[i] = (yp[ind+1]-yp[ind])/(xp[ind+1]-xp[ind])*(v-xp[ind]) + yp[ind]
            end
        end
    end
    return result
end

"""
    cubic interpolation
"""
function interp_cubic(xp::AbstractVector{T}, yp::Vector{S}, x::AbstractVector{R}) where {T<:Real, S<:Real, R<:Real}
    @assert length(xp) == length(yp)
    N = length(xp)
    result = zero(x)
    for (i, v) in enumerate(x)
        
        if v<xp[1] || v>xp[end]
            result[i] = zero(T)
        else 
            ind = findfirst(xs->(xs>=v), xp)-1
            if ind ∈ (0, 1)
                xs, ys = xp[1:4], yp[1:4]
            elseif ind ∈ (N, N-1)
                xs, ys = xp[end-3:end], yp[end-3:end]
            else 
                xs, ys = xp[ind-1:ind+2], yp[ind-1:ind+2]
            end
            result[i] = newton_polynomial(xp, yp)(v)
        end
    end
    return result
end
```

</br>

이것을 다음 코드로 확인해 보았다.


```julia
using Plots
xp = 0.0:1.0:15.0 
yp = cos.(xp) .* exp.(-xp/10.0)
xt = collect(0.0:0.1:15.0) 
scatter(xp, yp, label = L"\cos \theta", dpi=300)
plot!(xt, interp_nearest(xp, yp, xt), lw=2, lc=:red, label=L"\mathrm{Nearest}")
plot!(xt, interp_linear(xp, yp, xt), lw=2, lc=:blue, label=L"\mathrm{Linear}")
plot!(xt, interp_cubic(xp, yp, xt), lw=2, lc=:green, label=L"\mathrm{Cubic}")
```

</br>

![Interpolation](Interpolation.png){width=100%}

</br>



### Cubic Spline Interpolation 

위에서 설명한 세가지 보간법은 연속이 아니거나 미분 가능하지 않았다. Spline 보간법은 보간하고자 하는 구간 내에서 미분가능한 함수를 구해준다.

$n$ 개의 데이터 $\{(x_i,\,y_i): i=1,\ldots,\,n\}$ 에 대해 $[x_i,\,x_{i+1}]$ 구간을 보간하는 다항식을 $s_i(x)$ 라 하자. 이 때 각각의 $s_i(x)$ 를 3차 다항식으로 하고


$$
\begin{aligned}
s_i(x_{i}) & = y_{i}\\
s_i(x_{i+1}) &= y_{i+1}\\
s'_i(x_{i+1}) &= s'_{i+1}(x_{i+1}) \\
s''_i(x_{i+1}) &= s''_{i+1}(x_{i+1})
\end{aligned}
$$ {#eq-cubic_spline_condition_1}
을 만족하도록 보간하는 것을 cubic spline interpolation 이라 한다. $[x_i,\,x_{i+1}]$ 구간에서의 삼차함수 $s_i(x)$ 를
$$
s_{i}(x) = a_i + b_i x + c_ix^2 + d_i x^3
$$

이라 하자. $s_i(x)$ 에 대한 일차 도함수와 이차 도함수는

$$
\begin{aligned}
s'_i (x) &= b_i + 2c_i x + 3d_i x^2,\\
s''_{i}(x) &= 2c_i + 6d_ix
\end{aligned}
$$

이므로, $a_{i-1},\,b_{i-1},\, c_{i-1},\, d_{i-1}$ 로부터

$$
\begin{array}{c}
a_i + b_i x_{i}+ c_i(x_{i})^2+ d_{i} (x_{i})^3 = y_{i} \\
a_i + b_i x_{i+1}+ c_i(x_{i+1})^2+ d_{i} (x_{i+1})^3 = y_{i+1} \\
b_i + 2c_i (x_{i+1})+ 3d_i (x_{i+1})^2 =b_{i+1} + 2c_{i+1} (x_{i+1})+ 3d_{i+1} (x_{i+1})^2 \\
2c_i + 6d_ix_{i+1} = 2c_{i+1}+ 6d_{i+1}x_{i+1}
\end{array}
$$ {#eq-cubic_spline_condition_2}

의 조건을 얻었으며, 이를 통해 $a_i,\,b_i,\,c_i,\,d_i$ 를 구할 수 있다. 위 식에서 아래의 두 식은 $i=1$ 일 때 사용 할 수 없으므로 우리는 추가로 조건을 두어야 한다. 이 때 보통 아래와 같은 2가지의 경계조건 가운데 선택한다.

1. Free or natural boundary: $s''_1 (x_1) = s''_{n-1} (x_n) = 0$

2. Clamped boundary: $s'_1(x_1) = f'(x_0),\, s'_{n-1} (x_n) = f'(x_n)$

Clampled boundary 일 경우 $f'(x_0),\, f'(x_n)$ 값은 주어져야 한다.

</br>

$n-1$ 개의 구간에 대해 각각 4 개의 변수를 결정해야 하므로 미지수 행렬을 $4(n-1)\times 1$ 행렬 $\boldsymbol{a}$ 으로 두자. $j=1,\ldots,\,n-1$ 에 대해 

$$
a_{4j-3} = a_j, \, a_{4j-2} = b_j, \, a_{4j-1} = c_j,\, a_{4j} = d_j
$$

라고 하면 미지수 전체에 대한 행렬이다. 이제 주어진 데이터와 미지수와의 관계를 이용하여 선형방정식 $\boldsymbol{Ma}=\boldsymbol{b}$ 를 만들자. 이 때 $\boldsymbol{M}$ 은 $4(n-1) \times 4(n-1)$ 행렬이다. $j=1,\ldots,\, n-1$ 에 대해 $\boldsymbol{M}$ 의 $4(j-1)+1$ 행부터 $4(j-1)+4$ 행까지, $4(j-1)+1$ 열부터 $4(j-1)+8$ 열까지의 $4 \times 8$ 부분행렬을 $\boldsymbol{M}_j$ 라고 하자. 위의 조건 @eq-cubic_spline_condition_2 으로부터 $\boldsymbol{M}_j$ 가 포함하지 않는 성분은 모두 $0$ 임을 알 수 있다. $i=1,\ldots, n-2$ 에 대해 $\boldsymbol{M}_i$ 는 다음과 같다.
$$
\boldsymbol{M}_j = \begin{bmatrix} 
1 & x_i & (x_i)^2 & (x_i)^3 & 0 & 0 & 0 & 0\\
1 & x_{i+1} & (x_{i+1})^2 & (x_{i+1})^3 & 0 & 0 & 0 & 0\\
0 & 1 & 2x_{i+1} & 3(x_{i+1})^2 & 0 & -1 & -2 x_{i+1} & -3(x_{i+1})^3\\
0 & 0 & 2 & 6x_{i+1} & 0 & 0 & -2 & -6x_{i+1}
\end{bmatrix}
$$

$x_{n+1}$ 은 주어져 있지 않으므로 $\boldsymbol{M}_{n-1}$ 은 $2 \times 8$ 행렬이며 다음과 같다.

$$\boldsymbol{M}_{n-1} = \begin{bmatrix} 
1 & x_{n-1} & (x_{n-1})^2 & (x_{n-1})^3 & 0 & 0 & 0 & 0\\
1 & x_{n} & (x_{n})^2 & (x_{n})^3 & 0 & 0 & 0 & 0\\
\end{bmatrix}
$$


또한 역시 @eq-cubic_spline_condition_2 로 부터 $4(n-1)\times 1$ 행렬 $\boldsymbol{y}$ 는 $i=1,\ldots,\,n$ 에 대해 다음과 같이 정할 수 있다.

$$
b_{4j-3}= y_i, \, b_{4j-2}= y_{i+1},\, b_{4j-1} = 0,\, b_{4j}= 0
$$


이제 $\boldsymbol{M}$ 의 마지막 두 행을 경계조건에 따라 정해야 한다.

</br>

#### Free boundary 

우선 첫번째 경계조건이 주어졌을 경우
$$
\begin{aligned}
s''_1 (x_1)=0 &\implies 2c_1+ 6 d_1 (x_1)=0, \\
s''_{n-1}(x_n) = 0 &\implies 2c_{n-1} + 6d_{n-1}(x_n) = 0
\end{aligned}
$$

를 얻는다. 이 조건으로부터,

$$
M_{4n-5, 3}=2,\, M_{4n-5, 4}= 6x_1,\, M_{4n-4, 4n-5} = 2,\, M_{4n-4, 4n-4} = 6x_n
$$

을 얻는다. 

</br>

#### Clamped boundary

$$
\begin{aligned}
s'_1 (x_1)=f'(x_0) &\implies b_1 + 2c_1(x_1)+ 3d_1 (x_1)^2=f'(x_0), \\
s'_{n-1}(x_n) = f'(x_n) &\implies b_{n-1}+ 2c_{n-1}(x_n) + 3d_{n-1}(x_n)^2 = f'(x_n)
\end{aligned}
$$

를 얻는다. 이 조건으로부터,

$$
\begin{aligned}
M_{4n-5, 2}=1,\, M_{4n-5, 3}=2x_1,\, M_{4n-5, 4} = 3(x_1)^2,\, b_{4n-5}=f'(x_0), \\
M_{4n-4, 4n-6}=1,\, M_{4n-4, 4n-5}=2x_n,\, M_{4n-4,4n-4}=3(x_n)^2,\, b_{4n-4}=f'(x_n) 
\end{aligned}
$$

을 얻는다.

</br>

이제 행렬 $\boldsymbol{M}$ 과 벡터 $\boldsymbol{b}$ 를 얻었으므로 $\boldsymbol{Ma}=\boldsymbol{b}$ 를 만족하는 $\boldsymbol{a}$ 를 구할 수 있다. $\boldsymbol{a}$ 는 이 보간법의 각 구간에서의 3차 다항식의 계수를 결정하기 때문에 우리는 보간법을 사용하여 정해진 구간 내의 모든 값을 계산 할 수 있다.


여기에 사용된 모든 보간법은 `interpolation.jl` 에 `Interpolation1D` 객체로 구현되었다.

```julia
using Plots, LaTeXStrings, LinearAlgebra, Plots, SparseArrays, Printf
include("../lib/interpolation.jl")

xp = 0.0:0.75:15.0 # change step to vector
yp = cos.(3 .* xp) .* exp.(-xp/10.0)
yp[8:9]=[-0.15 -0.3]# 
xt = 0.0:0.05:15.0 # change step to vector

interp1=Interpolator1D(xp, yp, :cubic)
interp2=Interpolator1D(xp, yp, :cubic_spline_naturalbc)
interp3=Interpolator1D(xp, yp, :cubic_spline_clampedbc, [0.0, 0.0])

scatter(xp, yp, label = L"\mathrm{Data}", dpi=300)
plot!(xt, interp1.(xt), lw=2, lc=:green, label=L"\mathrm{Cubic}")
plot!(xt, interp2.(xt), lw=2, lc=:red, ls = :dash, label=L"\mathrm{Cubic\;Spline\;with\;natural\;BC}")
plot!(xt, interp3.(xt), lw=2, lc=:blue, ls = :dot, label=L"\mathrm{Cubic\;Spline\;with\;clamped\;BC}")
```

이 결과로 다음의 그래프를 얻었다.

![Cubic Spline Interpolation](test_spline){width=100%}

</br>
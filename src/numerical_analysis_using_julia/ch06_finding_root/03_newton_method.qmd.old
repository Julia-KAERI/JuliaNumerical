## 뉴턴 방법 (Newton-Method)

함수 $f(x)$ 가 미분가능하다고 하자. 그리고 $(a,\,b)$ 구간에서 $f(x)=0$ 의 해가 존재하며, 이 구간에서 도함수 $f'(x)$ 가 $0$ 보다 항상 크다고 하자. 해는 정확히 모르지만 대략 $x_0 \in (a,\,b)$ 근처임을 안다고 하자. 테일러 정리에 의해 $f(x)$ 는 $x_0$ 근처에서 대략
$$
f(x) \approx f(x_0) + f'(x_0)(x-x_0)
$$

이다.  

이제 $f_0 (x) =  f(x_0) + f'(x_0)(x-x_0)$ 라 놓고 $f_0(x) = 0$ 의 해를 구하여 $x_1$ 이라 하면,

$$
x_1 = x_0 - \dfrac{f(x_0)}{f'(x_0)}
$$

가 된다. 이제 $f(x)$ 를 $x_1$ 에서의 1차 다항식으로 전개한 $f_1(x)$ 는

$$
f_1(x) = f(x_1) + f'(x_1)(x-x_1)
$$

이 되며 이 식의 해를 $x_2$ 라 놓는다. 즉 $x_2 = x_1 - \dfrac{f_1(x_1)}{f'(x_1)}$ 이다. 이 과정을 반복하여 해를 얻는 방법을 **뉴턴 방법(Newton method)** 혹은 **뉴턴-랩슨 방법(Newton-Raphson) method** 라고 한다.

Bisection method는 무조건 해를 찾을 수 있다. 그러나, Newton method 는 해를 찾을 수 없는 경우도 생기는데 가장 대표적인 경우는 위의 과정중에 어떤 $x_k$ 에 에서 $f'(x_k)=0$ 인 경우이다. 

1. $f(x)=0$ 을 만족하는 해가 대략 $x_1$ 근처임을 안다.

2. $x_{n+1} = x_{n}- \dfrac{f(x_{n})}{f'(x_{n})}$ 을 계속 반복

이를 구현한 코드는 아래와 같다.

```julia
function newton_method(f::Function, df::Function, xi::T, MaxIter::Int64=100_000, etol::T = 1.0e-10, dfmin::T = 1.0e-6)::T where T <:AbstractFloat
    Niter = 0
    for i in 1:MaxIter
        if abs(f(xi)) < etol
            break
        elseif abs(df(xi)) < dfmin 
            error("df ≈ 0.0")
        end
        xi = xi - f(xi)/df(xi)
        Niter += 1       
        
        if abs(f(xi)) < etol 
            println("$Niter 회 반복 후 답 : $xi ")
            return xi
        end
    end
    error("최대 반복 횟수 $MaxIter 에 도달하였으나 답을 찾지 못함")
end

f2(x) = x*(x-1.)*(x-2.)+5
df2(x) = 3*x^2-6*x+2
newton_method(f2, df2, 1.2)
```

$f_2(x) = x(x-1)(x-2)+5$ 에 대한 해를 구하였으며, 시작점 $x_i = 1.2$ 로 부터 추산했을 때 그 결과는 다음과 같다.

```sh
24 회 반복 후 해 -0.9041608591349207 를 찾음
```

만약 $0.0$ 부터시작한다면, 즉 `newton_method(f2, df2, 1.2)` 를 실행한다면,

```sh
24 회 반복 후 답 : -0.9041608591349207 
```

이 된다.

</br>

### 개선된 뉴텬 방법 (Newton method)

함수 `newton_method` 에서는 함수 $f(x)$ 와 도함수 $f'(x)$ 를 모두 전달인자로 주었다. 그러나 도함수 $f'(x)$ 가 매우 복잡하거나 하여, 도함수를 직접적으로 인자로 주기 힘든 경우가 생길 수 있다. 이 때 도함수가 아닌 수치적으로 계산한 미분의 근사값 $\dfrac{f(x_n)-f(x_{n-1})}{x_n -x_{n-1}}$ 을 사용한다. 즉,

$$
x_{n+1} = x_n - \dfrac{f(x_n)}{g(x_n)} \,\qquad \textrm{where } g(x_n)=\dfrac{f(x_n)-f(x_{n-1})}{x_n -x_{n-1}}
$$

을 사용한다. 만약 시작점을 $x_1$  하나만 주었다면 $x_2$ 를 계산 할 수 없으므로, $x_0$ 까지 두개를 제공해야 한다.

```julia
function newton_secant(f::Function, x0::T, x1::T, MaxIter::Int64 = 100_000, etol::T = 1.0e-10, dfmin::T = 1.0e-10) where T <: AbstractFloat
    Niter = 0
    xp, xc = x0, x1

    for i in 1:MaxIter
        gx = (f(xc)-f(xp))/(xc-xp)
        if abs(f(xc)) < etol 
            return xc
        elseif abs(gx)<dfmin
            error("df ≈ 0.0")
        end
        xp, xc = xc, xc - f(xc)/gx
        Niter += 1
    end
    error("최대 반복 횟수 $MaxIter 에 도달하였으나 답을 찾지 못함.")
end
```

이것에 대해 `newton_method` 와 비교해보았다.

```julia
f2(x) = x*(x-1.)*(x-2.)+5
df2(x) = 3*x^2-6*x+2
newton_method(f2, df2, 0.0)
newton_secant(f2, 0.0, 0.1)
```

를 수행하면

```sh
7 회 반복 후 해 -0.9041608591349207 를 찾음
10 회 반복 후 해 -0.9041608591355101 를 찾음
```

의 결과를 얻었다.

</br>

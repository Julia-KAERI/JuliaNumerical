## LU 분해

선형방정식 $\boldsymbol{Ax}=\boldsymbol{b}$ 를 푸는 가장 기본적인 방법이 **LU 분해(LU decomposition, LU factorization)** 이다.

</br>

### LU 분해 (LU decomposition) 

정사각행렬 $\boldsymbol{A}$ 를 어떤 하삼각행렬 $\boldsymbol{L}$ 과 상삼각행렬 $\boldsymbol{U}$ 에 대해

$$
\boldsymbol{A}=\boldsymbol{LU}
$$

로 나타낼 수 있을 때 행렬 $\boldsymbol{A}$ 가 LU 분해 (LU decomposition or LU factorization)  가능 행렬 이라 하고, 이 과정을 LU 분해라 한다. $2 \times 2$ 행렬의 예를 보자. 

$$
\boldsymbol{A}=\begin{bmatrix} 2 & 3 \\ 2 & 4 \end{bmatrix} =\boldsymbol{LU}=\begin{bmatrix} l_{11} & 0 \\ l_{21} & l_{22} \end{bmatrix} \begin{bmatrix} u_{11} & u_{12} \\ 0 & u_{22} \end{bmatrix} 
$$

이 경우, 

$$
\begin{aligned}
l_{11}u_{11} & = 2, \\
l_{11}u_{12} &= 3 , \\
l_{21}u_{11} &= 2 , \\ 
l_{21}u_{12} + l_{22}u_{22} & = 4,
\end{aligned}
$$

의 네 개의 식이 나온다. 미지수 6개에 식이 4개이므로 미지수를 결정 할 수 없다. 만약 $l_{11}= l_{22}=1$ 의 제한조건을 걸어 놓고 계산을 하면,

$$
\boldsymbol{L} = \begin{bmatrix} 1 & 0 \\ 1 & 1\end{bmatrix},\qquad \boldsymbol{U} = \begin{bmatrix} 2 & 3 \\ 0 &1\end{bmatrix}
$$

이라는 것을 알 수 있다. 일반적인 LU 분해에서도 하삼각행렬 $\boldsymbol{L}$ 의 대각성분을 1로 고정시켜 구한다.

다음 행렬에 대한 $LU$ 분해를 생각하자. 

$$
\boldsymbol{B}=\begin{bmatrix} 0 & 3 \\ 2 & 4 \end{bmatrix} =\boldsymbol{LU}=\begin{bmatrix} l_{11} & 0 \\ l_{21} & l_{22} \end{bmatrix} \begin{bmatrix} u_{11} & u_{12} \\ 0 & u_{22} \end{bmatrix} 
$$

이 경우, 

$$
\begin{aligned}
l_{11}u_{11} & = 0, \\
l_{11}u_{12} &= 3 , \\
l_{21}u_{11} &= 2 , \\ 
l_{21}u_{12} + l_{22}u_{22} & = 4,
\end{aligned}
$$

이며, $u_{11}=0$ 이므로 $l_{21}$ 값을 정할 수 없다. $l_{11}=l_{22}=1$ 이라는 제한조건을 푼다고 해도 마찬가지 이다. 이 경우 우리가 가우스 소거법에서 수행했던 행 교환 연산인 피보팅을 한다. 1행과 2행을 바꾼 행렬을 $\boldsymbol{B}$ 라고 하면, 

$$
\boldsymbol{B}'=\begin{bmatrix} 2 & 4 \\ 0 & 3 \end{bmatrix} =\boldsymbol{LU}=\begin{bmatrix} l_{11} & 0 \\ l_{21} & l_{22} \end{bmatrix} \begin{bmatrix} u_{11} & u_{12} \\ 0 & u_{22} \end{bmatrix} 
$$

이 경우, 

$$
\begin{aligned}
l_{11}u_{11} & = 2, \\
l_{11}u_{12} &= 4 , \\
l_{21}u_{11} &= 0 , \\ 
l_{21}u_{12} + l_{22}u_{22} & = 3,
\end{aligned}
$$

이므로 

$$
\boldsymbol{L} =  \begin{bmatrix}1 &  0 \\ 0 & 1 \end{bmatrix},\qquad \boldsymbol{U} =  \begin{bmatrix} 2 & 4 \\ 0 & 3 \end{bmatrix}
$$

로 LU 분해가 가능하다. 즉 $\boldsymbol{P} =\begin{bmatrix} 0 & 1 \\ 1 & 0\end{bmatrix}$ 에 대해 $\boldsymbol{PB}$ 가 LU 분해가 가능하다. 이렇게 피보팅까지 포함하여 LU 분해를 수행하는 것을 **PLU 분해**라고 하며 보통 LU 분해를 구현하는 경우 PLU 분해를 포함하여 구현할 수 밖에 없다. 여기서의 LU 분해는 항상 PLU 분해를 생각한다.

</br>

### LU 분해를 이용한 선형방정식의 풀이 및 행렬식

$\boldsymbol{A}$ 가 LU 분해 가능이고 $\boldsymbol{PA}=\boldsymbol{LU}$ 로 분해되었다고 하자. $\boldsymbol{A}$ 가 가역행렬이 아니라면 분해가 의미가 없으므로 가역행렬일 때만 생각한다. 치환행렬 $\boldsymbol{P}$ 는 가역행렬이므로

$$
\boldsymbol{Ax}=\boldsymbol{b} \iff \boldsymbol{PAx}=\boldsymbol{Pb} \iff \boldsymbol{LUx}=\boldsymbol{Pb}
$$

가 성립한다. 여기서 우리는 $\boldsymbol{y}=\boldsymbol{Ux}$ 라고 놓고 우선 $\boldsymbol{Ly}=\boldsymbol{Pb}$ 를 통해 $\boldsymbol{y}$ 를 구한 후, $\boldsymbol{Ux}=\boldsymbol{y}$ 를 풀어서 우리가 구하고자 하는 $\boldsymbol{x}$ 를 구한다. 가우스-요르단 소거법으로 선형 시스템을 풀기 위해서는 $\boldsymbol{b}$ 값이 바뀔 때마다 소거법을 수행해야 하지만, LU 분해나 PLU 분해는 $\boldsymbol{A}$ 에 대해서만 분해 한 후 삼각행렬에 대한 식을 풀면 되기 때문에 훨씬 간단하다. 또한 뒤에 보겠지만 대각성분으로 나눠주는 항이 없기 때문에 roundoff 에러로부터 더 안전하다.

행렬식 $\det$ 를 구하는 데도 사용된다. LU 분해 시 $\boldsymbol{L}$ 의 모든 대각성분을 $1$ 로 고정시키기 때문에,

$$
\det(\boldsymbol{A}) = \det (\boldsymbol{P}) \det(\boldsymbol{U}) = (-1)^n(P) \prod_{i=1}^n U_{ii}
$$

이다. 여기서 $n(P)$ 는 $\boldsymbol{P}$ 에 나타나는 치환의 횟수이다.


</br>


### PLU 분해

$n \times n$ 행렬 $\boldsymbol{A}$ 를 생각하자. 1 행에 대해 피버팅을 수행한다. 이를 $\boldsymbol{B}=\boldsymbol{PA}$ 라 하자. 따라서 $B_{11}= b_1 \ne 0$ 이다. 행렬 $\boldsymbol{B}$ 와 $\boldsymbol{L},\,\boldsymbol{U}$ 를 1행, 1열과 나머지 부분행렬로 아래와 같이 구분한다.

$$
\boldsymbol{B}=\left[\begin{array}{cc} b_1 & \boldsymbol{r}^T \\ \boldsymbol{c} & \boldsymbol{C}\end{array}\right],\qquad \boldsymbol{L}=\begin{bmatrix} 1 & 0 \\ \boldsymbol{l} & \boldsymbol{L}_1\end{bmatrix}, \qquad \boldsymbol{U} = \begin{bmatrix} u_1 & \boldsymbol{u}^T \\ 0 & \boldsymbol{U}_1\\\end{bmatrix}
$$

$\boldsymbol{PA} =\boldsymbol{B} = \boldsymbol{LU}$ 라 하면 다음을 얻는다.

$$
\begin{aligned}
u_1 & = b_1, \\
\boldsymbol{u} &= \boldsymbol{r}, \\
u_1 \boldsymbol{l} &= \boldsymbol{c}, \\
\boldsymbol{l \cdot u}^T + \boldsymbol{L}_1 \boldsymbol{U}_1 &= \boldsymbol{C}
\end{aligned}
$$

이를 통해 $\boldsymbol{L}$ 과 $\boldsymbol{U}$ 의 1행과 1열이 결정되며, $(n-1)\times (n-1)$ 행렬인 $\boldsymbol{L}_1\boldsymbol{U}_1$ 이 결정된다. $\boldsymbol{L}_1\boldsymbol{U}_1$ 에 대해 위의 과정을 반복적으로 수행하면, 결국 $\boldsymbol{P}$, $\boldsymbol{L}$, $\boldsymbol{U}$ 를 얻을 수 있다. 이것을 수행하는 코드는 다음과 같다.

~~~julia
function PLU(A::Matrix{T}; eptols = 1.0e-10) where T<:Real
    M, N = size(A)
    @assert M == N

    L, P, U = one(A), one(A), zero(A)
    B = copy(A)
    
    for i in 1:(M-1)
        p = argmax(abs.(B[i:end, i])) + i -1
        
        if abs(B[p, i]) < eptols
            error("Singularity error")    
        end

        P[i,:], P[p, :] = P[p, :], P[i, :]
        B[i,:], B[p, :] = B[p, :], B[i, :]
        
        if i>1
            L[i,1:i-1], L[p, 1:i-1] = L[p, 1:i-1], L[i, 1:i-1]
        end
        
        U[i, i] = B[i, i]
        U[i, (i+1):end] = B[i, (i+1):end]
        L[(i+1):end, i] = B[(i+1):end, i] / B[i, i]
        B[(i+1):end, (i+1):end] = B[(i+1):end, (i+1):end] - (L[(i+1):end, i:i] * U[i:i, (i+1):end])
    end
    U[M, M] = B[M, M]
    return P, L, U
end
~~~

::: {.callout-warning}
이 코드는 이해를 돕기 위한 코드로, PLU 를 정상적으로 계산 해 주지만 효율적인 코드는 아니다.
:::

</br>

### 복잡도 분석

역시 피봇이 없을 때를 분석한다. $k$ 번째 행에 대해 $n-k$ 번의 나누기와, $(n-k)^2$ 번의 곱하기 및 빼기를 수행하므로,

$$
T(n) = \sum_{k=1}^{n-1} (n-k) + 2(n-k)^2 = O\left(\dfrac{n^3}{3}\right) = O(n^3)
$$

이다. 따라서 가우스-요르단 소거법과 복잡도가 같다.

</br>

### 왜 LU 인가?

가우스 소거법과 LU 분해는 복잡도가 같다. 그러나 많은 경우 선형시스템을 푼다는 것은 시스템 행렬 $\boldsymbol{A}$ 가 주어진 상태에서 $\boldsymbol{b}$ 가 변함에 따라 $\boldsymbol{Ax}=\boldsymbol{b}$ 를 만족하는 $\boldsymbol{x}$ 를 찾는다. 가우스 소거법을 이용하는 경우라면 매번 $O(n^3)$ 복잡도의 계산을 해 주어야 한다. LU 분해의 경우 $\boldsymbol{A}=\boldsymbol{LU}$ (혹은 $\boldsymbol{A}=\boldsymbol{P}^{-1}\boldsymbol{LU}$) 에 대해 $\boldsymbol{L}$, $\boldsymbol{U}$ 가 정해져 있기 때문에 각각 한번의 상삼각행렬과 하삼각행렬에 대해 풀어주면 된다. 상삼각 행렬과 하삼각 행렬의 복잡도는 $O(n^2)$ 이므로 주어진 시스템 행렬에 대해 많은 계산을 할 때는 LU 분해가 훨씬 유리하다.

</br>

### LDU 분해

LU 분해에서 상삼각해렬 $\boldsymbol{U}$ 를 대각행렬 $\boldsymbol{D}$ 와 대각성분이 $1$ 인 상삼각행렬 $\boldsymbol{U}'$ 의 곱으로 나타 낼 수 있다. 이를 LDU 분해라고 한다.
$$
\underbrace{\begin{bmatrix} U_{11} & U_{12} & \cdots & U_{1n} \\ 0 & U_{22} & \cdots & U_{2n} \\ & & \ddots & \\ 0 & 0 & \cdots & U_{nn}\end{bmatrix}}_{\Large\boldsymbol{U}} = \underbrace{\begin{bmatrix} U_{11} &  &  & 0 \\   & U_{22} &  &  \\ & & \ddots & \\ 0& & & U_{nn}\end{bmatrix}}_{\Large{\boldsymbol{D}}} \underbrace{\begin{bmatrix} 1 & U_{12}/U_{11}& \cdots & U_{1n}/U_{11} \\ 0 & 1 & \cdots & U_{2n}/U_{22} \\ & & \ddots & \\ 0 & 0 & \cdots & 1\end{bmatrix}}_{\Large\boldsymbol{U}'}
$$



</br>

## 상삼각 행렬과 하삼각 행렬과 선형방정식

선형 시스템을 푸는 가장 단순한 형태부터 다뤄보기로 하자. $n\times n$ 정사각 행렬에 대해 상삼각 행렬(upper triangular matrix)은 (대각성분을 포함하지 않은) 대각 성분의 아랫부분이 모두 $0$ 인 행렬을 말한다, 하삼각 행렬(lower triangular matrix)은 대각성분의 윗부분이 모두 $0$ 인 행렬을 말한다. 예를 들어 
$$
\boldsymbol{U}=\left[\begin{array}{rrr} 1 & 3 & 4 \\ 0 & 2 & 1 \\ 0 & 0 & -1\end{array}\right], \qquad \boldsymbol{L}=\left[\begin{array}{rrr} 4 & 0 & 0 \\ 0 & 1 & 0 \\ -1 & 0 & -3\end{array} \right]
$$ 

에서 $\boldsymbol{U}$ 는 상삼각행렬, $\boldsymbol{L}$ 은 하삼각행렬이다. 두 삼각행렬에 대해 다음이 성립한다.



::: {#prp-properties_of_triangular_matrix}

행렬 $\boldsymbol{A} \in \mathbb{F}^{n \times n}$ 가 상삼각 행렬 혹은 하 삼각 행렬일 때 다음은 동치이다.

1. $\det (\boldsymbol{A}) = \prod_{i=1}^n A_{ii} \ne 0$

2. $\boldsymbol{A}$ 는 가역행렬이다.

3. $\boldsymbol{b}\in \mathbb{F}^{n \times 1}$ 에 대해 $\boldsymbol{Ax}=\boldsymbol{b}$ 를 만족하는 $\boldsymbol{x}$ 가 유일하게 정해진다.
:::

</br>

### 하삼각 행렬에서의 선형방정식의 풀이

$\boldsymbol{L}\in \mathbb{F}^{n \times n}$ 과 $\boldsymbol{b}\in \mathbb{F}^{n \times 1}$ 에 대해 $\boldsymbol{Lx}=\boldsymbol{b}$ 를 만족하는 $\boldsymbol{x}\in \mathbb{F}^{n\times 1}$ 을 구해보자.

$$
\begin{bmatrix} L_{11} & & & \\ L_{21} & L_{22}  & & \\ \vdots & & \ddots & \\ L_{n1} & L_{n2} & \cdots & L_{nn} \end{bmatrix} \begin{bmatrix} x_1\\ x_2 \\ \vdots \\x_n \end{bmatrix} = \begin{bmatrix} b_1 \\ b_2 \\ \vdots \\ b_n \end{bmatrix}
$$

에 대해, 

$$
\begin{aligned}
L_{11} x_1 &= b_1, \\
L_{21} x_1 + L_{22} x_2 &= b_2, \\
\vdots \\
L_{k1} x_k + L_{k2}x_2 + \cdots + L_{kk}x_k &= b_k,\\
\vdots \\
L_{n1}x_1 + L_{n2}x_2 + \cdots + L_{nn}x_n &= b_n
\end{aligned}
$$
를 얻는다. 첫번째 식으로부터 $x_1$ 을 구할 수 있으며, 두번째 식에서는 이미 구한 $x_1$ 을 이용하여 $x_2$ 를 구할 수 있다. 즉 $x_1,\ldots,\,x_k$ 까지 구했다면 이미 알고 있는 $\boldsymbol{L}$ 과 $\boldsymbol{b}$ 의 성분을 이용하여 $x_{k+1}$ 을 구할 수 있다. 이를 정리하면 다음과 같다.
$$
\begin{aligned}
x_1 &= \dfrac{b_1}{L_{11}}, \\
x_k &= \dfrac{1}{L_{kk}} \left( b_k - \sum_{i=1}^{k-1} L_{ki}x_{i}\right),\,k=2,\ldots,\,n
\end{aligned}
$$


</br>

### 상삼각 행렬의 선형방정식의 풀이

$\boldsymbol{U}\in \mathbb{F}^{n \times n}$ 과 $\boldsymbol{b}\in \mathbb{F}^{n \times 1}$ 에 대해 $\boldsymbol{Lx}=\boldsymbol{b}$ 를 만족하는 $\boldsymbol{x}\in \mathbb{F}^{n\times 1}$ 을 구해보자.

$$
\begin{bmatrix} U_{11} & U_{12} &\cdots & U_{11} \\  & U_{22}  &\cdots  & U_{21} \\  & & \ddots & \vdots\\  & &  & U_{nn} \end{bmatrix} \begin{bmatrix} x_1\\ x_2 \\ \vdots \\x_n \end{bmatrix} = \begin{bmatrix} b_1 \\ b_2 \\ \vdots \\ b_n \end{bmatrix}
$$

에 대해, 

$$
\begin{aligned}
U_{nn} x_n &= b_n, \\
U_{n-1,n-1} x_{n-1} + U_{n-1,n} x_n &= b_{n-1}, \\
\vdots \\
U_{kk} x_k + U_{k,k+1}x_{k+1} + \cdots + U_{kn}x_n &= b_k,\\
\vdots \\
U_{11}x_1 + U_{12}x_2 + \cdots + U_{1n}x_1 &= b_1
\end{aligned}
$$
를 얻는다. 첫번째 식으로부터 $x_n$ 을 구할 수 있으며,  두번째 식에서는 이미 구한 $x_{n}$ 을 이용하여 $x_{n-1}$ 를 구할 수 있다. 즉 $x_{n},\ldots,\,x_{k}$ 까지 구했다면 이미 알고 있는 $\boldsymbol{L}$ 과 $\boldsymbol{b}$ 의 성분을 이용하여 $x_{k-1}$ 을 구할 수 있다. 이를 정리하면 다음과 같다.
$$
\begin{aligned}
x_n &= \dfrac{b_n}{U_{nn}}, \\
x_k &= \dfrac{1}{U_{kk}} \left( b_k - \sum_{i=k+1}^{n} U_{ki}x_{i}\right),\,k=n-1,\,n-2,\ldots,\,1
\end{aligned}
$$



임을 안다. 

### 코드 분석

이것을 julia 로 구현하면 아래와 같다. 상삼각행렬에 대해서는 `Us()`, 하삼각행렬에 대해서는 `Ls()` 함수로 구현하였다.

```{.julia code-line-numbers="true"}
"""
    Ls(A, b)

하삼각행렬 A 에 대해 Ax=b 의 해 x 를 구한다.
"""
function Ls(L::Matrix{T}, b::Vector{T}) where T<:Number
    M, N = size(L)    
    @assert M == N == length(b)
    
    if zero(T) in diag(L)
        error("Input matrix has zero diagonal element")
    end
    
    x = zeros(T, N)
    x[1] = b[1]/L[1, 1]
    for i in 2:N
        x[i] = b[i]
        for j in 1:1:(i-1)
            x[i] -= L[i, j]*x[j]
        end
        x[i] = x[i]/L[i, i]
    end
    return x
end

"""
    Us(A, b)

상삼각행렬 A 에 대해 Ax=b 의 해 x 를 구한다.
"""
function Us(U::Matrix{T}, b::Vector{T}) where T<:Number
    M, N = size(U)    
    @assert M == N == length(b)
    
    if zero(T) in diag(U)
        error("Input matrix has zero diagonal element")
    end
    
    x = zeros(T, N)
    x[N] = b[N]/U[N, N]

    for i in (N-1):-1:1
        x[i] = b[i]
        for j in (i+1):1:N
            x[i] -= U[i, j] * x[j]
        end
        x[i] = x[i]/U[i, i]
    end
    return x
end
```

각 함수의 첫번째 라인 `M, N = size(L)` 을 보자. `size(L)` 함수는 인자로 주어지는 배열(Array) `L` 의 차원을 튜플(tuple) 로 반환한다. `@assert` 와 같이 `@` 로 시작하는 명령어는 매크로 라고 하며, `@assert` 매크로는 뒤에 오는 식을 평가하여 참(`true`) 가 아니면 에러를 발생하고 함수를 종료한다. `Us()` 에서 이 줄은 `U` 가 정사각 행렬이며 그 행의 갯수가 `b` 의 성분의 갯수가 참이어야 함수를 수행한다는 표현이다.

두번째 단락의 

```julia
if zero(T) in diag(L)
    error("Input matrix has zero diagonal element")
end
```

에서 `diag(L)` 는 행렬 `U` 의 대각성분을 리턴한다. 따라서 위의 조건식은 $0$ 이 대각성분에 존재한다면 에러를 발생시킨다는 의미이다.


</br>

이제 $\boldsymbol{L}=\begin{bmatrix} 1 & 0 & 0 & 0 \\ 2 & 2 & 0 & 0 \\3 & 1 & -3 & 0 \\5 & -2 & 3 & 7 \end{bmatrix}$  와 $\boldsymbol{b}= \begin{bmatrix} 3.1 \\  5.3 \\ -2.2 \\ 6.0 \end{bmatrix}$ 에 대해 풀어보면

```julia
L = [1. 0. 0. 0.; 2. 2. 0. 0.; 3. 1. -3. 0.; 5. -2. 3. 7.]
b = [3.1; 5.3; -2.2; 6.0]
x = Ls(L, b) 
```

를 통해 $\boldsymbol{x}$ 를 구할 수 있다. 이제 $\boldsymbol{A\cdot x}$ 가 $\boldsymbol{b}$ 와 같은지 확인하기 위해 `A*x` 를 실행해보면,

```sh
4-element Vector{Float64}:
  3.1
  5.3
 -2.2
  6.0
```

의 결과가 나오므로 `b` 를 잘 구했다. 이제 약간 극단적인 경우를 살펴 보자. 하삼각 행렬에서 대각성분이 0 이 아닌 다른 성분에 비해 매우 작은 경우이다.

```julia
A1= [1.0 0 0; 1.0e8 1 0; 1.0e8 1.0e8 1]
b1 = [1; 1; 1.0]
x1 = Ls(A1, b1)
```

이 때 구한 `x1` 은 다음과 같다.

```sh
3-element Vector{Float64}:
  1.0
 -9.9999999e7
  9.9999998e15
```

이 경우 `A1*x1` 을 수행하면,

```sh
3-element Vector{Float64}:
 1.0
 1.0
 0.0
```

가 나와 실제 `b1` 값과 차이가 남을 알 수 있다. 이것은 64 비트 부동소수의 유효자리수 때문이다. 직접 손으로 계산해 보면 알겠지만 `x1` 은 정확히 계산이 되었다. 다만 `A1*x1` 의 세번째

$$
1.0\times 10^8 \times 1 - 9.9999999\times 10^15 + (1- 1.0\times 10^8 \times 1 + 9.9999999\times 10^15)
$$

를 계산하는데 뒤의 괄호 안을 계산 할 때 $9.9999999\times 10^15$ 라는 숫자가 너무 커서 1 정도의 차이를 표현 할 수 없다. `Float64` 에서 `9.9e16+1` 은 `9.9e16` 과 구별 할 수 없다. 


</br>

### 계산 복잡도 분석

하삼각 행렬의 경우 $x_1$ 을 계산하는데흔 한번의 나눗셈, $k\ne 1$ 일 때 $x_k$ 를 계산하는데 스칼라곱이 $k-1$ 번, 덧셈과 뺄셈이 $k$ 번, 나눗셈 $1$ 번이 필요하므로 모두 $2k$ 번의 계신이 필요하다. $n \times n$ 하삼각 행렬의 행렬식에 대해서

$$
T(n) = 1 + \sum_{k=2}^n 2k = n^2 + n -1 = O(n^2)
$$

이다.

</br>

<!-- ### 부동소수점 연산에서의 에러 전파 (Error propagation)

여기서는 앞의 마지막 부분에서의 상삼각행렬에서 오차가 크게 나오는 경우의 원인을 살펴보기로 하자. 우선 사칙연산에 대해 에러가 어떻게 변해가는지 알아보자.

어떤 값 실수$a$ 에 대해 컴퓨터가 표현한 값을 $a_F$ 라 하자. 우리는 `Float64` 에서 $a$ 의 유효숫자의 16번째 자리 정도에서 오차가 나올 수 있음을 알고 있다. 즉 $\dfrac{|a-a_F|}{|a|} \lesssim 10^{-15}$ 임을 알고 있다. 이 때의 오차를 $\Delta a = a-a_F$ 라 하자. 그렇다면 $a -|\Delta a| \lesssim a_F\lesssim a+|\Delta a|$ 이다. $b$ 에 대해서도 $\Delta b$ 만큼의 오차로 표현된다고 하자. 역시 $\left|\dfrac{\Delta b}{b}\right| = \left| \dfrac{b-b_F}{b}\right| \lesssim 10^{-15}$ 이다.

우리가 계산하고자 하는것이 $a+b$ 라면, 1) 실제 컴퓨터가 계산하고자 하는 것은 $a_F+b_F$ 이며, 많은 경우 $(a+b)_F\ne a_F+b_F$ 이다. 일단

$$
\begin{aligned}
(a+b) - (|\Delta a|+|\Delta b|) \lesssim a_F+b_F \lesssim (a+b) + (|\Delta a| + |\Delta b|) \\ 
(a-b) - (|\Delta a|+|\Delta b|) \lesssim a_F-b_F \lesssim (a-b) + (|\Delta a| + |\Delta b|)
\end{aligned}
$$

임을 안다. 이제 $ab$ 를 계산했을 때의 오차를 살펴 보자. $a>0,\,b>0$ 이라면, $a \pm \Delta a>0,\, b \pm \Delta b >0$ 이므로,

$$
\begin{aligned}
& ab-b(\Delta a)-a(\Delta b) + (\Delta a)(\Delta b) \lesssim a_F b_F \lesssim ab+b(\Delta a)+a(\Delta b) + (\Delta a)(\Delta b) \\[5pt]
\implies & |ab-a_F b_F| \lesssim |a(\Delta b)| + |b(\Delta a) |
\end{aligned}
$$

이다. 이제 나누기에 대해서는 테일러 전개를 이용하면 $\dfrac{1}{b+|\Delta b|} \approx \dfrac{1}{b}\left(1-\dfrac{|\Delta b|}{b}\right)$ 임을 알기때문에,

$$
\begin{aligned}
&\dfrac{a}{b} -\dfrac{|\Delta a|}{b} - \dfrac{a|\Delta b|}{b^2} \lesssim \dfrac{a_F}{b_F} \lesssim \dfrac{a}{b}+ \dfrac{|\Delta a|}{b} + \dfrac{a|\Delta b|}{b^2} \\[7pt]
\implies &\left|\dfrac{a}{b} -\dfrac{a_F}{b_F}\right| \lesssim \left|\dfrac{\Delta{a}}{b}\right| + \left|\dfrac{a|\Delta b|}{b}\right|
\end{aligned}
$$

임을 안다.  $\Delta a \approx 10^{-16} |a|$ 이므로, $|ab-a_F b_F| \lesssim 2|ab|\times 10^{-16}$ 이며 $\left| \dfrac{a}{b} -\dfrac{a_F}{b_F}\right| \lesssim 2\left | \dfrac{a}{b} \right| \times 10^{-16}$ 이다. 이 경우 $|a| \gg |b|$ 이면 $\left| \dfrac{a}{b} -\dfrac{a_F}{b_F}\right|$ 가 생각보다 커질 수 있음을 알수 있고, 또 조심해야 한다.

$3 \times 3$ 상삼각 행렬에서 $\displaystyle x_i = \dfrac{b_i}{A_{ii}} - \sum_{j=i+1}^n \dfrac{A_{ij}}{A_{ii}} x_{j}$  에서 $\dfrac{A_{ij}}{A_{ii}} \approx 10^{8}$ 이라면  $x_{n-1} \approx O(10^{8})$, $x_{n-2}\approx O(10^{16})$ 일 수 있다. 그렇게 되면 $\Delta x_{n-2}\approx O(1)$ 이 되므로 $\boldsymbol{Ax}$ 계산에서 그 오차가 첫번째 유효숫자에 영향을 끼칠 정도로 커질 수 있다.

즉 상삼각행렬이나 하삼각 행렬로 선형 시스템을 풀 경우 시스템을 기술하는 행렬의 대각성분이 작으면 계산시 그 오차가 매우 커질수 있다. 이 문제에 대해서는 뒤에 나올 가우스 소거법과 LU 분해에서 자세히 다루도록 하자. -->

</br>
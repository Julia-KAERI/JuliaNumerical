## 가우스-요르단 소거법

$m \times n$ 행렬 $\boldsymbol{A}$ 와 $n \times k$ 행렬 $\boldsymbol{X}$, $m \times k$ 행렬 $B$ 가 $\boldsymbol{AX}=\boldsymbol{B}$ 를 만족하며 $\boldsymbol{L}$ 이 $n \times n$ 가역행렬 일 때 다음이 성립한다.

$$
\boldsymbol{AX}=\boldsymbol{B} \iff  \boldsymbol{LAX} = \boldsymbol{LB}
$$

만약 $k=1$ 이라면, 즉 $n \times 1$ 행렬 $\boldsymbol{x}$,\, $m \times 1$ 행렬 $\boldsymbol{b}$ 에 대해,

$$
\boldsymbol{Ax}=\boldsymbol{b} \iff  \boldsymbol{LAx} = \boldsymbol{Lb}
$$

가 성립한다.
즉 주어진 $\boldsymbol{A}$ 와 $\boldsymbol{b}$ 에 대해 가역 행렬 $\boldsymbol{L}$ 을 통해 $\boldsymbol{LA}$ 를 매우 간단하게 만든다면 $\boldsymbol{LAx}=\boldsymbol{Lb}$ 를 만족하는 $\boldsymbol{x}$ 를 쉽게 구할 수 있으며, 이 $\boldsymbol{x}$ 가 우리가 구하고자하는 선형방정식의 해이다. 


</br>


### 행 사다리꼴 행렬, 행 간소 사다리꼴 행렬과 행 기본 연산

#### 행 사다리꼴과  행 간소 사다리꼴

행 사다리꼴 행렬(row echelon form matrix)은 다음의 조건을 만족하는 행렬이다.

1. 영벡터가 존재할 경우 이 영벡터는 영벡터가 아닌 행벡터의 아래에 위치한다. 

2. 행렬의 행벡터가 영벡터가 아닐 때, 처음으로 나타나는 0 이 아닌 성분을 **선행 성분**이라 한다. 윗 행의 선행 성분은 아래 행 전체의 각각의 선행성분보다 앞서 존재한다.


아래의 행렬 $\boldsymbol{A}_1,\,\boldsymbol{A}_2$ 는 각각 1, 2 번 조건을 거스르는 행렬이므로 행사다리꼴이 아니다. (선행 성분을 밑줄로 표시하였다.)

$$
\begin{aligned}
\boldsymbol{A}_1 &= \begin{bmatrix} \underline{1} & 2 & 0 \\0 & 0 & 0 \\ 0 & \underline{1} & 0\end{bmatrix}, \\
\boldsymbol{A}_2 &= \begin{bmatrix} 0 & 0 & \underline{1} \\ \underline{1} & 0 & 2\end{bmatrix}. 
\end{aligned}
$$

</br>

행 간소 사다리꼴 행렬(row-reduced echelon form matrix)은 행 사다리꼴 행렬의 조건에 더해 다음의 조건이 추가된다.

1. 각 행의 선행성분은 $1$ 이다. 이를 **선행 1 성분** 이라 하자.

2. 선행 1 성분이 존재하는 열은 선행성분을 제외한 모든 성분이 $0$ 이다.

</br>

#### 기본 행 연산

우리는 선형대수학으로부터 모든 행렬은 세가지의 기본 행 연산(elementary row operation)을 통해 행 사다리꼴과 행 간소 사다리꼴 행렬로 만들 수 있으며, 행렬의 행 간소 사다리꼴은 유일하다는 것을 안다. 이때의 기본 행 연산은 다음과 같다.

1. 두 행의 위치를 서로 바꾼다. ($\hat{L}_1$ 연산)

2. 특정 행에 $0$ 이 아닌 스칼라를 곱한다. ($\hat{L}_2$ 연산)

3. 한 행에 다른 행의 스칼라곱을 더한다. ($\hat{L}_3$ 연산)

</br>

$m \times n$ 행렬에 대한 행 기본 연산은 $m \times m$ 행렬로 표현된다. $k$ 번째 행과 $l$ 번째 행의 위치를 서로 바꾸는 행렬 $\boldsymbol{L}_1 (k, l)$ 는
$$
[\boldsymbol{L}_1(k,\,l)]_{i,\, j} = \left\{\begin{array}{ll} 1 \qquad &\text{if } i = j \ne k, \text{ and }i = j \ne l \\ 1 & \text{if } i = k,\, j = l,\\ 1 & \text{if } j = k,\, i = l, \\ 0 & \text{otherwise}\end{array} \right.
$$

이며 $4 \times 4$ 행렬에서 1 행과 3행을 교환하는 행렬 $\boldsymbol{L}_1 (1, 3)$ 은 다음과 같다.

$$
\boldsymbol{L}_1(1, 3)
=\begin{bmatrix}
0 & 0 & 1 & 0 \\ 0 & 1 & 0 & 0 \\ 1 & 0 & 0 & 0\\  0 & 0 & 0 & 1
\end{bmatrix} .
$$

$k$ 번째 행에 스칼라 $c$ 를 곱하는 연산을 나타내는 행렬 $\boldsymbol{L}_2(k, c)$ 는

$$
[\boldsymbol{L}_2(k,\, c)]_{i,\,j}= \left\{\begin{array}{ll} 1 \qquad & \text{if } i=j\ne k,\, \\ c &\text{if } i=j=k,\,\\ 0 &\text{otherwise}\end{array}\right.
$$

이며 $4\times 4$ 행렬에서 2행에 스칼라 $c$ 를 곱하는 행렬은 $\boldsymbol{L}_2 (2, c)$ 는 다음과 같다.

$$
[\boldsymbol{L}_2 (2,\,c)] = \begin{bmatrix} 1 & 0 & 0 & 0 \\ 0 & 2 & 0 & 0 \\ 0 & 0 & 1 & 0 \\ 0 & 0 & 0 & 1 \end{bmatrix}.
$$

$l$ 번째 행에 $c$ 를 곱한 것을 $k$ 번째 행에 더하는 행렬 $\boldsymbol{L}_3 (k, l, c)$ 은

$$
[\boldsymbol{L}_3 (k,\,l,\,c)]_{i,\,j} = \left\{ \begin{array}{ll}1 \qquad & \text{if } i=j \,,\\
c & \text{if } i = k, j = l\,, \\ 0 &\text{oterwise}  \end{array}\right.
$$

이며 $4 \times 4$ 행렬에서 3 행에 $c$ 를 곱해 $1$ 행에 더하는 행렬 $\boldsymbol{R}$ 은 다음과 같다.

$$
\boldsymbol{L}_3 (1, 3, c) = \begin{bmatrix} 1 & 0 & c & 0 \\ 0 & 1 & 0 & 0 \\ 0 & 0 & 1 & 0 \\ 0 & 0 & 0 & 1\end{bmatrix}.
$$

모든 행 기본 연산은 $\boldsymbol{L}_1,\,\boldsymbol{L}_2,\,\boldsymbol{L}_3$ 가역행렬이며 그 역행렬은 다음과 같다.

$$
\begin{aligned}
\left[\boldsymbol{L}_1(k, l) \right]^{-1} &= \boldsymbol{L}_1(k, l), \\
\left[\boldsymbol{L}_2(k, c) \right]^{-1} &= \boldsymbol{L}_2(k, 1/c), \\
\left[\boldsymbol{L}_3(k, l, c) \right]^{-1} &= \boldsymbol{L}_3(k, l, -c),
\end{aligned}
$$

</br>

### 가우스-요르단 소거법 (Gauss-Jordan elimination method)

가우스 소거법은 기본 행 연산을 유한번 시행하여 행렬을 행 사다리꼴(Row echelon form) 행렬로 변환시키는 것을 말한다. 목적이 사다리꼴이 아닌 행 간소 사다리꼴(Row-reduced echelon form) 일 경우 가우스-요르단 소거법이라 한다. 사람에 따라 가우스-요르단 소거법을 가우스 소거법이라고 하는데 여기서는 둘을 구분하기로 하자. 정사각행렬의 경우 가우스 소거법에 의해 상삼각행렬로 변한다.

이제 $m\times n$ 행렬 $\boldsymbol{A}$ 에 대한 가우스 소거법을 생각해보자. $\boldsymbol{A}$ 가 영행렬이면 의미가 없으므로 영행렬이 아닐 때만 생각한다. 


**P<sub>1</sub>-1.** 영벡터가 아닌 첫번째 열벡터를 찾는다. 그 열벡터의 첫번째 행이 $0$ 이거나 절대값이 작을 경우 그 열벡터에서 적당한 $0$ 이 아닌 행을 찾아 그 행과 첫번째 행을 교환한다($\hat{L}_1$ 연산). 이것을 **피보팅 (pivoting)** 이라 한다. 보통 첫번째 행이 $0$ 이 아니더라도 절대값이 가장 큰 값을 찾아 교환한다. 예를 들어

$$
\boldsymbol{A}=\begin{bmatrix} 1 & 3 & 2 \\ 0 & 2 & 4 \\ 4 & 1 & 3\end{bmatrix}
$$

일 경우, 첫번째 열벡터가 영벡터가 아니며, 이 열벡터의 첫번째 행이 $0$ 이 아니지만 이 열벡터에 절대값이 가장 큰 $4$ 가 성분으로 존재하므로 첫번째 행과 마지막 행을 교환한다. 이를 $\boldsymbol{A}_1$ 이라 하자. 이 때 선행 성분은 $4$ 이다.
$$
\boldsymbol{A}_{1-1}=\begin{bmatrix} \underline{4} & 1 & 3\\ 1 & 3 & 2 \\ 0 & 2 & 4\end{bmatrix}
$$

**P<sub>1</sub>-2.** 선행성분으로 첫번째 행벡터를 나누어준다($\hat{L}_2$ 연산). 이제 첫번째 행의 첫번째 성분은 1이다(선행 1 성분). 여기까지 수행한 행렬을 $\boldsymbol{A}_{1-2}$ 라고 하면 다음과 같다.

$$
\boldsymbol{A}_{1-2}=\begin{bmatrix} \underline{1} & 1/4 & 3/4 \\ 1 & 3 & 2 \\ 0 & 2 & 4\end{bmatrix}.
$$

**P<sub>1</sub>-3.** 첫번째 행벡터의 선행 1 성분의 열 위치를 $l_1$ 이라 하자. $j=2,\ldots,\,m$ 에 대해 $\hat{L}_3 (j, i, -A_{j,l_1})$ 를 적용하면 $l_1$ 열은 첫번째 성분을 제외하면 모두 $0$ 이 된다. 첫번째 행에 대한 마지막 과정이므로 $\boldsymbol{A}_1$ 이라 하면 다음과 같다.

$$
\boldsymbol{A}_1=\begin{bmatrix} \underline{1} & 1/4 & 3/4 \\ 0 & 3/4 & 5/4 \\ 0 & 2 & 4\end{bmatrix}.
$$

</br>

이제 행렬 $\boldsymbol{A}_k$ 가 1) $1$ 행부터 $k$ 행까지는 1) 행 간소 사다리꼴 행렬이며, 2) $k$ 행의 선행 1 성분의 위치가 $l_k$ 열일 때 $k$ 행 아래의 모든 행이 1열부터 $l_k$ 열까지 $0$ 이라고 하자. 이에 다음 **P<sub>k-1</sub>-1.**, **P<sub>k-1</sub>-2.**, **P<sub>k-1</sub>-1.** 과정을 수행한다.

**P<sub>k+1</sub>-1.** $k+1$ 행부터 $m$ 행까지만 생각한다. 여기서 첫번째 $0$ 벡터가 아닌 열벡터를 찾는다. 당연히 이 열벡터는 $l_k$ 열보다 오른쪽의 열이다. 이것을 $l_{k+1}$ 열이라고 하자. 이 열에서 가장 절대값이 큰 성분의 행과 $k+1$ 행을 교환한다 ($\hat{L}_1$ 연산). 만약 존재하지 않는다면 $k+1$ 행부터 마지막 행 까지의 모든 행벡터가 영벡터이므로 과정을 더 이상 진행시키지 않는다.


**P<sub>k+1</sub>-2.** 교환된 $k+1$ 행을 가장 처음 $0$ 이 아닌 성분으로 나눈다 ($\hat{L}_2$ 연산). 이제 첫번째 행의 첫번째 성분은 1이다.(선행 1 성분)  

**P<sub>k+1</sub>-3.** $k+1$ 행이 마지막 행이라면 더 이상 진행하지 않는다. 그렇지 않다면 $j=1, \ldots, \, k, k+2,\ldots,\,m$ 에 대해 $\hat{L}_3 (j, k+1, -A_{j,l_1})$ 를 적용하면 $l_{k+1}$ 열 의 $k+2$ 행 이하는 모두 $0$ 이 된다.  


이 과정을 수행한 후 $1$ 행부터 $k+1$ 행까지 행 간소 사다리꼴 형태가 됨을 알 수 있다. 이제 $m \times n$ 행렬에 대해 1 행부터 $m$ 행에 대해 위의 과정을 수행한다면 행렬의 행 간소 사다리꼴 형태를 얻을 수 있다.

우리는 가역행렬의 행 간소 사다리꼴이 항등행렬임을 안다. $n \times n$ 가역행렬 $\boldsymbol{A}$ 와 $n$ 차원 열벡터 $\boldsymbol{b}$ 에 대해 $\boldsymbol{Ax}=\boldsymbol{b}$ 를 만족하는 열벡터 $\boldsymbol{x}$ 를 찾는다고 하자. $\boldsymbol{A}$ 가 기본 행 연산 $\boldsymbol{E}_1, \ldots,\,\boldsymbol{E}_N$ 에 대해 행 간소 사다리꼴이 된다고 하면 

$$
\begin{aligned}
&\boldsymbol{E}_N \cdots \boldsymbol{E}_1 \boldsymbol{Ax} = \boldsymbol{E}_N \cdots \boldsymbol{E}_1 \boldsymbol{b} \\
\implies &\boldsymbol{x} = \boldsymbol{E}_N \cdots \boldsymbol{E}_1 \boldsymbol{b} 
\end{aligned}
$$

이다. 이 때 $\boldsymbol{E}=\boldsymbol{E}_N \cdots \boldsymbol{E}_1$ 라고 하면, $\boldsymbol{EA}=\boldsymbol{I}$ 이므로,

$$
\boldsymbol{E} = \boldsymbol{E}_N \cdots \boldsymbol{E}_1 = \boldsymbol{A}^{-1}
$$

이다. 즉 우리는 가우스-요르단 소거법을 통해 선형방정식을 풀 수 있을 뿐만 아니라, 역행렬도 구할 수 있다. 

이제 가우스-요르단 소거법을 수행하는 함수를 만들어 보자. 행렬 $\boldsymbol{A}$ 와 열행렬 혹은 행렬 $\boldsymbol{B}$ 에 대해 $\boldsymbol{A}$ 를 행 간소 사다리꼴로 만드는 프로세스를 $\begin{bmatrix}\boldsymbol{A} & \boldsymbol{B}\end{bmatrix}$ 에 대해 수행하도록 한다. 다만 $\boldsymbol{B}$ 는 선택적으로 입력 가능하다. 함수 `gauss_jordan_elimination` 을 아래에 구현하였다. 여기서 `eptols` 는 절대값이 작은 수로 피보팅 할 때 절대값이 이 수보다 작다면 `0` 과 차이가 없도록 간주한다.


```{.julia code-line-numbers="true"}
function gauss_jordan_elimination(A::Matrix{T}, b::Union{Nothing, Vector{T}, Matrix{T}}=nothing; eptols = 1.0e-10) where T<:Real
    M, N = size(A)

    if b ≠ nothing
        @assert M == size(b)[1]
        B = [A b]
    else
        B = A
    end
    
    ld = 0 #선행 1 성분의 column index

    for i in 1:M
        termination = true # 종료 조건
        for j in (ld+1):N
            p = argmax(abs.(B[i:end, j])) + i -1
            
            if abs(B[p, j]) > eptols
                B[i,:], B[p, :] = B[p, :], B[i,:]
                ld = j
                termination = false
                break
            end
        end

        if termination 
            break
        end
        
        B[i, :] .= B[i, :]./B[i, ld]
        
        # 선행 1 성분의 열을 자신을 제외하고는 제거
        for k in 1:M
            if k ≠ i 
                B[k, :] .= B[k, :] .- (B[k, ld].*B[i, :])
            end
        end
    end

    if b ≠ nothing 
         return B[:, 1:N], B[:,(N+1):end]
    else 
         return B
    end
end
```

</br>

### 계산 복잡도 분석

우선 피보팅 없이 $n \times n$ 행렬 $\boldsymbol{A}$ 와 $n$ 차원 벡터 $\boldsymbol{b}$ 에 대해 $\boldsymbol{Ax}=b$ 를 만족하는 $\boldsymbol{x}$ 를 가우스-요르단 소거법을 통해 구하는 데 필요한 계산복잡도를 알아보자. 우선 $n\times (n+1)$ 행렬 $\begin{bmatrix} \boldsymbol{A} & \boldsymbol{b}\end{bmatrix}$ 에 대해 수행하므로, 

우선 $k$ 번째 행에 대해 

1. $k$ 행을 대각성분 $A_{k,k}$ 으로 나누어 주는데 $n-k+2$ 번의 연산이 필요하며,
   
2. $k$ 행 아래의 $n-k$ 개의 행에 대해 $\hat{L}_3$ 연산을 통해 $k$ 열의 성분을 대각성분을 제외하고 모두 $0$ 으로 만드는데, 각각 나누기 한번과 빼기 한번, 두번의 연산이 소요되므로, $2(n-k)(n-k+2)$ 번의 스칼라 사칙연산이 필요하다 

따라서

$$
T(n) = \sum_{k=1}^n (n-k+2) + 2(n-k)(n-k+2) = O\left( \frac{2}{3}n^3 \right) = O(n^3)
$$

이다.

</br>

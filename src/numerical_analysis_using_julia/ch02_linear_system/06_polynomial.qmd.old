
## 일변수 다항식의 Julia 구현

이제 일변수 다항식 ($x$ 에 대한 다항식)을 특별한 자료형으로 Julia 언어에서 구현해보자. 다항식은 기본적인 함수일 뿐만 아니라 수치해석에도 널리 사용된다. 여기서는 다항식에 대한 객체를 만들어 앞으로도 사용하고자 한다. Julia 자체는 다항식에 대한 자료구조나 객체를 포함하지 않지만 2022 년 현재 [Polynomials.jl](https://github.com/JuliaMath/Polynomials.jl) 이라는 라이브러리가 널리 사용된다. 그러나 여기서는 이 책에서 계속 사용할 다항식 객체를 만들고자 한다.

</br>

### 익명함수를 이용한 간단한 구현

Julia 에서 함수는 1급 객체로, 변수에 할당 될 수 있으며, 타입을 가질 수 있고, 함수의 리턴값으로 사용 될 수 있다. 이를 이용하면 계수를 1차원 배열인 벡터로 전달하여 익명 함수를 리턴하는 함수를 작성 할 수 있다. 다음 `poly1` 함수는 다항식의 전체 계수 벡터 `coeff` 를 인자로 받아 `coeff[i]` 가 다항식의 $i-1$ 차 계수가 되는 함수를 리턴한다.

```julia
function poly1(coeff::Vector{T}) where T<:Number
    return x -> sum(coeff .* (x .^ (0:(length(coeff)-1))))
end
```

우리는 이 함수가 잘 작동함을 확인 할 수 있다.

```none
julia> ff = poly1([1.0, -2.0, 1.0])
#1 (generic function with 1 method)

julia> ff(1.0)
0.0
```

함수 시그니쳐의 `poly1(coeff::Vector{T}) where T<:Number` 에서 `poly1(coeff::Vector{T})` 는 `poly1` 함수가 `T` 타입의 벡터를 인자로 받는다는 뜻이며 뒤의 `where T<:Number` 는 `T` 가 `Number` 의 서브타입만을 허락한다는 의미이다. `Number` 는 추상 타입(abstract type) 이므로 변수에 할당 될 수 없다. 따라서 `coeff` 가 벡터가 아니거나, 수 타입에 대한 벡터가 아니면 에러가 발생한다.

```none
julia> poly1(3)
ERROR: MethodError: no method matching poly1(::Int64)

julia> poly1([sin, 1])
ERROR: MethodError: no method matching poly1(::Vector{Any})
```

`coeff` 가 벡터가 아니거나, 수의 벡터가 아니면 에러가 발생함을 알 수 있다.

`return` 뒤의 `return x::Number -> sum(coeff .* (x .^ (0:(length(coeff)-1))))` 구문은 익명함수를 만드는 구문이다. 수를 받아 다항식을 계산하는 익명 함수를 반환한다. 이렇게 하면 `ff = poly1([1.0, -2.0, 1.0])` 라 하면 `ff(x)` 는 $1-2x+x^2$ 를 나타내는 다항식이다. 이 다항식의 함수에서 리턴 타입은 `coeff` 와 `x` 의 타입의 연산 규칙에 다라 결정된다.

때에 따라서는 이것도 충분하며, 타입을 고려하지 않는다면 심지어 이것보다 간단한 버젼도 가능하다. 그러나 보통 다항식을 나타내는 자료구조를 생각하면, 최소한 다항식간의 덧셈, 뺄셈, 곱셈이 가능하면 좋을 것이다. 그리고 행렬의 다항식도 가능하다면 구현하면 좋을 것이다.

익명 함수로는 이것이 힘들다. `structure` 를 이용하여 다항식 객체를 만들어 보자. 이미 널리 사용되는 `Polynomials.jl` 패키지가 있으므로 `SimplePolynomial` 이라는 객체를 만들도록 하자.

</br>

### 객체를 이용한 다항식의 구현

```julia
using LinearAlgebra
import Base: evalpoly

struct SimplePolynomial{T}
    coeffs :: Vector{T}
    function SimplePolynomial(a::AbstractVector{T}) where T <: Number
        if length(a) == 0 
            return new{T}(zeros(T, 1))
        else 
            last_nz = findlast(!iszero, a)
            a_last = max(1, isnothing(last_nz) ? 0 : last_nz)
            return new{T}(a[1:a_last])
        end
    end
end
```

`SimplePolynomial` 은 immutable 한 객체로 구현되었다. 즉 `coeffs` 속성은 변경 될 수 없다.

```sh
julia> a = SimplePolynomial([1, 3])
SimplePolynomial{Int64}([1, 3])

julia> a.coeffs = [3.0, 4.0]
ERROR: setfield!: immutable struct of type SimplePolynomial cannot be changed
```

`struct` 구문 내부의 `function SimplePolynomial(coeff::AbstractVector{T}) where T <: Number` 에서 시작하는 구문은 내부생성자 (inner constructor) 구문이다. 여기서 `T` 의 타입을 `Number` 의 subtype 으로 제한한다.

이제 `SimplePolynomial` 객체를 이용하여 수 형식, 혹은 정사각 행렬에 대한 다항식을 계산하는 함수를 만들자.

```julia
function (p::SimplePolynomial)(x::T, use_evalpoly=true) where T <: Number
    return evalpoly(x, p.coeffs)
end

function (p::SimplePolynomial)(x::T) where T <: Matrix{N} where N<:Number
    r = UniformScaling(p.coeffs[1])
    @assert size(x)[1] == size(x)[2] # 정사각 행렬에 대해서만 가능하다.
    for i in 2:length(p.coeffs)
        @inbounds r +=  p.coeffs[i]*x^(i-1)
    end
    return r
end
```

단위행렬의 상수배를 나타내는 연산자 `UniformScaling`을 위해 `LinearAlgebra` 모듈을 임포트 했다. 정사각 행렬임을 확인하기 위해 `@assert size(x)[1] == size(x)[2]` 를 삽입하였다. REPL 에서의 아래의 결과를 보면 정확히 구현되었음을 알 수 있다.

```sh
julia> a1 = SimplePolynomial([1.0, 2.0, 3.0])
SimplePolynomial{Float64}([1.0, 2.0, 3.0])

julia> a1(1.0)
6.0

julia> a1([4 3; 2 4])
2×2 Matrix{Float64}:
 75.0  78.0
 52.0  75.0

julia> a1([4 3 3; 2 4 3])
ERROR: AssertionError: (size(x))[1] == (size(x))[2]
```

다항식의 덧셈, 뺄셈, 곱셈을 정의하기 전에 다항식의 차수에 관련된 값을 리턴하는 함수를 만들자. 일반적으로 배열은 `length` 함수로 원소의 갯수를 알 수 있는데, 다항식에서는 계수의 갯수-1 이 차수가 된다. `Base.length` 함수에 대한 디스패치를 작성하여 이 함수를 이용하자.

```julia
function Base.:length(b::P) where {P<: SimplePolynomial}
    return length(b.coeffs)
end
```

이제 `SimpllePolynomial` 객체 사이에 혹은 `SimplePolynomial` 객체와 상수간의 `+`, `-`, `*`, `/` 연산을 정의 할 수 있다. `/` 의 경우 일단은 다항식/상수 만을 정의한다. 이것에 대한 구현은 `polynomial.jl` 파일에 존재한다. Julia REPL 이나 Jupyter notebook 등에서 `include` 명령을 통해 사용 할 수 있다. 

```sh
include(path_to_polynomial.jl)
```

다항식 $p(x) = a_0 + a_1 x + \cdots + a_n x^n$ 일 때,

$$
\begin{aligned}
\dfrac{d}{dx}p(x) &= a_1 + 2a_2 x + \cdots + na_n x^{n-1},\\
\int_x p(t)\, dt &=a_0 x + \dfrac{a_1}{2}x^2 + \cdots + \dfrac{a_n}{n+1}x^{n+1} + \text{const.}
\end{aligned}
$$

임을 안다. 이것을 이용하여 다항식을 미분하는 함수 `differentiate(p::Polynomial{T})` 와 정적분 함수 `integrate(p::Polynomial{T}, c)` 함수를 구현하였다. 여기서 `c` 는 정적분의 상수항이다. 

</br>

### 근을 이용하여 다항식을 만들기

다항식 $p(x)$ 의 전체 근이 $x_1,\,x_2,\ldots,\,x_n$ 라고 하면 이 다항식은 상수 $c$ 에 대해

$$
p(x) = c \prod_{i=1}^n (x-x_i)
$$

의 꼴을 갖는다. 우리는 이미 다항식의 곱셈을 구현했으므로 이를 쉽게 구현 할 수 있다. 여기서는 $c=1$ 로 정해진 다항식을 리턴한다.

```julia
function polynomial_from_roots(xp::AbstractVector{T}) where T<:Number 
    r = one(T)
    for i in 1:length(xp) 
        @inbounds r = r* SimplePolynomial([-xp[i],  1])
    end
    return r
end
```

그렇다면, 

```sh
julia> pp3 = polynomial_from_roots([1.0, 1.0, 2.0])
SimplePolynomial :  + 1.0 x^3 - 4.0 x^2 + 5.0 x^1 - 2.0 
```

의 결과가 나온다. $(x-1)^2(x-2)= x^3-4x^2+5x-2$ 이므로 정확한 결과가 나왔다. 

</br>

다항식 객체의 기본 구조가 완성되었다. 앞으로 필요할 때 마다 다항식 객체에 대한 함수를 추가하도록 한다.

</br>



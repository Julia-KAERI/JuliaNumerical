## 다양한 행렬들


### 성긴행렬과 밀집행렬

수학적으로 **성긴행렬(혹은 희소행렬, sparse matrix)** 은 행렬 성분의 대다수가 0 인 행렬을 의미하며, 반대의 경우를 **밀집 행렬(dense matrix)** 이라고 한다. 우리가 지금까지 다룬 행렬들은 행렬의 모든 성분을 컴퓨터가 저장하였다. 그러나 행렬이 매우 큰 경우, 예를 들면 `Float64` 타입의 $100K \times 100K$($1K=1,000$) 행렬은 성분을 저장하는 데만 80 Gbytes 의 저장공간을 차지하므로 개인 컴퓨터에서는 처리가 거의 불가능하며, 실제로 많이 다루는 시스템은 이것보다 훨씬 클 수 가 있다. 다행히 우리가 관심있는 시스템 가운데 상당수는 행렬의 대부분의 성분이 $0$ 인데, 이 경우 행렬의 모든 성분을 저장하는 것이 아니라 $0$ 이 아닌 성분만을 그 인덱스와 함께 저장하여 더 작은 저장공간에서 더 빠르게 계산 할 수 있다. 수치해석에서는 이렇게 행렬의 인덱스와 값을 저장하고, 인덱스가 지정되지 않은 행렬을 $0$ 으로 간주하는 행렬을 성긴 행렬이라 하며, 우리가 지금 까지 다뤘던, 인덱스에 따라 순차적으로 성분을 저장하는 행렬을 밀집 행렬 (dense matrix) 이라 한다.

다차원 배열에 대해서도 성긴 배열을 생각 할 수 있으며 Julia 의 표준 라이브러리에 포함된 `SparseArrays` 모듈을 이용하여 1차원 배열인 성긴 벡터와, 2차원 배열인 성긴 행렬을 지원한다. Julia 에서의 희소행렬은 내부적으로 아래와 같이 구현되어 있다. 5개의 멤버를 갖는 구조체이며 행렬의 크기와, 행, 열, 값을 갖는다. `SmarseMatrixCSC` 의 `CSC` 는 희소행렬을 내부적으로 저장할 때 쓰는 일종의 압축 방식을 표현한다.

```julia
struct SparseMatrixCSC{Tv,Ti<:Integer} <: AbstractSparseMatrixCSC{Tv,Ti}
    m::Int                  # Number of rows
    n::Int                  # Number of columns
    colptr::Vector{Ti}      # Column j is in colptr[j]:(colptr[j+1]-1)
    rowval::Vector{Ti}      # Row indices of stored values
    nzval::Vector{Tv}       # Stored values, typically nonzeros
end
```

가장 기본적인 생성 방법은 `sparse()` 함수를 이용하는 것이다. 아래의 예에서 `A` 는 밀집행렬이며 이것을 `sparse` 함수를 통해 희소행렬로 만들었다. 혹은 `sparse(I, J, V)` 를 통해서도 생성할 수 있는데, `I` 는 행 인덱스를 나타내는 벡터, `J` 는 열 인덱스를 나타내는 벡터, `V` 는 값을 나타내는 벡터이다. 즉, `B=sparse(I, J, V)` 라면,

$$
B_{I[i], J[i]}=V[i], \, i=1,\,2,\ldots
$$

이다.


``` julia
julia> using SparseArrays

julia> A = Matrix(1.0I, 3, 3)
3×3 Matrix{Float64}:
1.0  0.0  0.0
0.0  1.0  0.0
0.0  0.0  1.0

julia> sparse(A)
3×3 SparseMatrixCSC{Float64, Int64} with 3 stored entries:
1.0   ⋅    ⋅
⋅   1.0   ⋅
⋅    ⋅   1.0

julia> B = sparse([1, 1, 2, 3], [1, 3, 2, 3], [-1.0, 2.0, 0.0, 4.0])
3×3 SparseMatrixCSC{Float64, Int64} with 4 stored entries:
 -1.0   ⋅   2.0
   ⋅   0.0   ⋅
   ⋅    ⋅   4.0

julia> dropzeros(B)
3×3 SparseMatrixCSC{Float64, Int64} with 3 stored entries:
 -1.0   ⋅   2.0
   ⋅    ⋅    ⋅
   ⋅    ⋅   4.0
```

마지막의 `dropzeros()` 함수는 희소 행렬 내의 $0$ 을 제거하여 저장공간을 줄인다. `B=sparse(I, J, V)` 형식으로 생성하면, `B` 행렬의 크기는 `I` 와 `J` 벡터의 최대값으로 정해지지만, 행렬의 크기를 정할 수 있다. 예를 들어, 

```julia
julia> sparse([1, 2], [1, 3], [1, -1], 4, 4)
4×4 SparseMatrixCSC{Int64, Int64} with 2 stored entries:
 1  ⋅   ⋅  ⋅
 ⋅  ⋅  -1  ⋅
 ⋅  ⋅   ⋅  ⋅
```

와 같이 `sparse(I, J, V, m, n)` 형식으로 생성하면 이 희소행렬은 $m \times n$ 행렬이 된다. 희소벡터는 `sparsevec(I, V, m)` 형식으로 생성 할 수 있다.

```julia
julia> sparsevec([1, 4], [2, -1], 5)
5-element SparseVector{Int64, Int64} with 2 stored entries:
  [1]  =  2
  [4]  =  -1
```

영행렬 혹은 영벡터는 `spzeros()` 함수를 통해 생성한다. 성긴 단위행렬은 `sparse(I, 4, 4)` 와 같이 생성한다. 단 `I` 는 `LinearAlgebra` 모듈에 정의되어 있으므로 `using LinearAlgebra` 를 한 후 사용할 수 있다.

```julia
using LinearAlgebra
using SparseArrays
sm1 = spzeros(Float32, 10, 10) # Float32 타입의 값을 갖는 10x10 성긴행렬
sm2 = spzeros(5, 5) # 타입이 지정되지 않으면 Float64 타입의 값을 갖는다.
sv = spzeros(4) #Float64 타입의 4 차원 벡터
sI = sparse(I, 4, 4) # 4xt 단위행렬
```

</br>

### 타입으로 정의된 행렬 

`LinearAlgebra.jl` 은 선형대수학에서 사용되는 특별한 명칭이 붙은 행렬중 일부를 특별히 별도의 타입으로 지정하였다. 아주 단순한 예를 들자면 선형 시스템 $\boldsymbol{Ax}=\boldsymbol{b}$ 를 풀 때, $\boldsymbol{A}$ 가 대각성분을 제외한 성분이 모두 $0$ 인 대각행렬이라면 쉽게 풀 수 있으며, 상삼각행렬이나, 하삼각행렬이라도 일반적인 행렬에 비해서도 훨씬 쉽게 풀 수 있다. 그러나 컴퓨터가 임의로 $\boldsymbol{A}$ 가 어떤 행렬인지 결정하게 하기는 힘들며, 때때로 바람직 하지 않은 오류를 낼 수 있다. Julia 에서는 다중 디스패치를 이용할 수 있으므로 행렬 $\boldsymbol{A}$ 를 각각의 형태에 맞는 타입으로(대각행렬이라든가, 상삼각행렬이라든가) 정해 줄 수 있다면 이에 맞춰서 선형 시스템을 푸는 함수를 공통적으로 정의 할 수 있다. 즉 `solve_linearsystem_diagonal`, `solve_linearsystem_uppertriangula` 등을 따로 정의 할 필요 없이 `solve_linearsystem(A::Diatonal)`, `solve_linearsystem(A::UpperTriangula)` 와 같이 할 수 있다는 뜻이다.

`LinearAlgebra.jl` 에 정의된 특수한 타입으로서의 행렬의 목록은 아래와 같다.

::: {.callout-warning}
아래의 목록에 정의된 행렬의 타입들 가운데 상당수는 성긴행렬이다. 굳이 밀집행렬로 바꾸고 싶다면 `Matrix(A)` 를 사용한다.
:::

</br>

| 타입 | 명칭 | 설명 |
|:---------:|:----------|:-------:|
| `UniformScaling` | Uniform scaling operator | c$\boldsymbol{I}$|
| `Diagonal` | 대각행렬 (Diagonal matrix) |
| `Bidiagonal` | 상/하 쌍대각 행렬 (Upper/lower bidiagonal matrix) |
| `Tridiagonal` | 삼중 대각 행렬 (Tridiagonal matrix) |
| `SymTridiagonal` | 대칭 삼중 대각 행렬 (Symmetric tridiagonal matrix) |
| `UpperTriangular` | 상삼각행렬 (Upper triangular matrix) | $i>j \implies A_{ij}=0$
| `UnitUpperTriangular` | 단위 상삼각행렬 (Upper triangular matrix with unit diagonal) | 상삼각행렬이며 대각성분이 $1$ |
| `LowerTriangular` | 하삼각행렬 (Lower triangular matrix) | $i<j \implies A_{ij}=0$ |
| `UnitLowerTriangular` | 단위 하삼각행렬 (Lower triangular matrix with unit diagonal) | 하삼각행렬이며 대각성분이 $1$ |
| `UpperHessenberg` | 상 헤센베르크 행렬 (Upper Hessenberg matrix) |
| `Symmetric` | 대칭 행렬 (Symmetric matrix) | $\boldsymbol{A} =\boldsymbol{A}^T$ |
| `Hermitian` | 에르미트 행렬 (Hermitian matrix) | $\boldsymbol{A} =\boldsymbol{A}^\ast$ |

</br>

#### `UniformScaling`

`UniformScaling` 은 단위행렬에 상수를 곱한것을 말한다. `UniformScaling(2.0)` 은 (`2.0` 이 `Float64` 타입의 부동소수이므로) `Float64` 타입의 성분을 갖는 단위행렬이다. 다만 아직까지는 차원이 정해지지 않으며 다른 행렬과 연산될 때 적절한 차원을 갖게 된다. 단위행렬을 나타내는 `I` 를 대신 사용 할 수 있으며, `UniformScaling(2.0)==2.0I` 이다.

```julia
julia> using LinearAlgebra

julia> 2.0I + 3
5.0

julia> 2.0I + [0 1; 2 3]
2×2 Matrix{Float64}:
 2.0  1.0
 2.0  5.0
```

</br>

#### `Diagonal`

대각행렬을 나타내는 타입이다. $n$ 차원 벡터를 입력하면 차례로 대각성분이 되는 대각행렬을 만든다.

```
julia> Diagonal([1, 10, 100])
3×3 Diagonal{Int64, Vector{Int64}}:
 1   ⋅    ⋅
 ⋅  10    ⋅
 ⋅   ⋅  100
```

`Diagonal` 타입의 행렬에 `UniformScaling` 을 더하면, 아마 여러분이 예상한 결과가 나올 것이다.

```
julia> Diagonal([1, 10, 100])+3.0I
3×3 Diagonal{Float64, Vector{Float64}}:
 4.0    ⋅      ⋅
  ⋅   13.0     ⋅
  ⋅     ⋅   103.0
```

</br>

#### `Bidiagonal`, `Tridiagonal`, `SymTridiagonal`

$m\times n$ 행렬 $A_{ij}$ 에서 $A_{ii},\, i=1,\ldots,\, \min \{m,\,n\}$ 을 대각(diagonal) 성분이라 한다. 대각 성분의 바로 오른쪽 성분, 즉 $A_{i,\, i+1}$ 을 **상대각 (superdialgonal)** 성분이라 하며, 왼쪽 성분, 즉 $A_{i+1,\,i}$ 을 **하대각(subdiagonal)** 성분이라 한다.(적절한 번역어를 못찾아서 임의로 붙인 이름이다.)

대각행렬과 대각성분 근처의 일부만을 제외한 모든 성분이 $0$ 인 행렬을 **띠행렬 (Band matrix)**이라 한다. 대각성분과 상대각 성분/하대각 성성분 가운데 하나를 제외한 모든 성분이 $0$ 인 행렬을 각각 상쌍대각 행렬/하쌍대각 행렬이라 한다. 아래의 보기에서 $\boldsymbol{B}_U$ 는 상쌍대각행렬, $\boldsymbol{B}_L$ 은 하쌍대각행렬이다.

$$
\boldsymbol{B}_U = \begin{bmatrix} 4 & 1 & 0 &0  \\ 0 & 3 & 1 & 0 \\ 0 & 0 & 2 &  2 \\ 0 & 0 & 0 & 5 \end{bmatrix} ,\qquad \boldsymbol{B}_L = \begin{bmatrix} 4 & 0 & 0 &0  \\ 1 & 3 & 0 & 0 \\ 0 & 1 & 2 &  0 \\ 0 & 0 & 2 & 5 \end{bmatrix}
$$

쌍대각 행렬은 `Bidiagonal` 객체로 표현되며, 두가지 방법으로 구성 할 수 있다. 첫번째 방법은 생성자에(객체의 생성자이므로 객체와 같은 이름을 가진다.) 첫번째 인자로 대각성분을, 두번째 인자로 $0$ 이 아닌 대각성분의 위/아래 성분을, 세번째 인자로 상쌍대각행렬이면 `:U` 를 하쌍대각행렬이면 `:L` 을 입력하는 방법이다.

```sh
julia> Bu = Bidiagonal([4, 3, 2, 5], [1, 1, 0], :U)
4×4 Bidiagonal{Int64, Vector{Int64}}:
 4  1  ⋅  ⋅
 ⋅  3  1  ⋅
 ⋅  ⋅  2  0
 ⋅  ⋅  ⋅  5

julia> Bl = Bidiagonal([4, 3, 2, 5], [1, 1, 2], :L)
4×4 Bidiagonal{Int64, Vector{Int64}}:
 4  ⋅  ⋅  ⋅
 1  3  ⋅  ⋅
 ⋅  1  2  ⋅
 ⋅  ⋅  2  5
```

`Bidiangoal` 타입 행렬을 구성하는 두번째 방법은 이미 존재하는 행렬로부터 대각성분을 포함한 $0$ 이 아닌 성분을 가져오는 방법이다. 다음을 보면 쉽게 이해 할 수 있을 것이다.

```sh
julia> A = [1 1 1 1; 2 2 2 2; 3 3 3 3; 4 4 4 4]
4×4 Matrix{Int64}:
 1  1  1  1
 2  2  2  2
 3  3  3  3
 4  4  4  4

julia> Bidiagonal(A, :U) # contains the main diagonal and first superdiagonal of A
4×4 Bidiagonal{Int64, Vector{Int64}}:
 1  1  ⋅  ⋅
 ⋅  2  2  ⋅
 ⋅  ⋅  3  3
 ⋅  ⋅  ⋅  4

julia> Bidiagonal(A, :L) # contains the main diagonal and first subdiagonal of A
4×4 Bidiagonal{Int64, Vector{Int64}}:
 1  ⋅  ⋅  ⋅
 2  2  ⋅  ⋅
 ⋅  3  3  ⋅
 ⋅  ⋅  4  4
```

</br>

대각성분, 상대각성분, 하대각성분을 제외한 성분이 모두 $0$ 인 성분을 삼중대각행렬 (Tridiagonal matrix) 라 하며 `LinearAlgebra.jl` 에서는 `Tridiagonal` 타입으로 정의된다. 아래의 행렬 $\boldsymbol{C}$ 는 삼중 대각행렬이다.

$$
\boldsymbol{C} = \begin{bmatrix} 4 & 1 & 0 & 0 & 0 \\ 2 & 3 & 1 & 0 & 0 \\ 0 & 3 &1& 2 &  0 \\ 0 & 0 & 2& 5 & 1 \\ 0 & 0 & 0 &3 & 6 \end{bmatrix}
$$

삼중대각행렬을 구성하는 방법은 쌍대각행렬을 구성하는 방법과 비슷하게 두가지 방법이다. 하나는 대각행렬 아래 성분들을 나타내는 벡터, 대각성분벡터, 대각성분 위의 성분들을 나타내는 벡터를 차례로 입력하는 것이다.

위의 행렬 $\boldsymbol{C}$ 를 구성한다면

```sh
julia> C = Tridiagonal([2, 3, 2, 3], [4, 3, 1, 5, 6], [1, 1, 2, 1])
5×5 Tridiagonal{Int64, Vector{Int64}}:
 4  1  ⋅  ⋅  ⋅
 2  3  1  ⋅  ⋅
 ⋅  3  1  2  ⋅
 ⋅  ⋅  2  5  1
 ⋅  ⋅  ⋅  3  6
```

와 같이 할 수 있다.

다른 방법은 이미 존재하는 행렬로부터 구성하는 것이다.

```sh
julia> D = [1 2 3 4 5]' *ones(Int64, 5)'
5×5 Matrix{Int64}:
 1  1  1  1  1
 2  2  2  2  2
 3  3  3  3  3
 4  4  4  4  4
 5  5  5  5  5

julia> Tridiagonal(D)
5×5 Tridiagonal{Int64, Vector{Int64}}:
 1  1  ⋅  ⋅  ⋅
 2  2  2  ⋅  ⋅
 ⋅  3  3  3  ⋅
 ⋅  ⋅  4  4  4
 ⋅  ⋅  ⋅  5  5
```

`SymTridiagonal` 은 대칭인 삼중대각행렬을 나타내는 타입이다. 대칭행렬이므로 대각행렬의 위 띠와 아래띠가 같다. 이것은 어떻게 구성할까? 여러분이 짐작할 수 있듯이 대각성분과, 띠 성분을 벡터로 입력하면 된다.

```sh
julia> SymTridiagonal([1,2, 3, 4, 5], [-1, -2, -3, -4])
5×5 SymTridiagonal{Int64, Vector{Int64}}:
  1  -1   ⋅   ⋅   ⋅
 -1   2  -2   ⋅   ⋅
  ⋅  -2   3  -3   ⋅
  ⋅   ⋅  -3   4  -4
  ⋅   ⋅   ⋅  -4   5
```

</br>

#### `UpperTriangular`, `LowerTriangular`

상삼각행렬과 하삼각행렬을 다루기 위한 타입은 각각 `UpperTriangular`, `LowerTriangular` 이다. 거기에 대각성분이 $1$ 인 행렬로 특별히 `UnitUpperTriangular`, `UnitLowerTriangular` 타입이 준비되어 있다. 이미 존재하는 행렬로부터 필요한 만큼의 행렬 원소를 취하여 행렬을 구성 할 수 있다.

```sh
julia> A = [1.0 2.0 3.0; 4.0 5.0 6.0; 7.0 8.0 9.0]
3×3 Matrix{Float64}:
 1.0  2.0  3.0
 4.0  5.0  6.0
 7.0  8.0  9.0

julia> UpperTriangular(A)
3×3 UpperTriangular{Float64, Matrix{Float64}}:
 1.0  2.0  3.0
  ⋅   5.0  6.0
  ⋅    ⋅   9.0

julia> LowerTriangular(A)
3×3 LowerTriangular{Float64, Matrix{Float64}}:
 1.0   ⋅    ⋅
 4.0  5.0   ⋅
 7.0  8.0  9.0

julia> UnitUpperTriangular(A)
3×3 UnitUpperTriangular{Float64, Matrix{Float64}}:
 1.0  2.0  3.0
  ⋅   1.0  6.0
  ⋅    ⋅   1.0

julia> UnitLowerTriangular(A)
3×3 UnitLowerTriangular{Float64, Matrix{Float64}}:
 1.0   ⋅    ⋅
 4.0  1.0   ⋅
 7.0  8.0  1.0
```

</br>

#### 헤센베르그 행렬

헤센베르그 행렬은 상헤센베르그 행렬(Upper Hessenberg matrix) 과 하헤센베르그 행렬(Lower Hessenberg matrix) 로 이루어진다. 상헤센베르그 행렬(Upper Hessenberg matrix) 은 정사각행렬이며 행렬의 좌하단 모서리 부근이 모두 $0$ 인 행렬이다. 하헤센베르그 행렬(Lower Hessenberg matrix) 는 정사각 행렬이며 행렬의 우하단 모서리 부근이 모두 $0$ 인 행렬이다. 아래의 보기에서 $\boldsymbol{H}_U$ 는 상헤센베르그 행렬, $\boldsymbol{H}_L$ 은 하헤센베르그 행렬이다.

$$
\boldsymbol{H}_U = \begin{bmatrix} 3 & 4 & 2 & 3\\ 1 & 4 & 2 & 3\\ 0 & 2 & 3 & 5 \\ 0 & 0 & 1 & 1\\\end{bmatrix}
,\qquad \boldsymbol{H}_L = \begin{bmatrix} 1 & 2 & 0 & 0 \\ 7 & 2 & 3 & 0 \\ 3 & 4 & 3 & 7 \\ 5 & 3 & 1 &2 \end{bmatrix}
$$

Julia 에서는 상헤센베르그 행렬 가운데 첫번째 subdiagonal elements 아래의 성분을 `0` 으로 하는 행렬만 따로 `UpperHessenberg` 타입으로 정의한다. 임의의 정사각 행렬에 대해 `UpperHessenberg` 생성자를 취하면 다음과 같다.

```sh
julia> HH = [3  4  2  3; 1  4  2  3; 1  2  3  5 ; 1  2  1  1]
4×4 Matrix{Int64}:
 3  4  2  3
 1  4  2  3
 1  2  3  5
 1  2  1  1

julia> HU = UpperHessenberg(HH)
4×4 UpperHessenberg{Int64, Matrix{Int64}}:
 3  4  2  3
 1  4  2  3
 ⋅  2  3  5
 ⋅  ⋅  1  1
```

</br>

#### 대칭행렬과 에르미트 행렬

어떤 행렬 $\boldsymbol{A}$ 의 행과 열을 바꾼 행렬을 그 행렬의 전치행렬 (transposed matrix) 라 하고 $\boldsymbol{A}^T$ 이라 한다. 즉 $(\boldsymbol{A}^T)_{ij} = (\boldsymbol{A})_{ji}$ 이다. 행렬 $\boldsymbol{A}$ 행과 열을 바꾸고 켤레복소수를 취한것을 켤레전치 행렬(conjugate transpose matrix) 혹은 에르미트 전치 행렬(Hermite transpose matrix)라 하고 $\boldsymbol{A}^\ast$ 나 $\boldsymbol{A}^\dagger$ 라 쓴다. 전자는 수학에서, 후자는 물리학에서 주로 쓰는 표현이다. $\boldsymbol{A}=\boldsymbol{A}^T$ 이면 **대칭행렬** 이라 한다. $\boldsymbol{A}=\boldsymbol{A}^\ast$ 이면 에르미트 행렬(Hermitian matrix), 혹은 자기수반 행렬(Self-adjoint matrix) 라 한다. 예를 들어 $\boldsymbol{A} =\begin{bmatrix} 2+3i & i \\ 2i & 3\end{bmatrix}$  에 대해,

$$
\boldsymbol{A}^T =\begin{bmatrix} 2+3i & 2i \\ i & 3\end{bmatrix},\qquad \boldsymbol{A}^\ast = \begin{bmatrix} 2-3i & -i \\ -2i & 3\end{bmatrix}
$$

이다. 행렬 $\boldsymbol{A}$ 가 실수 성분만을 가진다면 $\boldsymbol{A}^T = \boldsymbol{A}^\ast$ 이다.

대칭행렬에 대한 타입은 `Symmetric` 이다. 이미 존재 하는 행렬에서 하삼각부분이나 상삼각부분을 취하여 대칭행렬로 만든다.

```sh
julia> A = [1 0 2 0 3; 0 4 0 5 0; 6 0 7 0 8; 0 9 0 1 0; 2 0 3 0 4]
5×5 Matrix{Int64}:
 1  0  2  0  3
 0  4  0  5  0
 6  0  7  0  8
 0  9  0  1  0
 2  0  3  0  4

julia> Supper = Symmetric(A, :U)
5×5 Symmetric{Int64, Matrix{Int64}}:
 1  0  2  0  3
 0  4  0  5  0
 2  0  7  0  8
 0  5  0  1  0
 3  0  8  0  4

julia> Slower = Symmetric(A, :L)
5×5 Symmetric{Int64, Matrix{Int64}}:
 1  0  6  0  2
 0  4  0  9  0
 6  0  7  0  3
 0  9  0  1  0
 2  0  3  0  4
```

행렬 `A` 의 하삼각 부분을 취하여 대칭행렬로 만들 때는 `Symmetric(A, :U)` 라 하고, 하삼각 부분을 취하여 대칭행렬로 만들 때는 `Symmetric(A, :L)` 라 한다. 이 때 `:U` 나 `:L` 을 입력하지 않으면 `:U` 를 기본값으로 하여 대칭행렬을 만든다.

에르미트 행렬에 대한 타입은 `Hermite` 이며 마찬가지로 `Hermite(A, :U)` 나 `Hermite(A, :L)` 로 에르미트행렬을 만든다. 역시 기본값은 `:U` 이다.

```sh
julia> A = [1 0 2+2im 0 3-3im; 0 4 0 5 0; 6-6im 0 7 0 8+8im; 0 9 0 1 0; 2+2im 0 3-3im 0 4];

julia> Hupper = Hermitian(A)
5×5 Hermitian{Complex{Int64}, Matrix{Complex{Int64}}}:
 1+0im  0+0im  2+2im  0+0im  3-3im
 0+0im  4+0im  0+0im  5+0im  0+0im
 2-2im  0+0im  7+0im  0+0im  8+8im
 0+0im  5+0im  0+0im  1+0im  0+0im
 3+3im  0+0im  8-8im  0+0im  4+0im

julia> Hlower = Hermitian(A, :L)
5×5 Hermitian{Complex{Int64}, Matrix{Complex{Int64}}}:
 1+0im  0+0im  6+6im  0+0im  2-2im
 0+0im  4+0im  0+0im  9+0im  0+0im
 6-6im  0+0im  7+0im  0+0im  3+3im
 0+0im  9+0im  0+0im  1+0im  0+0im
 2+2im  0+0im  3-3im  0+0im  4+0im
```

</br>




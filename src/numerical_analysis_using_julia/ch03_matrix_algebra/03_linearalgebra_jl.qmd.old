## `LinearAlgebra.jl`

우리는 앞서 가우스 소거법과 LU 분해 그리고 그람-그람 슈미트 과정을 통한 QR 분해를 구현하였다. 그러나 앞으로는 이것을 버리고 Julia 에서 제공하는 `LinearAlgebra` 모듈을 사용하도록 하자. Julia 의 `LinearAlgebra` 모듈은 선형대수학에서 사용하는 많은 기능을 포함하고 있다. 여기서는 중요한 것만 설명할 것이며 자세한 것은 [LinearAlgbra.jl 공식 문서](https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/)  를 참고하자. `LinearAlgebra` 를 우리가 지금껏 작성한 함수와 그 속도를 비교해보면 `LinearAlgebra` 쪽이 훨씬 빠르다. 그리고 `LinearAlgebra` module 은 많은 프로그래밍 언어에서 사용중이며, 수십년의 역사를 가진 [BLAS(Basic Linear Algebra Subprograms)](https://netlib.org/blas/) 과 [LAPACK(Linear Algebra PACKage)](https://netlib.org/lapack/) 에 기반하여 만들어졌으므로 믿을만 하다. 많은 함수는 희소행렬과 밀집행렬에 대해 공통적으로 사용 할 수 있다.(**다중 디스패치!!!**)

</br>

### `LinearAlgbra.jl` 이 제공하는 기본 함수

`LininearAlgebra.jl` 은 행렬 `A`($\boldsymbol{A}$), `B`($\boldsymbol{B}$) 와 벡터 `u`($\boldsymbol{u}$), `v`($\boldsymbol{v}$), 스칼라 `a`($a$), `b`($b$) 에 대해 다음과 같은 함수를 지원한다. (`LinearAlgebra.jl` 이 지원하는 함수중 일부이다.)


#### 연산자

| 연산자 | 설명 |
|:------:|:----------------------|
| `+`, `-`, `*` | 수학적으로 정의된 스칼라, 벡터, 행렬 사이의 더하기, 빼기, 곱하기 연산 |
| `\` | `A \ B` 일 경우 `AX==B` 를 만족하는 행렬 `A` 를 구한다. 구하는 방법은 `A` 가 어떤 행렬인지에 따라 달라진다. |
| `/` | 행렬간의 연산일 경우 `(B' / A')` 를 구한다.|
| `u⋅v` (`\cdot`+[tab])  | $\boldsymbol{u} \cdot \boldsymbol{v}$  |
|`×(u, v)` (`\times`+[tab]) | $\boldsymbol{u \times v}$ |


</br> 

#### 기본적인 함수

| 함수 | 설명 | 비고 |
|:------:|:------:|:-------|
| `tr(A)` | $\text{tr}(\boldsymbol{A})$ | |
|`det(A)` | $\det(\boldsymbol{A})$ | |
|`inv(A)` | $\boldsymbol{A}^{-1}$| `A` 가 정사각행렬일 경우  |
| `transpose(A)` | $\boldsymbol{A}^{T}$| `A` 의 전치행렬 |
|`A'` or `adjoint(A)` | $\boldsymbol{A}^\dagger$ | `A` 의 에르미트 전치행렬   |
| `diag(A)` | $[A_{11},\,A_{22},\ldots]$ | 대각성분 |
| `dot(u, v)` | `u⋅v` 와 같다  |
| `dot(u, A, v)` | `dot(u, A*v)` 와 같다 | dot product of vectors |
| `cross(u, v)` | `×(u, v)` 와 같다 | cross product of vectors |
| `norm(u, p)` or `norm(A, p)`|벡터의 $L_p$-노름 | [노름과 조건수](01_norm.qmd#sec-norm_and_condition_number) 참고 |
| `opnorm(A, p::Real=2)` | 행렬의 $L_p$-노름  `A`| [노름과 조건수](01_norm.qmd#sec-norm_and_condition_number)  참고|
|`normalize(a, p::Real=2)` | 벡터, 행렬의 정규화 | `norm(a, p)==1` 되도록 normalize 한다.|
| `exp(A)` | exponential of $\boldsymbol{A}$  | $\displaystyle \sum_{k=1}^\infty \dfrac{\boldsymbol{A}^k}{k!}$ |


</br>

## 선형 시스템

우리는 앞서 LU 분해를 통해 선형 시스템을 푸는 코드를 작성하였다. 이제는 `LinearAlgebra.jl` 이 제공하는 `\` 연산자를 이용하면 쉽게 풀 수 있다. 일반적인 정사각 행렬에 대해서는 성긴 행렬이든 밀집 행렬이든 LU 분해를 통해 선형 시스템을 쉽게 풀 수 도록 해 준다. 예를 들어,

```sh
julia> using Lin earAlgebra

julia> A=[4 2 3;3 1 2;3 3 4];b=[2; 1 ;-1]

julia> A\b
3-element Vector{Float64}:
  2.0
  3.0000000000000013
 -4.**000000000000001**
```

와 같이 풀 수 있다. 

</br>

::: {.callout-note}

본 교재에서 선형 대수 부분을 가장 앞에 놓은 이유는 선형시스템을 푸는데 `LinearAlgebra.jl` 을 계속 사용하기 위해서이다. 

:::


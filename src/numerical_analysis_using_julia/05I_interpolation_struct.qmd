# Interlude : 보간법의 구현 {.unnumbered}

우리는 앞의 다항식의 구현에서 복합타입을 함수처럼 사용하였다. 보간법의 경우 원래의 데이터와 보간 방식을 입력하면 어떠한 값에 대해서도 보간된 값을 계산 할 수 있다. 우리는 이것을 역시 복합 타입으로 구현하고자 한다.

복합 타입의 정의는 다음과 같다.

``` {.julia code-line-numbers="true"}
mutable struct Interpolator1D{T}
    xp :: Vector{T}
    yp :: Vector{T}
    kind :: Symbol
    bc :: Union{Vector{T}, Nothing}
    coeffs ::Union{Vector{T}, Nothing}

    function Interpolator1D(
        xp::AbstractVector{T}, 
        yp::Vector{S}, 
        kind::Symbol, 
        bc::Union{Nothing, Vector}=nothing, 
        ) where {T <: Real, S<: Real}
        @assert kind ∈ (:nearest, :linear, :cubic, :cubic_spline_naturalbc, :cubic_spline_clampedbc)
        @assert length(xp) == length(yp)
        
        N = promote_type(T, S)
        xp = convert.(N, xp)
        yp = convert.(N, yp)

        if kind ∈ (:cubic_spline_naturalbc, :cubic_spline_clampedbc)
            coeffs = get_cubic_spline_coefficients(xp, yp, kind, bc)
        else 
            bc = nothing
            coeffs = nothing
        end
        new{N}(Vector(xp), Vector(yp), kind, bc, coeffs)
    end
end
```

`Interpolator1D` 자료형의 `xp` 와 `yp` 는 보간법에 사용될 원래의 데이터이며, `kind` 는 보간 방법으로 `:nearest`(최근접 보간법), `:linear` (선형 보간법), `:cubic` (삼차함수 보간법), `:cubic_spline_naturalbc` (cubic spline with natural boundary condition), `:cubic_spline_clampedbc` (cubic spline with clamped boundary condition) 을 의미한다. `bc` 는 경계조건을 의미하며, cubic spline 방법이 아닐 경우 필요가 없으므로, 벡터 혹은 `nothing` 의 `Union` 이다.

Cubinc Spline 보간법의 경우 경계조건을 계산하는 함수 `get_cubic_spline_coefficients` 를 다음과 같이 구현하였다.

```{.julia code-line-numbers="true"}

function get_cubic_spline_coefficients(xp, yp, bc_kind = :cubic_spline_naturalbc, bc=nothing)
    @assert length(xp) == length(yp)
    @assert bc_kind ∈ (:cubic_spline_clampedbc, :cubic_spline_naturalbc)
    @assert (bc === nothing) || (length(bc) == 2)
    T = eltype(xp)
    N = length(xp)
    M = spzeros(T, (4*N-4, 4*N-4))
    Y = zeros(T, (4*N-4, 1))
    for i in 1:N-2 
        M[4*(i-1)+1, (4*(i-1)+1):4*i] = [one(T) xp[i] (xp[i])^2 (xp[i])^3]
        M[4*(i-1)+2, 4*(i-1)+1:4*i] = [one(T) xp[i+1] (xp[i+1])^2 (xp[i+1])^3]
        M[4*(i-1)+3, 4*(i-1)+2:4*(i+1)] = [1 2*xp[i+1] 3*(xp[i+1])^2 0 -1 -2*xp[i+1] -3*(xp[i+1])^2]
        M[4*(i-1)+4, 4*(i-1)+3:4*(i+1)] = [2 6*(xp[i+1]) 0 0 -2 -6*(xp[i+1])]
        
        Y[4*(i-1)+1] = yp[i]
        Y[4*(i-1)+2] = yp[i+1]
        
        if i == N-2
            println(4*N-4, ", ", 4*(i-1)+4)
        end
    end
    
    M[end-3, end-3:end] = [one(T) xp[end-1] (xp[end-1])^2 (xp[end-1])^3] 
    M[end-2, end-3:end] = [one(T) xp[end] (xp[end])^2 (xp[end])^3] 
    
    if bc_kind == :cubic_spline_naturalbc
        
        M[end-1, 3:4] = [2 6*xp[1]]
        M[end, end-1:end] = [2 6*xp[end]]
        Y[end-3] = yp[end-1]
        Y[end-2]=  yp[end]
    else
        M[end-3, end-3:end] = [one(T) xp[end-1] (xp[end-1])^2 (xp[end-1])^3] 
        M[end-2, end-3:end] = [one(T) xp[end] (xp[end])^2 (xp[end])^3] 
        M[end-1, 2:4] = [1 2*xp[1] 3(xp[1])^2]
        M[end, end-2:end] = [1 2*xp[end] 3(xp[end])^2]
        Y[end-3] = yp[end-1]
        Y[end-2]=  yp[end]
        Y[end-1] = bc[1]
        Y[end] = bc[2]
    end

    return (M\Y)[:,1]

end
```






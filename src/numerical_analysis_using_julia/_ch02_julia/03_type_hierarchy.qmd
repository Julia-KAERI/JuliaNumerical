## Julia 의 타입의 계층과 메서드 디스패치


### 타입의 계층구조 {#sec-type_hierarchy}

Julia 에서 다루는 모든 값은 특정 타입(Type)에 대한 값이다. 타입은 julia 언어에서 제공하는 `Int64` 나 `Complex{Float64}` 일 수도 있고 누군가 필요에 의해 만든 것일 수도 있으며, 둘 사이의 본질적인 차이는 없다. Julia 에서 변수에 값을 할당할 때 타입을 명시적으로 지정할 수 있으며, 암시적으로 지정되기도 한다. 예를 들어,

```julia
julia> a=3;typeof(a)
Int64

julia> b=3.42;typeof(b)
Float64

julia> c=Float32(6.44);typeof(c)
Float32

julia> d::Float32=3.3;typeof(d)
Float32

julia> e::UInt8=3;typeof(e)
UInt8
```

특별히 형을 지정하지 않았을 경우 정수는 `Int64`, 실수는 `Float64` 타입으로 암시적으로 지정된다. `c` 의 경우는 `6.44` 라는 `Float64` 의 값을 `Float32` 로 변환시켜 할당하였으며, `d` 의 경우는 변수를 `Float32` 타입으로 지정한 후 대입하여 자동적으로 변환되었다. `e` 의 경우도 `UInt8` 타입으로 지정한 후 `3` 을 할당하여 지정된 타입으로 자동적으로 변환되었다. 

</br>

#### 추상적 타입과 구체적 타입

Julia 의 타입에는 **추상적 타입(abstract type)** 과 **구체적 타입(concrete type)** 이 있다. 구체적 타입은 변수가 지정되어 값을 할당 할 수 있지만 추상적 타입에는 변수를 지정 할 수 없으며, 값도 할당 할 수 없다. 억지로 할당할 경우 적당한 구체적 타입으로 변환된다. 우리가 지금까지 사용한 `UInt8`, `Int64`, `Float64` 등은 구체적 타입이며 아래의 예에서 `AbstractFloat` 는 부동소수에 대한 추상적인 타입이다. 

```julia
julia> aa::AbstractFloat=0.0;typeof(aa)
Float64
```

어떤 타입이 구체적인 타입인지 추상적인 타입인지는 `isabstracttype()` 함수나 `isconcretetype()` 함수로 확인 할 수 있다. Julia 에서 모든 타입은 `Any` 타입에서 뻗어나온 가지와 같은 계층구조를 가지고 있다. 예를 들어 julia 에서 제공하는 수 타입은 @fig-type_hierarchy 와 같은 계층구조를 가진다. 


Julia 의 모든 타입은 어떤 타입의 하위 타입(subtype) 이며 단 하나의 상위 타입(supertype) 을 계승한다. 타입의 하위타입에는 갯수 제한이 없다. 타입 계층의 최상단에는 `Any` 타입이 있으며, 모든 타입은 `Any` 의 하위타입 이던가 `Any` 의 하위타입의 하위타입 이던가.... `Any` 의 몇대 자손중의 하나이다. 심지어 `Any` 의 상위타입은 `Any` 이다. 어떤 타입의 상위 타입을 알기 위해서는 `supertype()` 함수를 사용 하며 하위 타입들을 알기 위해서는 `subtypes()` 함수를 사용한다.

```julia
julia> supertype(UInt8)
Unsigned

julia> subtypes(Integer)
3-element Vector{Any}:
 Bool
 Signed
 Unsigned
```

어떤 타입의 상위 타입은 추상적 타입만이 가능하며, 구체적 타입은 어떤 타입의 상위 타입이 될 수 없다. 당연히 `Any` 는 추상적 타입이다. 그림 @fig-type_hierarchy 은 Julia 에서 자체적으로 제공하는 수(number) 에 대한 타입의 계층 구조이다. 추상적 타입은 좌우 변이 두겹인 사각형, 구체적 타입은 좌우가 둥근 도형으로 표현하였다. `Irrational` 은 $\pi$ 나 $e$ 같은 특별한 무리수를 위한 타입으로 계산 될 때 적당한 타입의 값으로 변환된다.

```{mermaid}
%%| label: fig-type_hierarchy
%%| fig-cap: "Type hierarchy of number"
flowchart TB
    Any[[Any]] --- Number[[Number]]
    Number ---- Real[[Real]]
    Number --- Complex[[Complex]]
    Real ------- Integer[[Integer]] 
    Real --- Rational([Rational])
    Real --- AbstractIrrational[[AbstractIrrational]]
    Real ----- AbstractFloat[[AbstractFloat]]
    Integer --- Unsigned[[Unsigned]] & Bool([Bool])
    Integer ----- Signed[[Signed]]
    AbstractIrrational --- Irrational[Irrational]
    AbstractFloat --- Float16([Float16]) & Float32([Float32]) & Float64([Float64])  &  BigFloat([BigFloat])
    Unsigned --- UInt8([UInt8]) & UInt16([UInt16]) & UInt32([UInt32]) & UInt64([UInt64]) & UInt128([UInt128])
    Signed --- Int8([Int8]) & Int16([Int16]) & Int32([Int32]) & Int64([Int64])  & Int128([Int128]) & BigInt([BigInt])
```

</br>

이것을 정리하면 다음과 같다.

| | 추상적 타입 | 구체적 타입 |
|:---:|:---:|:---:|
| 하위타입 지정 | o | x |
| 변수 할당 | x | o |

여기서 `Complex` 만 추상적 타입으로 구체적인 하위타입이 존재하지 않는다. 실제로 Julia 에서 복소수는 복합 타입(composite type) 으로 정의된다. 복합 타입에 대해서는 후에 다룬다.

`Int64` 나 `Float32` 와 같이 값이 저장되는데 사용되는 비트수가 결정된 구체적 타입을 **원시 타입(Primitive type)** 이라고 한다. `isprimitivetype()` 함수를 통해 특정 타입이 원시 타입인지를 확인할 수 있다. Julia 언어를 통해 원시 타입을 다음과 같은 원시 타입을 선언 할 수 있지만, 여기서는 더이상 다루지 않는다.

```julia
primitive type MyInt8 <: Integer 8 end
```

</br>

#### Type Unions 와 UnionAll 타입

예를 들어 당신이 `Int64` 와 `String` 타입만을 가져야 하는 어떤 변수를 원할 때 `Union` 키워드를 이용하여 다음과 같이 새로운 타입을 만들 수 있다. 

```julia
julia> IntOrString = Union{Int,AbstractString}
Union{Int64, AbstractString}

julia> 1 :: IntOrString
1

julia> "Hello!" :: IntOrString
"Hello!"

julia> 1.0 :: IntOrString
ERROR: TypeError: in typeassert, expected Union{Int64, AbstractString}, got Float64
```

`Union` 이후의 `{ }` 에는 여러개의 타입이 나열 될 수 있으며, 나열되는 타입은 구체적 타입일 수도 있고, 추상적인 타입일 수도 있다. 추상적인 타입일 경우 지정되는 변수에 가장 적당한 하위타입으로 지정된다.

</br>

### 함수와 다중 디스패치(Multiple dispatch)

수를 받아 그 제곱을 반환하는 간단한 함수를 작성해 보자. Julia 에서 함수 선언은 `function` 키워드로 시작하고 `end` 로 끝난다. 반환값이 있을 경우 함수를 종료시키는 `end` 구문 앞에 위치해야 한다.

```julia
function myfunction1(a)
    return a^2
end
```

이 때 `function1` 을 함수명이라 하고 함수에 입력하는 값을 인자(arguments) 라고 한다. 이 함수는 다음과 같이 호출 할 수 있다.

```julia
julia> myfunction1(3)
9
```

그런데 `^` 연산자는 문자열을 반복하는데도 사용된다. 즉 `"ab"^3` 은 `ababab` 이다. 그렇다면,

```julia
julia> myfunction1("3")
"33"
```

이 된다. 이것은 충분히 혼란을 줄 만한 코드이며, 당신이 원하는 것이 아니라면 피해야 한다. 간단한 해결방법중의 하나는 `::` 를 통해 인자의 타입을 제한하는 것이다.

```julia
function myfunction1(a::Number)
    return a^2
end
```

만약 당신이 Julia REPL 이나 jupyter notebook 을 재시작 하지 않았다면 `myfunction("3")` 의 결과가 이전과 같이 나올 것이다. 같은 이름으로 함수를 정의한다고 해서 이전의 함수가 제거되지 않으며, 인자가 다르면 동등하지만 다른 함수로서 다중 디스패치의 한 예이다. 만약 동등한 함수명과 인자로 다시 정의한다면 이전의 함수 정의는 덮어씌워진다. 일단 Julia 실행 환경을 재시작 하고 함수를 정의한다.

```julia
julia> myfunction1(3)
9

julia> myfunction1("aa")
ERROR: MethodError: no method matching myfunction1(::String)
```

원했던 대로 에러가 발생한다. 함수 인자의 `a::Number` 는 인자로 주어지는 `a` 는 `Number` 의 타입이거나 `Number` 의 하위타입, 혹은 하위타입의 하위타입 과 같은 `Number` 의 직계여야만 한다는 의미이다.

앞서 설명했지만 다중 디스패치는 같은 이름을 가진 함수가 인자에 따라 다르게 행동하는 것이다. 예를 들어 만약 `a` 가 정수일때는 `a` 의 제곱이 아닌 2를 곱한 값을 원한다고 가정하자.

```julia
function myfunction1(a::Integer)
    return a*2
end    
```
그 결과는 다음과 같다.

```julia
julia> myfunction1(-3.0)
9.0

julia> myfunction1(4)
8
```

정수에 대해서는 2배가 그 이외의 수에 대해서는 제곱이 리턴되었다. 즉 우리는 `myfunction1` 이라는 하나의 함수에 대해 인자가 정수인 경우와 정수가 아닌 수인 경우 두가지의 메써드(method) 로 다중 디스패치를 구현하였다. 

::: {.callout-note}
Julia 의 경우 함수(function) 은 그 이름만으로, 메써드(method) 는 인자에 따른 다양한 구현으로 구분한다. 함수에 단 하나의 메써드만 있을 수도 있지만 앞서의 `myfunction1` 의 경우처럼 여러 메써드가 구현될 수도 있다.
:::

Julia 의 메써드 호출은 인자에 가장 정확히 맞는 타입부터 타입 계층을 따라 올라가면서 가장 가까운 메써드를 찾아 실행시킨다. 다음의 예를 보자

```julia
function myfunc(a::Number)
    return "function for Number"
end

function myfunc(a::Integer)
    return "function for Integer"
end

function myfunc(a::Unsigned)
    return "function for Unsigned"
end

function myfunc(a::UInt8)
    return "function for UInt8"
end
```

그 결과는 다음과 같다

```julia
julia> myfunc(UInt8(3))
"function for UInt8"

julia> myfunc(2.4)
"function for Number"

julia> myfunc(UInt64(4))
"function for Unsigned"

julia> myfunc(1.0+0.0im)
"function for Number"

julia> myfunc(5)
"function for Integer"
```

첫번째의 경우는 `UInt8` 에 대한 메써드가 구현되었으므로 실행되었다. 두번째의 경우 `2.4` 는 `Float64` 타입이며 이에 직접적인 메써드가 구현되지 않았으므로 타입 계층 구조를 타고 올라가 `Number` 에 대한 메써드가 식행된다. `UInt64` 의 경우에도 타입 계층 구조를 타고 올라가 `Unsigned` 에 대한 메써드가 실행된다. 

</br>

#### 다중 디스패치의 장점

예를 들어 `+`, `-`, `*` 나 `/` 같은 사칙연산을 다중 디스패치 함으로서 사용자의 타입에 맞추어 정의하여 이용 할 수 있다. 사칙 연산 뿐만이 아니라 많이 사용하는 `length()`, `abs()`, `size()` 함수나 다양한 연산자를 타입에 맞추어 정의하여 사용 할 수 있다. 

</br>

#### 모호한 메써드

$a^b$ 를 리턴하는 `mypow` 함수를 다음과 같이 구현했다고 하자.

```julia
function mypow(a, b)
    return a^b
end

function mypow(a::Number, b)
    return a^b
end

function mypow(a, b::Number)
    return a^b
end
```

여기에 `mypow(2, 3)` 는 어떤 값을 리턴할까? 컴파일러 입장에서는 두번째와 세번째 메써드가 동등한 권리를 갖고 있기 때문에 에러를 발생시킨다. 에러메시지의 처음줄은 다음과 같다.

```sh
MethodError: mypow(::Int64, ::Int64) is ambiguous. Candidates:
```

잘못된 값을 리턴하는 것보다 에러를 내는 것이 오히려 낫다. 메써드 설계를 잘못하면 잘못된 값을 리턴 할 수 있으며, 항상 조심해야 한다.

</br>

### 복합 타입 (Composite type)

Julia 에서 복소수는 복합타입으로 다음과 같이 정의되었다. 

```julia
struct Complex{T<:Real} <: Number
    re::T
    im::T
end
Complex(x::Real, y::Real) = Complex(promote(x,y)...)
Complex(x::Real) = Complex(x, zero(x))
```

앞의 `struct ... end` 부분은 복합 타입을 선언하는 부분이다. 

- `<:Number` 를 통해 `Complex` 객체는 `Number` 의 하위타입으로 정의된다. 

- `{T<:Real}` 은 `Complex` 의 멤버인 `re` 와 `im` 의 타입을 제한하기 위한 것이다. `T<:Real` 는 `T` 라는 타입 변수는 `Real` 의 하위 타입을 가져야 한다는 것을 의미한다. 

- `re::T` 와 `im::T` 이라는 두개의 필드(field) 를 갖는데 이름은 `re` 와 `im` 이며 둘 다 `T` 타입이어야 한다.

- 타입과 같은 이름을 가진 함수를 정의 할 수 있으며, 이 함수는 타입의 변수를 생성하는데 사용한다.

아직 이해가 잘 안되는 것이 있더라도 일단 다음과 같이 복소수를 사용 할 수 있다.

```julia
julia> com1=Complex{Float32}(3.3, 2.3) #Float32 타입의 필드를 갖는 복소수
3.3f0 + 2.3f0im

julia> com2=Complex(3.3, 2.3) # 3.3, 2.3 이 Float64 이므로 타입의 필드를 갖는 복소수
3.3 + 2.3im

julia> com3 = 3.3 + 2.3im # 복소수를 선언하는 두번째 방법
3.3 + 2.3im

julia> com2 == com3 # 둘은 같다
true
```

세번째 `com3=3.3 + 2.3im` 은 복소수 $3.3+2.3i$ 의 선언이다. Julia 언어에서 `im` 은 $i=\sqrt{-1}$ 을 의미한다. Julia 인터프리터는 `3.3 + 2.3im` 을 `Complex(3.3, 2.3)` 으로 해석한다.


우선 코드를 이해하기 위해 몇가지를 설명하겠다.

우선 `promote()` 함수는 다수의 값을 인자로 받아 그 값들을 가장 잘 표현하는 공통의 타입으로 변환된 튜플을 반환한다. 예를 들어,

```julia
julia> promote(UInt8(3), Int64(7), Float32(3.3))
(3.0f0, 7.0f0, 3.3f0)
```

을 보자. 입력된 세 값의 순서를 유지하며, 값들을 가장 잘 표현하는 `Float32` 타입으로 변환되었다. 이 함수를 정확히 이해하기 위해 공식 문서 [Conversion and Promotion](https://docs.julialang.org/en/v1/manual/conversion-and-promotion/) 를 참고하라. 

그리고 `Complex(promote(x,y)...)` 를 보자. 앞서 설명했듯이 `promote(x, y)` 함수는 두개의 수에대한 튜플을 리턴한다. 그러나 `Complex` 함수는 튜플이 아닌 두 값이 필요하다. 함수의 인자를 받는 `()` 내부에서 튜플 다음에 `...` 가 오면 튜플을 푼다. 즉, `Complex(promote(x,y)...)` 는

```julia
x2, y2 = promete(x, y); Complex(x2, y2)
```
와 같다. 이것은 값이 두 개 이상일 때에도 잘 작동한다.

</br>








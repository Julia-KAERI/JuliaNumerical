## Julia 언어의 특징

[Julia 언어 홈페이지](https://julialang.org) 는 2023년 3월 현재 언어의 특징으로 다음 여섯가지를 들고 있다.

#### 속도

> Julia was designed from the beginning for high performance. Julia programs compile to efficient native code for multiple platforms via LLVM.

Julia는 시작단계부터 고성능을 위해 설계되었다. Julia 프로그램은 LLVM을 통해 여러 플랫폼을 위한 효율적인 네이티브 코드로 컴파일된다.

#### 동적 타입 언어

> Julia is dynamically typed, feels like a scripting language, and has good support for interactive use.

변수의 타입이 컴파일 단계에서 정해지는것이 아니라 실행 단계에서 정해지는 것을 동적 타입 언어라고 한다. Julia 는 동적 타입 언어로 스크립트 언어와 같이 동작하는 것 처럼 사용할 수 있고, 상호작용을 잘 지원한다.

#### 재현성

> Reproducible environments make it possible to recreate the same Julia environment every time, across platforms, with pre-built binaries.

Julia 의 재현 가능한 환경(environment)를 통해 미리 빌드된 바이너리를 사용하여 플랫폼 간에 매번 동일한 Julia 환경을 다시 만들 수 있다.

#### Composable

> Julia uses multiple dispatch as a paradigm, making it easy to express many object-oriented and functional programming patterns. The talk on the Unreasonable Effectiveness of Multiple Dispatch explains why it works so well.

Julia 는 다중 디스패치(multiple dispatch) 를 패러다임으로 삼으며, 많은 객체 지향적 패턴과 함수형 프로그래밍 패턴을 쉽게 표현하도록 한다. [ Unreasonable Effectiveness of Multiple Dispatch](https://www.youtube.com/watch?v=kc9HwsxE1OY) 는 이것을 잘 설명한다.


#### 범용성

> Julia provides asynchronous I/O, metaprogramming, debugging, logging, profiling, a package manager, and more. One can build entire Applications and Microservices in Julia.

Julia 는 비동기 입출력, 메타프로그래밍, 디버깅, 로깅, 프로파일링, 패키지 매니저를 포함하는 다양한 기능을 지원한다. 당신은 Julia 를 사용하여 응용프래그램이나 마이크로 서비스를 제작 할 수 있다.

#### 오픈 소스

> Julia is an open source project with over 1,000 contributors. It is made available under the MIT license. The source code is available on GitHub.

Julia 는 천명 이상의 기여자들에 의해 유지되는 오픈 소스 프로젝트이다. MIT 라이센스를 따르며 [소스코드](https://github.com/JuliaLang/julia)는 Github
를 통해 접근할 수 있다.

</br>


# 일변수 다항식의 Julia 구현 {.unnumbered}

수치해석에서는 다항식을 아주 많이 사용한다. 2023년 9월 현재 Julia 언어의 생태계에서는 [`Polynomials.jl`](https://github.com/JuliaMath/Polynomials.jl)  이 다항식을 다루는 패키지로 널리 사용되지만 아직 표준적인 라이브러리라고는 볼 수 없다. 이것을 사용해도 되지만 일단 수치해석과 julia 언어에 대한 연습으로 다항식을 표현하는 복합 타입(`struct` type) 을 만들어보자. 그 이름은 일단 `SimplePolynomial` 로 하도록 하자. 이것은 앞서 소개했던 [NAJ.jl](https://github.com/Julia-KAERI/NAJ.jl.git) 에 포함되어 있다.

Julia 는 객체 지향 언어가 아니기 때문에 클래스와 클래스의 상속이라는 개념이 존재하지 않으며 대부분 복합 타입이 그 역할을 대신한다. 복합 타입에 대해서는 [복합 타입](../introduction_to_julia/09_composite_types.qmd) 과 공식 매뉴얼의 [Types](https://docs.julialang.org/en/v1/manual/types/) 를 참고하라. 복합 타입의 가장 큰 장점중의 하나는 타입 변수를 함수처럼 사용 할 수 있다는 것이다. 만약 우리가 계수로 `SimpliePolynomial` 복합 타입을 만들었다면, 이 복합 타입 변수를 함수처럼 사용 할 수 있다. 여기서는 그것을 사용한다.

다항식 함수값의 계산을 위해 julia 는 `evalpoly` 함수를 제공한다. `evalpoly(1.0, [2.0, 3.0])` 은 다항식 $p(x)=2.0+3.0x$ 에 대해 `p(1.0)` 을 계산해준다. 자세한 것은 `evalpoly` 에 대한 자체 설명을 확인하라. 일변수 다항식을 구현하는 이유는 단순히 다항식의 함수값을 계산하는 것 이외에 다항식의 덧셈, 뺄셈, 곱셈, 미분, 적분과 기타 앞으로 배울 다항식에 관련된 여러 기능이 필요해서이다. `evalpoly` 는 이것까지 제공하지는 않는다.

</br>

## 뼈대

일단 다음의 조건을 만족하도록 뼈대를 만들자.

1. 계수를 입력하면 그에 맞는 다항식 복합타입 객체가 생성되도록 한다. 예를 들어 `SimpliePolynomial([1, 2, 3])` 은 $1+2x+3x^3$ 에 해당하는 다항식 객체를 생성하도록 한다.
2. 계수의 타입을 타입 매개변수로 받는 복합타입으로 한다. 
3. 복합타입을 함수처럼 사용할 수 있도록 한다.
4. `Base.show` 함수가 `SimplePolynomial` 객체를 보기 좋게 출력 할 수 있도록 한다.

```{.julia code-line-numbers="true"}
using LinearAlgebra
export SimplePolynomial, derivative, integrate, monic, definite_integrate

struct SimplePolynomial{T}
    coeffs :: Vector{T}
    
    function SimplePolynomial(a::AbstractVector{P}) where P <: Number
        if length(a) == 0 
            return new{P}(zeros(T, 1))
        else 
            last_nz = findlast(!iszero, a)
            a_last = max(1, isnothing(last_nz) ? 0 : last_nz)
            return new{P}(a[1:a_last])
        end
    end

    function SimplePolynomial{T}(a::AbstractVector{P}) where {T <: Number, P<:Number}
        if length(a) == 0 
            return new{T}(zeros(T, 1))
        else 
            last_nz = findlast(!iszero, a)
            a_last = max(1, isnothing(last_nz) ? 0 : last_nz)
            return new{T}(a[1:a_last])
        end
    end
end

function (p::SimplePolynomial)(x::T) where T <: Number
    return evalpoly(x, p.coeffs)
end


function (p::SimplePolynomial)(x::T) where T <: Matrix{N} where N<:Number
    r = UniformScaling(p.coeffs[1])
    @assert size(x)[1] == size(x)[2] # 정사각 행렬에 대해서만 가능하다.
    for i in 2:length(p.coeffs)
        @inbounds r +=  p.coeffs[i]*x^(i-1)
    end
    return r
end

function Base.show(io::IO, p::SimplePolynomial{T}) where T<:Number
    result = ""
    n = length(p)
    if n == 1 && iszero(p.coeffs[1])
        result = "0"
    else 
        for (i, v) in enumerate(p.coeffs[end:-1:1])
            vp = string(abs(v))
            if v > zero(T) && i>1
                result *= " + " * vp * " x^$(n-i)"
            elseif v< zero(T) && i > 1
                result *= " - " * vp * " x^$(n-i)"
            elseif v > zero(T)
                result *= vp * " x^$(n-i)"
            elseif v<zero(T)
                result *= " -"*vp * " x^$(n-i)"
            end

            if i == n
                if !iszero(v)
                    result = result[1:end-4]
                else 
                    result = result
                end
            end
        end
    end
    println(io, "SimplePolynomial($(result[1:end]))")
end
```

`SimplePolynomial` 은 immutable 한 복합타입으로 구현되었다. 즉 멤버인 `coeffs` 는 변경 될 수 없다. 7번째 줄부터 시작하는 라인은 복합타입 객체를 생성하는 생성자로 내부생성자 (inner constructor) 를 사용하였다. 여기서 `where P <: Number` 는 `T` 의 타입을 `Number` 의 하위타입 으로 제한한다. 17 번째 줄부터 시작하는 함수 `SimplePolynomial{T}(a::AbstractVector{P}) where {T <: Number, P<:Number}` 는 계수의 타입을 `T` 로 지정한다. 즉 생성할 때 사용하는 계수의 타입을 `T` 로 변환한다. 아래 코드의 `In [5]` 를 확인해보라.

28 번째 라인 이후는 `SimplePolynomial` 객체를 이용하여 수 형식, 혹은 정사각 행렬에 대한 다항식을 계산하는 함수이다. 예를 들어 `CompType` 이라는 복합타입을 정의하고 `comp` 라는 `CompType` 변수를 할당했다면, 필요할 경우 `comp(x)` 나 `comp(x, y)` 처럼 복합타입의 변수를 함수로 정의 할 수 있다. 함수의 정의는 일반적인 함수 이름에 `(p::CompType)` 이 들어가는 것과, 함수 정의 내부에서 `CompType` 변수의 필드를 사용 할 수 있다는 것을 제외하면 일반적인 함수의 정의와 같다. 여기서 `p` 는 `CompType` 변수를 대신하는 함수 내부의 변수이다.

```julia
function (p::SimplePolynomial)(x::T) where T <: Number
    return evalpoly(x, p.coeffs)
end
```
를 보자. `p` 는 `SimplePolynomial` 타입이므로 `coeffs` 필드를 가지고 있다. 예를 들어 `mypoly=SimplePolynomial([1.0, 2.0])` 이라고 정의했으면 `mypoly` 는 다항식 $1+2x$ 를 의미하며 `mypoly(1.0)` 은 `evalpoly(1.0, [1, 2])`, 즉 $1 + 2.0 \times 1.0$ 을 반환한다. 이렇게 정의해주면 우리는 도트 연산자를 사용해 줄 수 있다. 아래의 `In [4]` 와 `In [6]` 을 보라.


33번째 줄부터는 행렬에 대한 다항식을 구현하였으며 이를 위해 맨 앞에 `LinearAlgebra` 모듈을 임포트 했다. 행렬에 대한 다항식의 경우 정사각 행렬임을 확인하기 위해 `@assert size(x)[1] == size(x)[2]` 이 필요하다.


이제 실제 사용해보자 `simplepolynomials.jl` 이 존재하는 파일 경로를 `include` 해 준다. 그리고 나서 다음과 같이 사용 할 수 있다.

```julia
In [1]: using NAJ

In [2]: p1 = SimplePolynomial([1.0, 2.0, 3.0])
Out[2]: SimplePolynomial(3.0 x^2 + 2.0 x^1 + 1.0)


In [3]: p1(1.0)
Out[3]: 6.0

In [4]: p1.([1.0, 2.0, 3.0])
Out[4]: 3-element Vector{Float64}:
  6.0
 17.0
 34.0

In [5]: p2=SimplePolynomial{Float32}([1,2,3,4])
Out[5]: SimplePolynomial(4.0 x^3 + 3.0 x^2 + 2.0 x^1 + 1.0)

In [6]: p2.([-1.0, 0.0, 1.0])
Out[6]: 3-element Vector{Float64}:
 -2.0
  1.0
 10.0
```

</br>



다항식의 덧셈, 뺄셈, 곱셈을 정의하기 전에 다항식의 차수에 관련된 값을 리턴하는 함수를 만들자. 일반적으로 배열은 `length` 함수로 원소의 갯수를 알 수 있는데, 다항식에서는 계수의 갯수-1 이 차수가 된다. `Base.length` 함수에 대한 디스패치를 작성하여 이 함수를 이용하자. 보통 다항식의 차수를 order 혹은 degree 라고 하는데 여기서는 계수의 길이에서 1을 뺀 값과 같다. 이것도 함수로 작성한다.

```julia
Base.length(p::SimplePolynomial) = length(p.coeffs)

order(p::SimplePolynomial) = length(p)-1
degree(p::SimplePolynomial) = order(p)
```

</br>



Julia 에서는 많은 타입에 `zero` 와 `one` 함수가 구현되어 있다. `zero(p)` 는 `p` 타입의 덧셈에한 항등원을 반환하며, `one(p)` 는 `p` 와 같은 타입의 곱셈에 대한 항등원을 반환한다. 다항식의 `zero` 와 `one` 을 다음과 같이 구현한다.

``` {.julia code-line-numbers="true"}
function Base.zero(a::P) where P<:SimplePolynomial
    return SimplePolynomial([zero(eltype(a.coeffs)), ])
end

function Base.one(a::P) where P<:SimplePolynomial
    return SimplePolynomial([one(eltype(a.coeffs)), ])
end
```

</br>

## 다항식의 사칙연산

이제 `SimpllePolynomial` 객체 사이에 혹은 `SimplePolynomial` 객체와 상수간의 `+`, `-`, `*`, `/` 연산과 단항연산(`-`) 을 정의하자. 단항 연산 `-` 는 `-3` 과 같이 덧셈에 대한 역원으로 변경시키는 연산을 말한다. 다항식과 연산되는 것은 다항식, 혹은 기본 수(number) 타입의 변수로 한다. 다만 나누기 `/` 의 경우 일단은 다항식/상수 만을 정의한다. 각각의 연산은 `Base.:+`, `Base.:-`, `Base.:*`, `Base.:/` 연산자를 다중 디스패치 함으로서 구현한다. 

```{.julia code-line-numbers="true"}
function Base.:-(b::P) where {P<: SimplePolynomial}
    coeffs = -b.coeffs
    return SimplePolynomial(coeffs)
end

function Base.:+(a::T, b::SimplePolynomial{P}) where {T <: Number, P <: Number} 
    rT = promote_type(T, P)
    coeffs = rT.(b.coeffs)
    coeffs[1] += a
    return SimplePolynomial(coeffs)
end

function Base.:+(b::SimplePolynomial{P}, a::T) where {P <: Number, T <: Number} 
    return a+b
end

function Base.:+(a::SimplePolynomial{P1}, b::SimplePolynomial{P2}) where {P1 <: Number, P2 <: Number} 
    rT = promote_type(P1, P2)
    if length(b) > length(a)
        coeffs = zeros(rT, length(b))
        coeffs[1:length(a)] = a.coeffs[:]
        coeffs += b.coeffs
    else 
        coeffs = zeros(rT, length(a))
        coeffs[1:length(b)] = b.coeffs[:]
        coeffs += a.coeffs
    end
    return SimplePolynomial(coeffs)
end

function Base.:-(a::SimplePolynomial{P1}, b::SimplePolynomial{P2}) where {P1 <: Number, P2 <: Number} 
    return a + (-b)
end

function Base.:-(b::SimplePolynomial{P}, a::T) where {P <: Number, T <: Number} 
    return b+(-a)
end

function Base.:-(a::T, b::SimplePolynomial{P}) where {T <: Number, P <: Number} 
    return a+(-b)
end

function Base.:*(a::T, b::SimplePolynomial{P}) where {T <: Number, P <: Number} 
    return SimplePolynomial(b.coeffs*a)
end

function Base.:*(b::SimplePolynomial{P}, a::T) where {P <: Number, T <: Number} 
    return SimplePolynomial(b.coeffs*a)
end

function Base.:*(a::SimplePolynomial{P1}, b::SimplePolynomial{P2}) where {P1 <: Number, P2 <:Number} 
    rT = promote_type(P1, P2)
    ord1, ord2 = degree(a), degree(b)
    ord = ord1*ord2
    coef = zeros(rT, ord+2)
    
    for i in 0:ord1, j in 0:ord2
        @inbounds coef[i+j+1] += a.coeffs[i+1]*b.coeffs[j+1]
    end
    return SimplePolynomial(coef)
end

function Base.:/(b::SimplePolynomial{P}, a::T) where {P <: Number, T <: Number} 
    return SimplePolynomial(b.coeffs/a)
end
```

</br>



최고차항의 계수가 1인 다항식을 monic 이라고 한다. 이에 대해서도 구현한다. `monic` 함수는 다항식의 최고차항의 계수가 `a` 일 때 전체 계수를 `a` 로 나누어주어 최고차 항의 계수를 1 로 만든다.

```julia
function monic(p::P) where P<:SimplePolynomial
    return p/p.coeffs[end]
end
```

</br>

## 다항식의 미분과 적분

다항식 $p(x) = a_0 + a_1 x + \cdots + a_n x^n$ 일 때,

$$
\begin{aligned}
\dfrac{d}{dx}p(x) &= a_1 + 2a_2 x + \cdots + na_n x^{n-1},\\
\int_x p(t)\, dt &=a_0 x + \dfrac{a_1}{2}x^2 + \cdots + \dfrac{a_n}{n+1}x^{n+1} + \text{const.}
\end{aligned}
$$

임을 안다. 이것을 이용하여 다항식을 미분하는 함수 `derivative` 와 정적분 함수 `integrate` 함수를 구현하였다. `integrate` 함수의 경우, 다항식만 입력되면 상수항이 0 인 부정적분, 다항식과 수(number) 하나가 입력되면 이 수가 상수항인 부정적분을 반환하며, 다항식과 수 두개가 입력되면 첫번째 수에서 두번째 수 까지의 정적분값을 반환하도록 하였다.

```{.julia code-line-numbers="true"}
function derivative(p::SimplePolynomial)
    if length(p) < 2 
        return SimplePolynomial([one(eltype(p.coeffs)), ])
    else
        coeffs = p.coeffs[2:end] .* (1:(length(p)-1))
        return SimplePolynomial(coeffs)
    end
end

function integrate(p::SimplePolynomial, a::Union{Nothing, Number}=nothing, b::Union{Nothing, Number}=nothing) 

    if eltype(p.coeffs) <: Integer
        coeffs = zeros(Float64, length(p)+1)
    else 
        coeffs = zeros(eltype(p.coeffs), length(p)+1)
    end
    
    for i in 1:length(p.coeffs)
        coeffs[i+1] = p.coeffs[i]/(i)
    end
    
    if a === nothing && b === nothing # 상수항이 0 인 부정적분
        coeffs[1] = zero(eltype(coeffs))
        return SimplePolynomial(coeffs)
    elseif a === nothing || b === nothing # 상수항이 a 혹은 b 로 주어진 부정적분
        coeffs[1] = a
        return SimplePolynomial(coeffs)
    else # a 에서 b 구간 까지의 정적분
        return evalpoly(b, coeffs) - evalpoly(a, coeffs)
    end
end
```

</br>

## 근을 이용하여 다항식을 만들기

monic 다항식 $p(x)$ 의 전체 근이 $x_1,\,x_2,\ldots,\,x_n$ 라고 하면 

$$
p(x) = c \prod_{i=1}^n (x-x_i)
$$

이다. 우리는 이미 다항식의 곱셈을 구현했으므로 이를 쉽게 구현 할 수 있다. 

```julia
function polynomial_from_roots(xp::AbstractVector{T}) where T<:Number 
    return prod([SimplePolynomial([-x0, 1]) for x0 in xp])
end
```

그렇다면, 

```julia
pp3 = polynomial_from_roots([1.0, 1.0, 2.0])
```

에 대해 다음의 출력이 나온다.

```julia
SimplePolynomial(1.0 x^3 - 4.0 x^2 + 5.0 x^1 - 2.0)
```

$(x-1)^2(x-2)= x^3-4x^2+5x-2$ 이므로 정확한 결과가 나왔다. 이 다항식 복합타입은 앞으로도 계속 개선되며 사용 될 것이다.

---
title: "Makie 로 Plotting"

number-sections: true
number-depth: 3
crossref:
  chapters: false
---


## Julia 언어의 Plotting 패키지

Jupyter 혹은 vscode notebook 을 사용하여 그래프를 그리거나 혹은 julia script 로 그래프를 파일로 저장할 수 있는 패키지는 여러가지가 있으며, 대표적으로 [Plots](https://docs.juliaplots.org/stable/) 와 [Makie$^1$](https://docs.makie.org/v0.21/)[$^1$ Makie.jl 의 공식 홈페이지에 따르면 *Mah-kee* 로 발음한다고 하며 어원은 일본의 [마키에(蒔絵, まきえ)](https://en.wikipedia.org/wiki/Maki-e) 이다. ]{.aside}, Python 의 matplotlib 을 그대로 쓰게 해주는 [PyPlot.jl](https://github.com/JuliaPy/PyPlot.jl) 가 있다. 여기서는 Makie 를 소개한다.


</br>

## Backends

정확히 말하면 Makie 는 프론트엔드로서 플로팅에 대한 여러가지 내부적인 기능을 가지고 있으며, 실제 그래프가 보여지는 것은 백엔드를 통해서이다. 물론 어떤 기능은 특정한 백엔드에서만 가능하다. 2024년 6월 현재 Makie 는 4가지 백엔드가 존재한다. 

| Package | Description |
|:-----:|:----------------|
| `GLMakie.jl`	 | 독립적인 윈도우에서 플로팅되며 GPU-기반의 대화형(interactive) 2D, 3D 플로팅에 사용된다.|
| `CairoMakie.jl` | `Cairo.jl` 기반의 비대화형(non-interactive) 2D, 3D 플로팅에 사용된다. |
| `WGLMakie.jl` | WebGL 기반의 대화형 2D, 3D 플로팅에 사용되며 웹브라우저로 플로팅한다. |
| `RPRMakie.jl` | 실험적인 ray-tracing 패키지 |

`WGLMakie.jl` 과 `RPRMakie.jl` 은 아직은 불안정하므로 `CairoMakie.jl` 이나 `GLMakie.jl` 을 사용하는 것을 추천한다. 보통 상호작용이 필요할 때는 `GLMakie.jl` 을 그렇지 않고 고품질의(publication quality) 의 정적인 플로팅을 원할때는 `CairoMakie.jl` 을 사용한다. 



</br>

## CairoMakie

Julia REPL 에서 `]add CairoMakie` 로 설치한다. `Makie.jl` 이 설치가 안되었다면 자동으로 설치해준다. Jupyter 환경이나 Pluto 환경에서는 자동적으로 그 환경에서 출력해준다. 가장 간단한 플로팅을 해 보자.

```julia
t = 1:0.1:(4*π)
lines(t, cos.(t))
``` 

![Makie Plot 1](makie1.png){#fig-makie_plot_1 width=400}

`lines` 함수는 위의 그림과 같이 선 그래프를 만든다. 다음을 보자.

```julia
t = 1:0.1:(4*π)
fig, ax, ls = lines(t, cos.(t))
lines!(ax, t, sin.(t))
fig
``` 

![Makie Plot 2](makie2.png){#fig-makie_plot_1 width=400}

`fig, ax, ls = lines(t, cos.(t))` 에서 `fig` 는 `Figure` 타입, `ax` 는 `Axis` 타입, `ls` 는 `Lines` 타입의 객체이다. `Figure` 는 우리가 그리고자 하는 전체 그림을 표현한다. `Axis` 는 우리가 그래프를 그리는 좌표계와 그 좌표계에서 출력되는 선, 도형, 숫자들을 의미한다. `Lines` 는 우리가 그린 선 그래프의 선을 의미한다. 이 때 `Axis` 는 `Figure` 에 포함되어 있으며, `Lines` 는 `Axis` 에 포함된다.

`lines!(ax, t, sin.(t))` 를 보자. 앞서 여러번 설명했듯이 Julia 는 관례적으로 어떤 함수가 변수로 입력되는 인스턴스를 변경한다면 함수 이름 끝에  `!` 를 붙인다. 이 명령어는 앞의 `fig, ax, ls = lines(t, cos.(t))` 로 만들어진 `ax` 객체를 변경하기 때문에 `!` 를 붙였다. 앞서 만들어진 `Axis` 인스턴스 `ax` 에 새로은 선그래프를 추가한다. 마지막줄은 `fig` 를 출력하라는 의미이다. 마지막줄이 없다면 그림이 만들어지긴 하지만 출력되지는 않는다. 

</br>

이제 좀 더 그럴듯한 그림을 그려보자.

```julia
using LaTeXStrings
t=0.0:0.5:25.0
data = 4.0 .* exp.(-0.4 .* t) .+ (rand(length(t)) .- 0.5)
fig = Figure()
ax = Axis(fig[1, 1],
    title = "Exponential Decay and Fit",
    xlabel = "Time [Arb. Unit]",
    ylabel = "Value",
)
scatter!(
    ax,
    t,
    data,
    color = :tomato,
    label = "Measurements"
)
lines!(
    ax,
    t,
    4.0 .* exp.(-0.4 .* t),
    color = :blue,
    linestyle = :dash,
    label = L"f(x) = \exp(-0.4 t)",
)
axislegend(position = :rt)
fig
```

![Makie Plot 3](makie3.png){#fig-makie_plot_1 width=400}

`fig = Figure()` 는 `Figure` 객체를 생성하여 `fig` 변수에 할당한다. `ax` 는 `Axis` 인스턴스로 맨 앞의 `fig[1, 1]` 은 그림에 포함되는 여러 부분 가운데 첫번째라는 의미이다. 각 `Axis` 마다 `title`, `xlabel`, `ylabel` 등을 지정 할 수 있다. 그 다음의 `scatter!` 나 `lines!` 명령어는 Scatter 그래프와 선그래프를 그리라는 명령어이며, `axislegend` 함수는 각 그래프의 label 과 모양을 표시하라는 의미아다. `position=:rt` 는 위치를 `Axis` 의 오른쪽(right) 위(top) 에 표현하라는 의미이다. 


---
title: "유닛테스트 : Test.jl"

number-sections: true
number-depth: 3
crossref:
  chapters: false
---

유닛테스트(Unit test) 혹은 단위테스트는 작성한 함수의 실행 결과가 기대했던 것과 일치하는지 여부를 확인하는 것을 말합니다. 이를 위해 `Test.jl` 을 설치합니다.

여기서는 유닛테스트의 기초적인 내용을 다룹니다. 자세한 내용은 Julia 공식 매뉴얼의 [Unit Testing](https://docs.julialang.org/en/v1/stdlib/Test/#Unit-Testing) 을 참고하시기 바랍니다.

</br>

## `@test` 매크로를 사용한 유닛테스트

가장 간단한 단위테스트 입니다. 어떤 표현식 `ex` 에 대해 아래와 같은 네가지 방법으로 사용할 수 있습니다.

```julia
@test ex
@test f(args...) key=val ...
@test ex broken=true
@test ex skip=true
```


</br>

### `@test` 

`@test` 다음에 `true` 혹은 `false` 를 반환하는 표현식이 올 경우 `true` 이면 테스트를 통과한 것으로, `false` 이면 실패한 것으로 간주합니다.

```txt
In [1]: using Test

In [2]: @test 2+3 == 5
Out[2]: Test Passed

In [3]: @test 3 == 5
Test Failed at REPL[3]:1
  Expression: 3 == 5
   Evaluated: 3 == 5

ERROR: There was an error during testing
```

</br>

### `@test f(args...) key=val ...`

`isapprox(a, b; atol=1.0e-10)` 함수는 `norm(b-a)` 가 `atol` 키워드 인자로 주어진 값보다 작으면 `true` 를 아니면 `false` 를 반환합니다. (`isapprox` 함수는 수 뿐만 아니라 배열에 대해서도 사용할 수 있으며 `atol` 이외의 키워드 인자도 입력 할 수 있습니다. Julia 에 포함된 공식 문서를 참고하시기 바랍니다.) 이 함수에 대해 다음과 같이 테스트 할 수 있습니다. 

```txt
In [2]: @test isapprox(1.0e-7, 0.0, atol=1.0e-5)
Out[2]: Test Passed

In [3]: @test isapprox(1.0e-7, 0.0) atol=1.0e-5
Out[3]: Test Passed
```

`@test` 다음에 함수가 올 때는 키워드 인자를 함수의 `( )` 안에 넣어도 되고 밖에 넣어도 됩니다.

</br>

### `broken=true` 혹은 `broken=false` 조건

단위테스트에서는 어떤 표현식이 틀리거나 예외를 발생시키 것으로 함수의 기능을 확인해야 할 때가 있는데 이런 경우에 사용합니다. `broken` 인자는 `true` 이거나 `false` 이어야 합니다. `broken=true` 조건에서는 `ex` 표현식이 `false` 이거나 예외를 발생시킬 때 테스트를 통과한 것으로 간주합니다. `broken=true` 조건이라면 일반적인 `@test ex` 와 같습니다.

```txt
In [1]: @test [2, 3] + "a"  broken=true
Out[1]: Test Broken
  Expression: [2, 3] + "a"

In [2]: @test 3==4 broken=true
Out[2]: Test Broken
  Expression: 3 == 4

In [3]: @test 2+3==5 broken=false
Out[3]: Test Passed

In [4]: @test 2+3==5 broken=true
Error During Test at REPL[15]:1
 Unexpected Pass
 Expression: 2 + 3 == 5
 Got correct result, please change to @test if no longer broken.
```

`In [1]` 의 경우 `[2, 3] + "a"` 는 예외를 발생시켜야 하는데 `broken=true` 조건으로 인해 테스트를 통과하게 됩니다. 일반적인 통과가 아니므로 출력 메시지가 `Test Broken` 이 됩니다. `In [2]` 의 경우 `3==4` 는 `false` 이므로 역시 broken test 를 통과합니다. 

`In [3]` 에서 `broken=false` 를 주면 `@test` 와 동일하다는 것을 확인할 수 있습니다.

`In [4]` 에서는 표현식이 `true` 이며 `broken=true` 옵션이 주어지면 에러가 발생한다는 것을 보여줍니다.

</br>

### `skip=true` 혹은 `skip=false` 조건

이 옵션은 주로 아직 구현되지 않은 함수에 대해 미리 테스트 구문을 만들어 놓을 때 사용합니다. `skip=true` 이면 무조건 `Test Broken` 을 리턴합니다. `skip=false` 이면 `skip` 옵션을 지정하지 않은것과 같습니다.

```txt
In [27]: @test 2==3 skip=true
Out[27]: Test Broken
  Skipped: 2 == 3

In [28]: @test 2==3 skip=true
Out[28]: Test Broken
  Skipped: 2 == 3
```



</br>

## `@test_throws`

`@thest_throws exception expr` 구문은 표현식 `expr` 이 실제로 예외 `exception` 을 발생시키는지를 확인합니다. 

```txt
In [1]: f(x) = [x x+1 x+2]
Out[1]: f (generic function with 1 method)

In [2]: @test_throws BoundsError f(3)[4]
Out[2]: Test Passed
      Thrown: BoundsError
```

함수 `f(x)` 는 `[x x+1 x+2]` 라는 길이가 3인 배열을 반환하므로 `f(3)[4]` 는 `BoundsError` 를 발생시킵니다.

</br>

## `@testset`

### `@testset` 

아주 간단한 함수를 테스트하는 것이 아니라 어느 정도 규모가 있는 모듈이나 패키지를 테스트한다면 테스트 구문이 여러개 필요합니다. 일단 `begin ... end` 블록으로 처리 할 수 있을 것 같습니다. 아래의 예를 봅시다.

```txt
In [11]: begin
         @test 2^2==4
         @test 3+3==6
         end
Out[14]: Test Passed
```

테스트가 통과했다는 메시지가 나옵니다. 만약 첫번째 테스트 구문을 통과하지 못한다면 어떻게 될지 확인해 봅시다.

```txt
In [12]: begin
        @test 1+1==3
        @test 3+3==6
        end
Test Failed at REPL[6]:2
  Expression: 1 + 1 == 3
   Evaluated: 2 == 3
```

`begin`, `end` 블록 안에 여러개의 `@test` 혹은 `@test_throws` 구문을 넣었을 때 중간에 테스트가 실패한다면 거기서 즉시 멈추고 이후의 테스트를 수행하지 않습니다. 위에서는 `@test 1+1==3` 에서 테스트가 실패했기 때문에 그 다음의 `@test 3+3==6` 을 수행하지 않았습니다. 

여러개의 테스트를 수행하며, 중간에 테스트를 실패하더라도 계속 수행하고, 최종적으로 성공한 테스트와 실패한 테스트에 대해 보고해주는 매크로가 `@testset` 매크로 입니다. 기본적으로 `@testset` 은 함수 내에 사용 되거나 `@testset` 이후의 `begin ... end` , `for ... end`, `let ... end` 블럭으로 사용됩니다. 

</br>

### `@testset` 이름과 옵션

`@testset` 매크로는 별도의 이름을 부여할 수 있습니다. 또한 옵션도 줄 수 있습니다. 

```txt
In [19]: @testset "Simple Test Set" showtiming=true begin
         @test 2^2==4
         @test 3+3==6
         end;
Test Summary:   | Pass  Total  Time
Simple Test Set |    2      2  0.0s
```

`@testset [테스트셋 이름] [옵션] begin ... end` 형식으로 `begin` 과 `end` 사이에 `@test`, `@test_throws` 혹은 다른 `@testset` 구문이 들어 갈 수 있습니다. 즉 `@testset` 은 중첩 될 수 있습니다. `[테스트셋 이름]` 은 문자열 이며 생략 될 수 있습니다. `[옵션]` 은 아래의 세가지가 있으며 역시 생략 될 수 있습니다. 

| 옵션 | 설명 |
|:---:|:-------------------------|
| `verbose` | `true` 이면 중첩된 `@testset` 구문의 결과도 모두 보여줍니다. 기본값은 `false` 이며 이 경우 중첩된 `@testset` 이 모두 `Pass` 이면 결과를 보여주지 않습니다. |
| `showtiming` | `true` 이면 테스트 수행 시간을 보여줍니다. 기본값은 `true` 입니다. |
| `failfast` | `true` 이면 중간에 테스트가 실패할 경우 이후 테스트를 수행하지 않고 그때까지의 결과값을 반환합니다. 환경변수 `JULIA_TEST_FAILFAST` 를 통해 기본값을 설정 할 수 있으며 이 변수값이 설정되지 않았을 경우에는 기본값은 `false` 입니다. |
: `@testset` 옵션 {#tbl-testset_option}

</br>

### `@testset for ... end`

`@testset` 에 `for ... end` 블럭을 결합한 것입니다. 아래와 같이 사용합니다. 

```txt
In [24]: @testset for k ∈ 1:4
         @test sin(-k*π) ≈ - sin(k*π)
         @test cos(-k*π) ≈ cos(k*π)
         end;
Test Summary: | Pass  Total  Time
k = 1         |    2      2  0.0s
Test Summary: | Pass  Total  Time
k = 2         |    2      2  0.0s
Test Summary: | Pass  Total  Time
k = 3         |    2      2  0.0s
Test Summary: | Pass  Total  Time
k = 4         |    2      2  0.0s
```

여기서 `≈` 는 주어진 부동소수의 오차 내에서 일치하는지에 대한 연산자로 내부적으로 `isapprox` 함수를 사용합니다. 

</br>

### `@testset let ... end`

임시로 함수나 변수를 정하여 사용할 수 있습니다.

```txt
In [25]: @testset let logi = log(im)
         @test imag(logi) == π/2
         @test !iszero(real(logi))
         end;
Test Failed at REPL[25]:3
  Expression: !(iszero(real(logi)))
     Context: logi = 0.0 + 1.5707963267948966im

ERROR: There was an error during testing
```












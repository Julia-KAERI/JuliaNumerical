---
title: "패키지 개발"
number-sections: true
number-depth: 2
crossref:
  chapters: false
---


우리는 이미 `Pkg.jl` 을 통해 패키지를 설치, 제거하거나 업데이트 하는 것을 알고 있습니다. `Pkg.jl` 은 이것 뿐만 아니라 패키지 개발에 필요한 **환경(environment)** 를 설정하고 제어 할 수 있도록 해 줍니다. 여기서는 당신이 어떤 julia 패키지를 개발하며 그것을 github 에 올려놓고 관리한다는 것을 가정합니다. github 사용법을 자세히 다루지 않으며, 당신이 이미 github 계정을 가지고 있다는 것을 가정합니다. 

환경이란 julia 에서 제공하는 별도의 실행 공간이라고 생각할 수 있습니다. 각 환경은 julia 인터프리터와 기본 설치되는 패키지만을 공유합니다. 각 환경마다 별도의 패키지를 설치 할 수 있으며 각 환경마다의 출입이 자유롭습니다. 두개의 환경을 동시에 사용하지는 못합니다. 보통은 당신이 패키지를 개발 할 때 패키지마다 하나의 환경을 만들어서 개발합니다. 새로운 디렉토리와 환경을 만들고 관리하는데 필요한 작은 파일들로 인해 당신의 하드디스크를 약간 소비하지만 충분한 이점이 있습니다. 환경과 더불어 중요한 용어가 **의존성(dependency)** 입니다. 당신이 패키지를 개발하는데 필요한 julia 자체와 julia 의 다른 패키지, 그리고 각각의 버젼을 합쳐서 의존성이라고 합니다. 

새로운 패키지를 개발한다면 github 에 리포지터리를 생성합니다. 리포지터리 이름은 당신이 만들고자 하는 패키지 이름 + ".jl" 로 합니다. 예를 들어 `MyAwesomePackage.jl` 같은 이름을 사용 할 수 있습니다. 여기서는 `NAJ.jl` 로 합니다. 간단하게 `readme.md` 파일을 작성할 수도 있습니다.


</br>


## 시작하기 

이제 터미널에서 `NAJ.jl` 를 시작할 디렉토리에 들어갑니다. 예를 들어 `Users\myacc\Project` 디렉토리에 `NAJ.jl` 디렉토리를 만들고 이 디렉토리에서 패키지를 만들고 싶다면 `Users\myacc\Project` 로 이동합니다. 그리고 julia REPL 을 실행시키고 `]` 키를 통해 pkg 모드에 진입합니다.

```txt
(@v1.10) pkg>
```

이제 패키지를 초기화 합니다. 

```txt
(@v1.10) pkg> generate NAJ.jl
  Generating  project NAJ:
    NAJ.jl/Project.toml
    NAJ.jl/src/NAJ.jl
```

`NAJ.jl` 디렉토리가 생겼고 그 디렉토리 밑에 `Project.toml` 파일과 `src` 디렉토리가 생겼으며, `src` 디렉토리 밑에 `NAJ.jl` 파일이 생겼습니다. `Project.toml` 파일은 프로젝트의 정보와 설정을 담는 파일이고, 패키지 이름과 같은 `NAJ.jl` 파일은 패키지의 julia 코드를 저장합니다.

julia 에는 현재 작업 디렉토리라는 개념이 있습니다. julia 인터프리터의 경우 인터프리터를 시작할 때 별도로 지정하지 않았아면 julia 인터프리터를 실행한 디렉토리입니다. julia 인터프리터에서 `pwd()` 함수로 확인 할 수 있으며, `cd()` 함수를 통해 현재 작업 디렉토리를 이동 할 수 있습니다. `NAJ.jl` 로 이동합니다.

```txt
In [1]: cd("NAJ.jl")

In [2]: pwd()
Out[2]: "/Users/jiyong/development/Projects/NAJ.jl"
```

이제 터미널로 나갑니다. 이제 `NAJ.jl` 디렉토리와 git 저장소를 동기화합니다.

```sh
git init
git remote add origin https://github.com/Julia-KAERI/NAJ.jl.git
```

현재 저장소는 비어 있으므로 이미 존재하는 파일과 디렉토리를 업로드합니다. 브랜치 이름은 `main` 이나 `master` 일 것입니다. 터미널에서 `git status` 명령어로 확인합니다.

```sh
git add .
git commit -m "first_upload"
git push origin main # main 혹은 master 
```

여기까지 별 문제가 없었다면 준비가 다 된 것입니다. 

</br>

## 활성화

Julia 인터프리터의 pkg 모드에서 `activate .` 명령은 현재 디렉토리의 환경을 활성화 하라는 명령입니다. 

```txt
(@v1.10) pkg> activate .
  Activating new project at `~/development/Projects/NAJ.jl`

(NAJ.jl) pkg>
```

프롬프트가 `(NAJ.jl)` 로 바뀌었습니다. 즉 여러분의 환경이 변했습니다. `activate` 만 치면 기본 환경, 즉 julia 가 처음 설치되었을때의 환경으로 돌아갑니다. 실행 후 입력 프롬프트에서 환경을 확인 할 수 잇습니다.

```txt
(NAJ.jl) pkg> activate
  Activating project at `~/.julia/environments/v1.10`
(@v1.10) pkg>
```

현재까지 당신의 `NAJ.jl` 디렉토리는 패키지 생성에서 만든 파일, 디렉토리와 github 에서 사용하는 `.git` 디렉토리를 제외하면 비어있습니다.

```txt
In [2]: readdir()
Out[2]: 3-element Vector{String}:
 ".git"
 "Project.toml"
 "src"
```

환경을 활성화 하는 방법은 REPL 에서 `using Pkg` 로 `Pkg` 를 임포트 한후 `activate` 함수를 사용하는 방법도 있습니다. `activate` 함수의 인자로는 환경이 설치된 경로가 필요합니다.

```julia
using Pkg
Pkg.activate("~/development/Projects/NAJ.jl")
```

`Pkg.status()` 함수나 `pkg` 모드의 `status` 명령어로 현재의 환경을 확인 할 수 있습니다.

```txt
In [4]: Pkg.status()
Project NAJ v0.1.0
Status `~/development/Projects/NAJ.jl/Project.toml` (empty project)
```
</br>

## 패키지 추가

당신이 패키지를 개발하는 데 필요한 외부 패키지를 하나 추가해 봅시다. 쉽게 삭제 할 수 있으니 걱정하지 않아도 됩니다. 아직 생각나지 않는다면 `Example` 패키지를 추가해 봅시다.

```txt
(NAJ) pkg> add Example
   Resolving package versions...
    Updating `~/development/Projects/NAJ.jl/Project.toml`
  [7876af07] + Example v0.5.3
    Updating `~/development/Projects/NAJ.jl/Manifest.toml`
  [7876af07] + Example v0.5.3
Precompiling project...
  1 dependency successfully precompiled in 2 seconds. 1 already precompiled.
```

이제 패키지 폴더에 `Manifest.toml` 파일이 추가되었으며 `Pkg.status()` 함수를 통해 패키지가 추가되었다는 것을 확인 할 수 있습니다.

```txt
In [8]: readdir()
Out[8]: 3-element Vector{String}:
 ".git"
 "Manifest.toml"
 "Project.toml"

In [9]: Pkg.status()
Status `~/development/Projects/NAJ.jl/Project.toml`
  [7876af07] Example v0.5.3
```

</br>

## `Project.toml` 과 `Manifest.toml`

[`toml`](https://toml.io/ko/v1.0.0) 은 설정을 간편하게 읽고 쓰게 해주는 파일 포멧이며 보통 `.toml` 확장자를 갖습니다. 텍스트 형식으로 저장하기 때문에 문서편집기에서 직접 편집 할 수 있습니다. 두 파일에 대해 간략히 요약하면 다음과 같습니다.


- `Project.toml` : 프로젝트 파일은 상위 수준에서 프로젝트를 설명합니다. 패키지 작성자 및 이름, 패키지 자체의 버전 정보 및 UUID, 의존성 및 호환성이 이 파일에 나열됩니다. 

- `Manifest.toml` : 환경 내의 패키지 상태에 대한 절대적인 기록입니다. 여기에는 프로젝트의 (직접 및 간접) 의존성에 대한 정확한 정보가 포함됩니다. 보통은 환경의 변경 및 패키지 설치/제거 에 따라 자동적으로 생성되며 사용자가 건드리지 않습니다.


`Project.toml` 과 `Manifest.toml` 쌍이 주어지면 정확히 동일한 패키지 환경을 복원하거나 생성 할 수 있으며 이는 재현성에 매우 유용합니다. 자세한 내용은 [`Pkg.instantiate`](https://pkgdocs.julialang.org/v1/api/#Pkg.instantiate)를 참조하기 바랍니다.

이제 `Project.toml` 파일에 패키지 정보를 추가합시다. 우선 현재의 파일은 다음과 같을 것입니다.

```toml
name = "NAJ"
uuid = "3a8672d3-a8d7-4fb7-80dc-526698d5a642"
authors = ["julia-KAERI <julia.kaeri@gmail.com>"]
version = "0.1.0"

[deps]
Example = "7876af07-990d-54b4-ab0e-23690620f79a"
```

`name` 은 패키지 이름, `authors` 는 저자들 정보, `versions` 는 버젼 정보입니다. 버젼 정보는 `.`으로 이어진 세개의 수로 구성되며 보통 주버젼, 부버젼, 패치버젼을 말합니다. 보통 정식으로 배포되기전에는 주버젼을 `0` 으로 합니다. 현재는 초기 상태이므로 버젼이 "0.1.0" 입니다. `uuid` 는 범용 고유 식별자(universally unique identifier) 의 영어 약자로 여기서는 패키지마다 부여되는 고유한 번호라고 생각할 수 있습니다. 
 

</br>

## 패키지 메인 파일 

여기서는 패키지 이름과 같은 `NAJ.jl" 이며 `src` 디렉토리에 있습니다. 템플릿으로 주어지는 내용은 다음과 같습니다.

```julia
module NAJ

greet() = print("Hello World!")

end # module NAJ
```

</br>

이제 여러분이 여기를 채워가면 됩니다.



---
title: "다중스레드"

number-sections: true
number-depth: 2
crossref:
  chapters: false
---

프로그램은 최소한 하나의 프로세스로 실행되며, 프로세스는 최소한 하나의 쓰레드로 실행됩니다. 프로그램이 여러개의 프로세스로 실행되는 것을 멀티 프로세싱(multi-processing) 이라고 하며, 하나의 프로세스가 여려개의 쓰레드로 실행되는 것을 다중 스레딩(multi-threading) 이라고 합니다.

하나의 프로세스는 메모리상에 독립적으로 실행 코드와 데이터가 함께 기록됩니다. 쓰레드는 프로세스에 종속되며 프로세스상의 공통 자원에 접근 할 수 있습니다. 그러나 프로세스간에는 자원을 공유 할 수 없으며 IPC(inter-process communication) 를 통해 데이터를 주고 받을 수 있을 뿐입니다. 데이터를 주고 받는 것일 뿐 이 데이터는 각각의 프로세스에서 각각의 메모리 공간에 기록될 뿐 한 프로세스에서 다른 프로세스의 자원에 접근 할 수 있는 것은 아닙니다.



Julia 는 실행시킬 때 지정되거나 사용자 환경변수로 지정하지 않았을 때는 단일 쓰레드로 실행됩니다. 현재의 Julia 에서 사용할 수 있는 스레드의 갯수는 `Threads.nthreads()` 함수로 확인 할 수 있는데, 저자의 경우 환경변수로 지정했기 때문에 Julia 가 실행 될 때 마다 12 개의 스레드로 시작합니다.


```txt
In [1]: Threads.nthreads()
Out[1]: 12
```

Julia  REPL 을 시작할 때 `julia --thread 4` 혹은 `julia -t 4`와 같이 스레드 갯수를 지정할 수 있습니다. 혹은 환경변수로 지정하여 자동으로 스레드 수를 정하는 방법이 있습니다. 환경변수로 지정하는 것은 운영체제마다, 혹은 당신이 사용하는 shell 마다 다를 수 있기 때문에 여기서는 다루지 않겠습니다. `Sys.CPU_THREADS` 변수는 최대로 사용할 수 있는 쓰레드의 갯수를 보여줍니다. 이 값보다 약간 작은 값을 사용하는것이 좋습니다.

```txt
In [1]: Sys.CPU_THREADS
Out[1]: 16
```

</br>

## `for` 루프에서의 `Theads.@threads`

`for` 루프 앞에 `Threads.@threads` 를 쓰면 자동적으로 다중스레딩으로 수행합니다.. 아래 코드는 $[0, 1)$ 구간에서의 임의의 수로 이루어진 10000 × 10000 행렬을 만든 후 각행과 열에에 대한 합을 구하는 코드를 싱글 스레드와 다중스레드로 구현한 것입니다.  

```julia
using BenchmarkTools

N = 1000
bb = rand(N, N)

# 행에 대한 합, 단일스레드
r1 = zeros(N)
@btime begin
    for i in 1:N
        r1[i] = sum(bb[i, : ])
    end
end

# 행에 대한 합, 다중스레드
r2 =  zeros(N)
@btime begin
    Threads.@threads for i in 1:N
        r2[i] = sum(bb[i, :])
    end
end

# 열에 대한 합, 단일스레드
r3 =  zeros(N)
@btime begin
    for i in 1:N
        r3[i] = sum(bb[:, i])
    end
end

# 열에 대한 합, 다중스레드
r4 =  zeros(N)
@btime begin
    Threads.@threads for i in 1:N
        r4[i] = sum(bb[:, i])
    end
end
```

결과는 다음과 같습니다.

```txt
  3.375 ms (5957 allocations: 7.84 MiB)
  635.961 μs (5030 allocations: 7.82 MiB)
  1.744 ms (5957 allocations: 7.84 MiB)
  393.205 μs (5028 allocations: 7.82 MiB)
```

12개의 스레드를 이용했을 때 단일 스레드보다 약 4~5배 이상 빨라졌으며, 행에 대한 합보다 열에 대한 합이 더 빠릅니다. 열에 대한 합이 더 빠른 것은 julia 가 배열에서 행 우선 방식을 사용하기 때문입니다. [[행렬의 열/행 우선 방식](../introduction_to_julia/06_arrays.qmd#sec-majority_of_index) 를 참고하십시요.]{.aside}


</br>

## 안전한 스레드


다음의 코드를 봅시다.

```julia
s = 1
Threads.@threads for i in 1:5
    global s += (-1)^(s+i)
    @show i, s
end
println(s)
```

실행시킬 때마다 `i` 값과 `s` 값, 그리고 결과로서 나오는 `s` 값이 달라진다는 것을 확인 할 수 있습니다. 즉 `1` 에서 `5` 사이에 있는 `i` 값중 어떤 값을 가진 스레드가 먼저 실행되어 `s` 값을 결정하는지에 대한 순서는 무작위적이며, 따라서 결과로서 나오는 `s` 값도 그때 그때 달라집니다. 이렇게 여러 스레드 혹은 프로세스가 공유하는 값(여기서는 `s`) 에 접근하는데 그 접근 순서가 결과값에 영항을 줄 수 있는 상태를 **경쟁 상태 (race condition)** 라고 하며 실제제로 데이터 값이 변하는 것을 **데이터 레이스 (data race)** 라고 합니다. 


데이터 레이스가 발생하는 더 심각한 상태는 여러 개의 스레드가 동시에 접근하여 동시에 읽거나 쓸 때 입니다. 다음의 코드를 봅시다.

```julia
Base.@kwdef mutable struct ms
    a::Int
    b::Int
end

c=ms(1, 1)
Threads.@threads for i in 1:10
    c.a = i
    c.b +=c.a*i
end
println(c)
```

만약 한 스레드가 `ms` 객체를 읽고 쓸 때 다른 스레드가 멈추고 있다면 이 객체의 값은 항상 같을 것입니다. 이 코드를 여러번 실행시켜봐 가며 확인해보면 알듯이 그 값이 실행시킬 때마다 다릅니다. 그것은 여러 스레드가 동시에 읽고 쓰고 있다는 의미입니다. 그것을 막기 위해 `Threads.ReentrantLock()` 함수를 이용하여 다음과 같이 할 수 있습니다.

```julia
lk = Threads.ReentrantLock()
d=ms(1, 1)
Threads.@threads for i in 1:10
    lock(lk) do
        d.a = i
        d.b +=c.a*i
    end
end
println(d)
```

이 때 최종적으로 `d` 객체에 접근하는 스레드는 다르기 때문에 `d.a` 값은 다르지만, 한 스레드가 읽고 쓰는 동안 다른 스레드가 읽고 쓸 수 없기때문에 `d.b` 의 값은 항상 같게 됩니다.


최종적으로 데이터 레이스에 대한 책임은 전적으로 여러분에게 있습니다. 위의 방법은 도움이 될 수 있지만 모든 경우에 적용될 수 있는 것도 아닙니다.









---
title: "기본 문법"
lang: ko  

number-sections: true
number-depth: 2
crossref:
  chapters: true
---

## 기본 문법

### 기본 제공 문서

비록 영어로 되어 있긴 하지만 Julia 의 기본 도움말은 매우 훌륭합니다. Julia REPL 에서는 `julia> ` 프롬프트에 `?` 를 치면 `help> `로 변경되는 것을 볼 수 있을 것입니다. 여기에 함수 이름이라든가, 타입 이름 같은 것을 치면 그에 대한 도움말을 제공합니다. Jupyter 에서는 입력 셀에 `?sin` 과 같이 `?` 를 맨 앞에 두고 입력한후 실행하면 문서를 찾아 제공합니다. vscode 에서는 자동적으로 팝업 윈도우로 제공합니다. 이렇게 제공되는 문서는 당신이 사용하는 Julia 와 페키지에 대한 공식 문서이므로, 가장 믿을만하고 우선적으로 참고해야하는 문서가 되겠습니다.

Julia 언어에 기본적으로 포함되어있는 함수, 모듈들 이외에 많은 모듈을 설치하게 될텐데 그 모듈들도 대부분 똑같은 형식의 도움말을 제공합니다. 


</br>

### 유니코드 및 수학 기호 지원

Julia 에서는 수학 기호를 포함한 다양한 기호를 입력하고 사용 할 수 있습니다. 유니코드나 수학 기호의 경우 보통 `\` 로 시작되는 구문을 입력한 후에 공백 없이 탭 키를 누르면 자동적으로 기호로 변환된됩니다. 이 때 입력되는 구문은 LaTeX 와 같거나 유사한 경우가 많습니다. 예를 들어 Julia REPL(Julia 에서 지원하는 interactive command line 환경), jupyter notebook, vscode 에서 `\alpha` 를 치고 곧바로 탭(tab) 키를 누르면 `α` 로 변환됩니다. 특히 `π`(`\pi`+[tab]) 와 `ℯ`(`\euler` + [tab]) 는 특정 값이 지정되어 있는 대표적인 수학 기호입니다. `pi` 역시 원주율 입니다.


```sh
julia> π
π = 3.1415926535897...

julia> ℯ
ℯ = 2.7182818284590...

julia> pi
π = 3.1415926535897...
```

</br>

### 변수 할당

많은 프로그래밍 언어처럼 변수에 어떤 값을 지정할 수 있습니다. 이것을 변수 할당이라고 하며 `=` 기호를 사용합니다. `a` 문자에 `3` 이라는 값을 값을 할당하고, 거기에 `2` 를 곱한 결과를 얻는 것은 다음과 같이 할 수 있습니다. 이 때 변수는 `=` 기호의 왼쪽에, 값은 오른쪽에 위치해야 합니다.

```sh
julia> a=3
3

julia> a*2
6
```

변수에 할당 될 수 있는 것은 수(number) 뿐만이 아닙니다. 앞으로 배울 거의 모든 것이 변수에 할당 될 수 있습니다. 예를 들어 `sin(x)` 은 짐작 할 수 있듯이 `x` 에 대한 삼각함수 값을 반환하는 함수입니다. 그런데 `myfunc = sin` 해 버리면 어떻게 될까요?

```sh
julia> myfunc = sin
sin (generic function with 14 methods)

julia> myfunc(π)
0.0

julia> myfunc(2π)
-2.4492935982947064e-16
```

`myfunc` 가 `sin` 함수가 되어 버렸습니다. 이것에 대해 길게 이야기 할 수 있겠지만 단지 함수도 변수에 할당 될 수 있다는 것을 알아두면 좋겠습니다.


</br>

#### 변수 이름 규칙

변수 이름에는 제한이 있습니다. 우선 첫문자는 알파벳 대문자(`A-Z`) 혹은 소문자(`a-z`) 나 밑줄 `_` 혹은 `00A0` 보다 큰 유니코드 문자 가운데 특정 범주에 속하는 문자들이 와야 합니다. 한글은 허용됩니다. 자세한 것은 julia 공식 문서 가운데 [Variables](https://docs.julialang.org/en/v1/manual/variables/) 을 참고 하십시요. 두번째 글자부터는 첫번째 글자로 허용된 문자에 `!` 나 숫자가 올 수 있습니다. 

```julia
julia> 파이 = π
π = 3.1415926535897...

julia> 2*파이
6.283185307179586
```

</br>

### 기본 타입

수(number) 를 포함하는 julia 에서 사용하는 모든 값(value) 은 타입(type) 을 갖습니다. 여기서는 julia 언어 자체에서 정의된 기본 타입에 대해 알아보도록 하겠습니다.

</br>

#### 기본적인 수 타입 {#sec-primary_number_types}

Julia 에서 기본적으로 제공하는 수(number) 에 대한 타입은 다음과 같습니다.

| 타입 종류 | 타입들 | 
|:--:|:------|
| 부호 없는 정수 타입 | `UInt8`, `UInt16`, `UInt32`, `UInt64`, `UInt128` |
| 정수 타입 | `Int8`, `Int16`, `Int32`, `Int64`, `Int128`, `BigInt` |
| 유리수 타입 | `Rational` |
| 부동소수 타입 | `Float16`, `Float32`, `Float64`, `BigFloat` |
| 무리수 타입 | `Irrational` |
| 복소수 타입 | `Complex` |
| 불 타입 | `Bool`|


- 앞서 언급한 `π` ($\pi$) 나 `ℯ` ($e$) 는 무리수 타입으로, 연산할 때 가장 적절한 타입으로 변환되어 계산됩니다. 
- 타입 이름은 다른 타입의 값을 타입으로 변환시키는 함수이기도 합니다. `Float64(1)` 은 `1` 을 `Float64` 타입으로 변환시킵니다.
- 실제 Julia 의 타입 구조는 이보다 훨씬 복잡합니다. 이후 @sec-type_hierarchy 에서 좀 더 자세히 설명하도록 하겠습니다.

</br>

우선 부호 없는 정수타입, 정수타입, 부동소수 타입의 이름의 끝부분에 붙는 `8`, `16`, `32`, `64`, `128` 은 각 타입의 값이 차지하는 비트(bit) 수 입니다. 비트는 on/off 혹은 0/1 로 구분되는 정보 단위입니다.  예를 들어 `UInt8` 의 경우는 8개의 비트로 수를 표현합니다. 2진수로 `00000000` 은 `0` 이며 2진수 `11111111` 은 `255` 입니다. `UInt8` 은 이렇게 0 부터 255 까지의 값을 표현 할 수 있습니다. `UInt64` 는 64 개의 비트로 숫자를 저장하며, 따라서 0부터 2<sup>64</sup>-1 까지의 숫자를 표현 할 수 있습니다.

`Int8` 의 경우는 8비트로 정수를 저장하지만 한 비트는 음수/양수 를 구분하기 위해 사용됩니다. -128 부터 127 까지의 정수를 표현 할 수 있습니다. `Int64` 는 -2<sup>32</sup> 부터 2<sup>32</sup>-1 까지의 숫자를 표현 할 수 있습니다.

부동소수 타입은 좀 복잡합니다. 예를 들어 0.00234 을 표현 할 때 0.00234= 0.23 × 10<sup>-2</sup> 를 이용하여 부호(양수), 지수(-2), 가수 (0.23) 를 비트수를 분할하여 저장합니다. `Float64` 는 부호에 1비트, 지수에 8 비트, 가수에 23비트 를 할당하여 저장합니다. 

유리수 타입은 두개의 정수 타입을 이용하여 하나는 분모, 하나는 분자로 사용하여 유리수를 표현합니다. 복소수 타입은 두개의 실수를 이용하여 하나는 실수부, 하나는 허수부로 사용하여 복소수를 표현합니다.

불 타입은 단지 참을 나타내는 `true` 와 거짓을 나타내는 `false` 의 두 값만을 표현하는 정수형 타입입니다. 수로 변환하면 `true` 는 `1` 이며 `false` 는 `0` 입니다.


</br>

#### 문자와 문자열 {#sec-char_and_string_types}

`Char` 는 ascii 나 유니코드 하나의 문자에 대한 타입이며 `String` 은 하나 이상의 문자에 대한 타입이다. `Char` 타입은 `a` 와 같이 선언하며, 한줄 문자열은 겹따옴표(`"`) 로 감싸고 여러줄 문자열은 겹따옴표 세개(`"""`)로 감싼다.

```julia
julia> char1='가'

julia> str1 = "Hello, world.\n"
"Hello, world.\n"

julia> str2 = """Julia is
       a good programing
       language"""
"Julia is\na good programing\nlanguage"

julia> println(str2)
Julia is
a good programing
language
```

문자열을 합칠 때는 `*` 연산자를 이용하거나 `string()` 함수를 이용하며, 여러번 반복할때는 `^` 연산자 나 `repeat()` 함수를 이용한다. 실제로 `string()` 함수는 인자를 차례대로 문자열로 바꾸어 주는 함수이다.

```julia
julia> "가나다라"*"마바사" # 문자열 합치기
"가나다라마바사"

julia> string("가나다라", "abc", 'π', 5) # 문자열 합치기
"가나다라abcπ5"

julia> "αβγ"^3z # 문자열 반복
"αβγαβγαβγ"

julia> repeat("Δ=", 5) # 문자열 반복
"Δ=Δ=Δ=Δ=Δ="
```

문자열의 길이는 `length()` 혹은 `sizeof()` 함수를 사용한다. 문자열에 접근할 때는 `str1[3]` 과 같이 인덱스를 사용한다. Julia 의 처음 인덱스는 `0` 이 아닌 `1` 이다. 

```julia
julia> str3="abcdefg";str3[2]
'b': ASCII/Unicode U+0062 (category Ll: Letter, lowercase)
```

</br>

##### 문자열 보간 {#sec-string_interpolation}

문자열에 `$` 기호를 통해 이미 정의된 변수를 사용하여 문자열을 구성 할 수 있다. 예를 들어,

```julia
julia> aa=1;bb=22.2;cc="C12";

julia> """aa=$aa, bb=$bb, cc=$cc"""
"aa=1, bb=22.2, cc=C12"
```

보간 이전에 값을 평가해야 할 경우에는 괄호(`( )`) 안에 넣는다 예를 들어 `"$sin(π)"` 는 문자열 `"sin(π)"` 지만 `"$(sin(π))"` 는 `sin(π)` 를 평가한 `0.0` 이 문자열로 입력된다. 즉,

```julia
julia> "$sin(π)"
"sin(π)"

julia> "$(sin(π))"
"0.0"
```
이다.


</br>

#### 심볼 타입 {#sec-symbol_types}

심볼(Symbol) 타입은 문자열과 비슷하지만 문자열은 아니다. 심볼(Symbol) 타입은 `:` 다음의 문자열, 혹은 `Symbol` 이라는 타입 이름을 함수로 사용하여 다음과 같이 선언된다. 

```julia
julia> a=Symbol("bc") # `Symbol` 함수를 이용한 선안
:bc

julia> b=:bc # 콜론 `:` 을 이용한 선언
:bc

julia> a==b # 두 선언은 같다.
true
```
 
심볼 타입은 Julia 에서 소위 [메타 프로그래밍](https://docs.julialang.org/en/v1/manual/metaprogramming/) 개념의 핵심이지만 여기서는 다루지 않는다. 심볼 타입이 많이 쓰이는 다른 경우는 함수에 인자로 전달할 때이다. 예를 들어 그래프를 빨간 색으로 그리고 싶을 때, 다른 언어라면 `"red"` 라는 문자열을 함수의 인자로 입력하는 경우가 많은데, Julia 에서는 이렇게 문자열을 쓸 수도 있지만 `:red` 라는 심볼 타입을 전달하는 경우가 많다. 그리고 문자열보다 빠르게 비교 할 수 있다.

</br>

### 기본 연산자 

Julia 에서 주요한 연산자를 소개한다. 연산자는 `add(a, b)` 와 같은 함수 형식을 따르지 않고 부호로 표현되는 함수를 말한다. 


#### `=` 와 `==`

많은 다른 프로그래밍 언어에서와 같이 `x = y` 는 `y` 의 값을 `x` 에 할당한다는 표현식이며 `x == y` 는 `x` 가 `y` 와 같은지 아닌지를 평가하여 참이면 `true` 를, 거짓이면 `false` 를 반환하는 표현식이다.

</br>

#### 기본 수치 연산 {#sec-basic_operators_for_number}

| 표현 | 정의 |
|:---:|:-----|
| `+x` | 항등 연산 |
| `-x` | 덧셈에 대한 역원 |
| `x + y` |	덧셈 |
| `x - y` | 뺄셈 |
| `x * y` |	곱셈 |
| `x / y` | 나눗셈 |
| `x ÷ y` |	나눗셈의 정수 몫, `div(x, y)` 와 같다. |
| `x \ y` |	역 나눗셈. `y / x` 와 같다. |
| `x ^ y` |	거듭제곱. `x` 의 `y` 승 |
| `x % y` |	나머지. `rem(x, y)` 와 같다. |
| `x//y` | `x`, `y` 가 정수일 때 유리수 타입의 $x/y$ |

- `÷` 는 `\div`+ [tab] 키 로 입력 할 수 있다.
- `x / y` 에서 `x` 와 `y` 가 모두 정수일 때는 실수로 타입이 변환된다. 즉 `5/2` 는 `2.5` 이다.
ㅋ
- `x//y` 는 Julia 의 유리수 타입의 값을 반환한다. Julia 에서 유리수는 `Int64` 와 같은 고유한 타입이다.

- `x/y` 는 정수몫을 리턴하지만 `x` 나 `y` 가 정수가 아닌 부동수일 경우에는 정수몫을 부동소수로 반환한다. 다음 예를 보라.

```julia
julia> 173 ÷ 2
86

julia> 173 ÷ 2.0
86.0

julia> 173.0 ÷ 2
86.0

julia> -173 ÷ 2
-86
```
</br>

##### 몫과 나머지

실수 $a$ 를 실수 $d$ 로 나눌 때 $a=k\cdot d + r$ 을 만족하는 정수 $k$ 와 나머지 $d$ 를 구한다. $a,\,d$ 가 양수라면 $0\le r < d$ 를 만족하는 $r$ 을 찾지만 $a,\,d$ 둘 가운데 하나라도 음수 일 경우를 생각해보자. 옐르 들어 13.0 을 -3.0 으로 나누는 경우,

$$
\begin{aligned}
13.0 &= (-4.0) \times (-3.0) -1.0, \\
13.0 &= (-5.0) \times (-3.0) + 2.0,
\end{aligned}
$$

과 같이 몫 나머지를 각각 (-4.0, -1.0) 이나 (-5.0, 2.0) 으로 생각 할 수 있다. $a=kd + r$ 할 때 나머지의 부호를 $a$ 를 따르도록 하는 경우와 $d$ 의 부호를 따르도록 하는 경우가 있는데 julia 의 나머지 `a % r` 은 `a` 의 부호를 따른다. 모든 경우에 대해 $0 \le |r| < |d|$ 이다.

```julia
julia> -13.0 % 3.0
-1.0

julia> 13.0 % -3.0
1.0

julia> -13.0 % -3.0
-1.0
```

::: {.callout-warning}
원칙적으로는 `a == (a ÷ d) * d + (a % d)` 이어야 하지만, `a`, `d` 가 부동소수일 경우 roundoff 에러로 인해 차이가 있을 수 있다.

```julia
julia> (-13.3 ÷ 3.0) * 3.0 + (-13.3 % 3.0)
-13.3

julia> (17.24 ÷ 3.42) * 3.42 + (17.24 % 3.42)
17.240000000000002
```
:::

</br>

#### 불 연산 {#sec-boolian_operators}

불(Bool) 타입은 `true`(참) 와 `false`(거짓) 의 두가지 값을 가지는 정수형 타입으로, `true` 는 `1` 과 같고 `false` 는 `0` 과 같다. 

| 표현 | 설명 |
|:--:|:------|
| `!x` | 부정(negation) |
| `x && y` | short-circuiting and |
| `x || y` | short-circuiting or |


- `!(true)` 는 `false` 이고 `!(false)` 는 `true` 이다.

- 아래에 나오는 비트별 연산자 `&` 와 `|` 도 불 연산에 and 연산과 or 연산으로 사용될 수 있다. 

##### short-circuiting 연산 {#sec-short-circuiting_operators}

`x && y` 에서 `x` 가 불 값이고 `y` 가 어떤 명령문이라고 하자. `x` 가 `true` 이면 `y` 를 실행시키고 `x` 가 `false` 이면 `false` 를 리턴한다. `x || y` 일 때는 반대로 `x` 가 `true` 이면 `true` 를 리턴하고 `x` 가 거짓이면 `y` 를 실행시킨다. 조건에 따른 실행을 위해 사용 될 수 있으며 julia 에서 상당히 많이 사용되는 테크닉이다.


```julia
julia> x=3
3

julia> x>0 && println("true and short-circuiting and")
true and short-circuiting and

julia> x<0 && println("false and short-circuiting and")
false

julia> x>0 || println("true and short-circuiting or")
true

julia> x<0 || println("false and short-circuiting or")
false and short-circuiting or
```

</br>

#### 비트 연산 (Bitwise operation)

| 표현  | Name |
|:----:|:--------|
| `~x`  | bitwise not |
| `x & y` | bitwise and |
| `x | y` |	bitwise or |
| `x ⊻ y` | bitwise xor (exclusive or) |
| `x ⊼ y` | bitwise nand (not and) |
| `x ⊽ y` | bitwise nor (not or) |
| `x >>> y` | logical shift right |
| `x >> y` | arithmetic shift right |
| `x << y` | logical/arithmetic shift left |

- `⊻` 는 `\xor` + 탭키, `⊼` 는 `\nand` + 탭키, `⊽` 는 `\nor` + 탭키 로 입력한다. `>>>` 나 `<<` 는 단순한 키보드 입력이다.

- [한국어 위키백과-비트연산](https://ko.wikipedia.org/wiki/비트_연산) 과 [영어 위키백과-비트연산](https://en.wikipedia.org/wiki/Bitwise_operation) 을 참고하라

- `x>>y` 의 경우는 정수 `x` 를 $2^y$ 로 나눈 몫을 계산하는데 자주 사용된다. 예를 들어 

```julia
julia> 15>>1 # 15 나누기 2^1=2 의 몫
7

julia> 427>>2 #427 나누기 2^2=4 의 몫
106
```
이다. 비트연산에 대해 편리한 함수로 입력값을 비트 문자열로 바꾸어주는 `bitstring()` 함수가 있다.

```julia
julia> bitstring(1)
"0000000000000000000000000000000000000000000000000000000000000001"

julia> bitstring(3.23)
"0100000000001001110101110000101000111101011100001010001111010111"
```

</br>

#### 비교 연산

비교 연산은 표현을 평가하여 `true` 혹은 `false` 를 리턴한다.

| 표현 | `true` 인 경우 |
|:---:|:------|
| `x == y` |	`x` 와 `y` 가 같을 때 |
| `x != y`, `x ≠ y` |	`x` 와 `y` 가 다를 때 |
| `x < y` | `x` 가 `y` 보다 작을 때 |
| `x <= y`, `x ≤ y` |	`x` 가 `y` 보다 작거나 같을 때 |
| `x > y`	| `x` 가 `y` 보다 클 때 |
| `x >= y` , `x ≥ y` |	`x` 가 `y` 보다 크거나 같을 때 |

- `≠` 는 `\ne`+탭 키, `≤` 는 `\le`+ 탭 키, `≥` 는 `\ge` + 탭 키 를 통해 입력한다. 
- 비교 연산을 `1 < 2 <= 3 < 5 != 10 < 12` 같이 이어서 쓸 수 있다. 모든 비교 항목이 `true` 일 때만 `true` 를 리턴한다.

특히 부동소수가 포함된 계산의 결과를 비교할때는 조심해야 한다. 

```julia
julia> 0 == 0.0
true

julia> 4 == 4.0
true

julia> 8.3-1.0 == 7.3
false
```

</br>

### 기본 함수

#### 수학 함수

Julia 에서 제공 하는 함수 가운데 기본적인 함수를 소개한다. 이 함수들의 정의와 사용법에 대해서는 [관련 문서](https://docs.julialang.org/en/v1/manual/mathematical-operations/) 를 참고하라.

| 설명 | 함수 | 
|:------:| :-----------------|
| 최대공약수, 최소공배수 | `gcd`, `lcm` |
| 절대값과 부호 | `abs`, `abs2`, `sign`, `signbit`, `copysign`, `flipsign` |
| 제곱근, 지수, 로그 관련 | `sqrt`, `cbrt` , `hypot`, `exp`, `expm1`, `ldexp`, `log`, `log2`, ,`log10`, `exponent` |
| 반올림, 올림, 내림 관련 | `round`, `floor`, `ceil`, `trunc` |
| 삼각함수 | `sin`, `cos`, `tan`, `cot`, `sec`, `csc` |
| 역 삼각함수 | `asin`, `acos`, `atan`, `acot`, `asec`, `acsc` |
| 쌍곡선 함수 | `sinh`, `cosh`, `tanh`, `coth`, `sech`, `csch` |
| 역 쌍곡선 함수 | `asinh`, `acosh`, `atanh`, `acoth`, `asech`, `acsch`|
| 기타 | `sinc`, `cosc`|


</br>


#### Julia 에서의 함수의 정의

예를 들어 두 값 `x` 와 `y` 를 입력 받아 두 값의 합을 반환하는 함수는 다음과 같이 정의 할 수 있다. 

```julia
function myadd(x, y)
    return x+y
end
```

혹은 간단하게

```julia
myadd2(x, y) = x+y
```

와 같이 정의할 수도 있다. `myadd` 와 `myadd2` 는 기능상 동일하다.

함수 정의는 `function` 으로 시작하여 함수 이름이 나오고 `( )` 안에 인자를 받는 변수와 그 정보를 나열한다. 결과를 반환해야 할 경우 `return` 후에 반환해야 할 값이나 변수를 써 주고, `end` 로 끝난다.

함수의 특정 인자에 대한 기본값을 정할 수 있다. 예를 들어,

```julia
myadd3(x, y=1) = x+y
```
와 같이 정의하면 `y` 를 입력하지 않았을 경우 `y=1` 이 된다. 즉 `myadd(3)==4` 이다.


인자에 특정한 키워드를 반드시 사용하도록 정할 수도 있다. 함수의 정의에서 `;` 으로 구분하여 `;` 앞에는 순서대로 정해진 인자가, `;` 에는 키워드로 정해진 인자가 오도록 한다. 

```julia
julia> function myfunc(x, y; color="red")
           println("color = $color, x=$x, y=$y")
       end
myfunc (generic function with 1 method)

julia> myfunc(1, color=2, 3)  # 키워드로 정해진 인자는 인자 입력의 순서를 무시한다.
color = 2, x=1, y=3

julia> myfunc(1, 2)
color = red, x=1, y=2
```

함수 호출에서 키워드로 정해진 인자는 인자의 입력 순서를 무시하며, 키워드가 없는 인자끼리의 순서대로 인자가 입력된다는 것을 알 수 있다.

함수를 정의 할 때 인자의 타입이나 리턴값의 타입을 `::` 연산자를 통해 지정 할 수 있다. 예를 들어,

```julia
function mfunc(x::Int64)::Int64
    return x+1
end
```

는 인자 `x` 의 타입을 `Int64` 로 지정하였으며, `x` 에 `Int64` 타입이 아닌 인자가 전달될 경우 에러가 발생한다. 리턴값의 타입을 지정하는 경우는 약간 다른데 julia 는 리턴 값을 지정된 타입으로 변환시키려고 하며, 변환될 경우는 변환된 값을, 변환되지 않을 경우는 에러를 출력한다. 예를 들어,

```julia
function mfunc2(x)::Int64
    return x/2
end
```
에서 `mfunc2(1)` 은 `1/2` 가 정수로 변환되지 않으므로 에러를 출력하지만 `myfunc(2.0)` 은 `2.0/2` 가 정수로 변환되므로 변환된 `Int64` 타입의 값 `1` 이 리턴된다.


</br>

### 컬렉션

여러 개의 데이터를 저장하고 처리하기 위한 데이터타입을 컬렉션(collection)이라고 하며, 대표적으로 튜플(tuple), 사전(dictionary), `StepRange` 등이 있다. 기본적으로 `length` 함수를 통해 포함되어 있는 아이템의 갯수를 알 수 있으며, iterator 이므로 포함되어 있는 아이템을 순회할 수 있다. 이에 대해서는 @sec-control_flow 에서 살펴보기로 한다. 순서가 있는 컬렉션일 경우 순서대로 1, 2, ... 의 인덱스를 가지며 포함하는 객체에 접근하여 값을 가져오거나 값을 변경할 때 인덱스로 접근 할 수 있다. 순서가 없는 컬렉션 일 경우 값마다 지정된 키(key) 를 통해 접근할 수도 있다. 집합 타입의 컬렉션의 경우는 인덱스로도, 키로도 접근할 수 없다. 


표로 요약하면 다음과 같다.

| 이름 | 인덱스로 접근 | 키로 접근 | mutable | 
|:------:|:---:|:---:|:---:|
| 튜플 (`Tuple`) | o | x | x | 
| 기명 튜플 (`NamedTuple`) | o | o | x |
| 사전 (`Dictionary`) | x | o | o | 
| Range (`Range`) | o | x | x | 
| 집합 (`Set`) | x | x | o | 
| 배열 (`Array`) | o | x | o | 

: 대표적인 컬렉션과 그 특징 {#tbl-properties_of_collections}

</br>

#### 튜플 (Tuple)

`tuple1 = (1, 3.3, 'A', cos, (2, "a", sin))` 과 같이 `( )` 안에서 `,` 로 구분하여 선언한다. 여기서 `A` 는 `Char` 타입, "a" 는 `String` 타입이며, `sin`, `cos` 는 함수이다. `1` 부터 시작되는 인덱스를 이용하여 포함하는 아이템에 접근 할 수 있다. `tuple1[1]==1` 이며 `tuple1[5][2]=="a"` 이다. `tuple1[5][3]==sin` 인 함수이므로 다음과 같은 결과를 얻는다.

```juila
julia> tuple1 = (1, 3.3, 'A', cos, (2, "a", sin))
(1, 3.3, 'A', cos, (2, "a", sin))

julia> tuple1[5][3](π/2)
1.0
```

tuple 은 immutable 하다. 즉 `tuple1[2]=4.4` 와 같은 형태로 변경 시킬 수 없으며, 성분을 추가하거나 삭제할 수도 없다.


튜플이 가장 흔하게 사용되는 곳은 함수의 `return` 에서이다. 만약 함수가 아래와 같이 여러개의 값을 `,` 로 구분하여 반환한다면 이것은 이 값들을 순서대로 묶은 튜플을 반환하는 것이다. 아래의 `return3()` 함수는 그냥 1, 2, 3 을 반환하는 함수인데, 리턴값은 이 값을 묶은 튜플이다. 

```julia
julia> function return3()
       return 1, 2, 3
       end
return3 (generic function with 1 method)

julia> return3()
(1, 2, 3)
```

</br>

#### 기명 튜플 (NamedTuple)

기명 튜플은 튜플 유사하나 성분 하나마다 특별한 이름이 붙으며, 성분에 접근할 때 인덱스를 이용할 수도 있고, 그 이름을 이용할 수도 있다. 기명튜플도 immutable 이므로 값을 변경하거나, 성분을 추가하거나 삭제 할 수 없다.

```julia
julia> ntup1 = (b=1, a=2)
(b = 1, a = 2)

julia> ntup1.a
2

julia> ntup1[1]
1
```


</br>

#### 사전 (Dictionary)

사전은 키(key)-값(value) 를 묶어서 여러 타입을 저장하는 컬렉션으로 성분의 값을 변경 할 수 있는 mutable 타입이다. 아래와 같이 `Dict` 를 통해 선언하며 `[ ]` 를 통해 접근하거나 값을 변경 할 수 있다. 기명 튜플과는 달리 인덱스로는 접근 할 수 없다. 사전은 아래에서 보듯이 명시적으로 키와 와 값의 타입을 알려주지 않았더라도, 그 타입이 정의되며 만들어진다. 아래의 `dict1` 은 키인 `"a"`, 와 `"b"` 가 모두 문자열이기 때문에 키는 문자열 타입으로, 값인 `1` 과 `2` 가 모두 `Int64` 타입이므로 값은 문자열 타입으로 선언되었다. 즉 `dict1` 을 만들었을 때의 출력 `Dict{String, Int64}` 는 키가 문자열(`String`) 타입이며 값이 64비트 정수(`Int64`) 타입으로 한정된 사전이라는 것을 의미한다. 원래 사전은 mutable 타입이므로 새로운 키-값 을 추가 할 수 있지만, 이것은 원래의 사전의 키-값 타입이 허용하는 범위 안이 있을 때이다. 

```julia
julia> dict1=Dict("a"=>1, "b"=>2) # 사전 선언
Dict{String, Int64} with 2 entries:
  "b" => 2
  "a" => 1

julia> dict1["a"] # 사전의 성분 접근
1

julia> dict1["a"]=3 # 사전의 값 변경
2

julia> dict1
Dict{String, Int64} with 2 entries:
  "b" => 2
  "a" => 3

julia> dict1["c"]=-2 # 사전에 새로운 키-값 추가
-2

julia> dict1
Dict{String, Int64} with 3 entries:
  "c" => -2
  "b" => 2
  "a" => 1

julia> dict1["d"]=3.3 # 사전의 값의 타입 범위를 벗어나는 키-값 추가 시도는 실패한다.
ERROR: InexactError: Int64(3.3)
```

`keys()`, `values()` 함수를 통해 사전의 key 와 value 를 얻을 수 있으며, `haskey()` 함수를 통해 해당 key 가 사전에 존재하는지 확인 할 수 있다.

```julia
julia> keys(dict1)
KeySet for a Dict{String, Int64} with 2 entries. Keys:
  "b"
  "a"

julia> values(dict1)
ValueIterator for a Dict{String, Int64} with 2 entries. Values:
  2
  2

julia> haskey(dict1, "a")
true

julia> haskey(dict1, "c")
false
```

사전에 key, value 상을 추가할때는 


::: {.callout-note}
사전은 mutable 이지만 `ImmutableDict` 라는 성분을 변경 할 수 없는 사전과 유사한 컬렉션도 존재한다.
:::

</br>

#### Range 

일정한 간격으로 나열된 수를 위한 자료형이다. 대표적으로 `start:step:end` 형식이나 `start:end` 형식으로 할당하며, 후자의 경우 `start` 와 `end` 의 타입으로부터 `1` 혹은 `1.0` 의 간격을 갖도록 만들어진다. 

- `range1 = start:step:end` 형식으로 만들 경우 1 부터 시작하는 인덱스 `i` 에 대해 `range1[i]==start + i*step` 값을 가지며 당연히 `end` 값을 넘지 않는다. Python과는 다른 점은, `end` 값을 포함 할 수 있다는 것이다. `1:1:5` 의 경우는 5번째 값은 `5` 이다.

- `end > start` 일 경우는 `step` 값이 `0` 보다 작아야 하며, 당연히 허용된다.

::: {#exr-range-1}
`start > end` 일 때, `step` 값을 양수로 정의해 보거나, `start < end` 일 때 `step` 값을 음수로 정의해 보라. 그리고 인덱스를 통해 접근해보라. 또한 `start == end` 일 때는 어떻게 되는가?
:::

`range` 함수를 통해서도 생성 할 수 있다. 예를 들어

</br>

#### 배열 (Array)

인덱스로 접근하는 같은 타입의 성분을 갖는 다차원 컬렉션으로 성분의 값을 변경 할 수 있는 mutable 타입이다. 수치 해석에서 기본이 되는 벡터, 행렬과 이미지 등은 배열로 처리된다. 배열은 이후 @sec-array 에서 자세히 다루게 된다.

</br>

### 흐름 제어 {#sec-control_flow}


#### `for...end` 

컬렉션을 순회하며 컬렉션의 각각의 성분을 변수로 받는다. 예를 들어 아래는 1 부터 100 까지의 합을 구하는 코드인데 `1:100` 은 `1` 부터 `100` 까지 `1` 간격으로 변하는 값을 같는 Range 타입이며 `for i ∈ 1:100` 은 이 성분들을 순서대로 `i` 라는 변수로 받아 `end` 까지의 명령을 수행한다는 의미이다. `∈` 는 `\in`+탭 키 로 입력 할 수 있으며 `in` 과 같은 의미이다. 즉 `for i ∈ 1:100` 는 `for i in 1:100` 과 같다. 

```julia
nsum = 0
for i ∈ 1:100
    nsum+= i
end
```

튜플을 순회할 수도 있다. 아래의 코드는 튜플로 주어진 `(1, "a", 3.3, 52-3.3im)` 에 대해 `itm` 을 변수로 순회한다. 

```julia
for itm in (1, "a", 3.3, 52-3.3im)
    println(itm)
end
```

같은 크기의 컬렉션을 `zip` 명령어로 묶어서 순회 할 수 도 있다.

```julia
aa=("a", "b", "c", "d")
for (a, v) in zip(aa, 1:4)
    println("$a, $v")
end
```

그 결과는 아래와 같다.

```sh
a, 1
b, 2
c, 3
d, 4
```

`enumerate()` 함수를 통해 순서와 아이템을 같이 순회할 수도 있다.

```julia
for (i, v) in enumerate(aa)
    println("Index = $i, value = $v")
end

Index = 1, value = a
Index = 2, value = b
Index = 3, value = c
Index = 4, value = d
```

사전 타입의 경우 key 와 value 를 다음과 같이 순회할 수도 있다. 사전은 순서가 없으므로, 아래와 같은 경우에는 key 와 value 가 나오는 순서는 임의적이라고 생각해야 한다.

```julia
dict1 = Dict("a"=>1, "b"=>2, "c"=>3.3)
for (k, v) in dict1
    println("Key = $k, value = $v")
end

Key = c, value = 3.3
Key = b, value = 2
Key = a, value = 1
```

</br>


</br>

#### 겹친 `for ... end`

구구단을 `for` 문을 써서 출력한다면 우선 다음과 같이 코드를 짤 수 있다.

```julia
for i in 2:9 
    for j in 1:9
        println("$i x $j = $(i*j)")
    end
end
```

하나의 `for` 문마다 하나의 `end` 가 필요하다. Julia 는 다중 루프를 한 줄에 처리할 수 있게 해 준다. 아래의 코드는 위의 코드와 같은 일을 한다.

```julia
for i in 2:9, j in 1:9
    println("$i x $j = $(i*j)")
end
```


</br>

#### `while ... end`

`while` 이후에 조건이 오고 그 조건이 참이면 `end` 까지 실행한다. 1 부터 100 까지의 합을 구해보자.

```julia
nsum = 0
nn = 1
while nn<=100
    nsum += nn
    nn += 1
end
```

`while ... end` 를 쓸 때 조심할 것은 종료조건이 충족되지 않는 것이다. `for ... end` 의 경우는 정해진 수의 컬렉션의 아이템만을 순회하므로 어쨌든 무조건 종료되지만 `while ... end` 의 경우는 무한루프에 빠질 수 있다. 

</br>


##### 루프에서 벗어나기

루프 수행 도중 벗어나고자 할 때는 `break` 를 쓴다. 예를 들어 1, 1/2, 1/3 과 같이 자연수의 역수를 계속 곱하다가 1/10000 보다 작아지는 첫번째 자연수를 구한다면, 1 부터 충분히 큰 수 (그 역수가 1/10000 보다 작은 수를 선택 할 수도 있다) 까지 루프를 수행하고 그 누적곱이 1/10000 보다 작을 때 `break` 로 루플에서 빠져나오면 된다.

```julia
result = 1.0
for n in 1:10000
    result *=(1/n)
    if result < 1.0/10000
        print("$n is the value")
        break
    end
end
```

`break` 는 `break` 를 포함하는 가장 인접한 루프로부터 벗어난다. 예를 들어,

```julia
for i in 1:10
    for j in 1:10
        println("i=$i, j=$j")
        if j > 5
            break
        end
    end
end
```

코드의 `break` 는 `j>5` 일 때 `break` 되며, `i` 루프는 벗어나지 못하고 `1` 부터 `10` 까지 진행된다. 그러나,

```julia
for i in 1:10, j in 1:10
    println("i=$i, j=$j")
    if j > 5
        break
    end
end
```

는 `i=1, j=6` 에서 `break` 되며 멈춘다.


</br>

#### `if ... elseif ... else ... end`

어떤 수 `x` 에 대해 `x>0` 이면 `1` 을 `x<0` 이면 `-1` 을, `x=0` 이면 `0` 을 리턴하는 함수 `msign(x)` 를 만들어 보자.

```julia
function msign(x)
    if x>zero(x)
        return one(x)
    elseif x<zero(x) 
        return -one(x)
    else
        return zero(x)
    end
end
```

`zero(x)` 는 `x` 의 타입에서의 `0` 값을 리턴하는 함수이며, `one(x)` 는 `x` 타입의 `1` 값을 리턴하는 함수이다. `x` 는 어떤 값일 수도 있고 타입일 수도 있다. `zero(1)` 은 `Int64` 타입의 `1` 이며, `one(Float32)` 는 `Float32` 타입의 `0.0` 이다. `for`, `while` 과 같이 `if` 블럭도 `end` 로 끝내야 한다. 

`if` 블록에서 `elseif` 나 `else` 는 필요 없다면 생략해도 된다. 예를 들어 1 부터 100 까지의 정수 가운데 3의 배수만을 더한 합을 구한다고 하면,

```julia
result = 0
for i in 1:100
    if i % 3 == 0
        result += i
    end
end
```

와 같이 사용 할 수 있다. `i % 3 == 0` 일 때만 `result += i` 를 수행하고 다른 경우는 아무 일도 수행하지 않는다.

</br>

#### 삼항 연산자 `a ? b : c`

`a` 는 `true`/`false` 를 따질 수 있는 조건이며, `true` 이면 `b` 를 실행시키고 `false` 이면 `c` 를 실행 시킨다. 예를 들어, 절대값을 리턴하는 함수 `mabs()` 를 다음과 같이 짧게 구현 할 수 있다. 

``` julia
mabs(x) = (x>0) ? x : -x
```

여기서 주의해야 할 것은 `?` 와 `:` 각각의 앞, 뒤에 공백이 존재해야 한다는 것이다. `(x>0)? x : -x` 나 `(x>0)? x: -x` 같은 것들은 에러를 발생시킨다.

</br>

#### `begin ... end` 블럭

Julia 에서 한줄에 여러 명령을 처리하기 위해 `;` 을 사용 할 수 있다 예를 들어

```julia
x=3;y=5;z=x+y
```

는 세가지 명렁을 차례로 입력한 것과 같다. 이것을 `begin ... end` 블럭으로 묶을 수 있다.

```julia
z = begin
    x=3
    y=5
    x+y
end
```

</br>

### 배열 (Array) {#sec-array}

#### 기초

Julia 는 1차원 배열인 `Vector`, 2차원 배열인 `Matrix` 를 비롯한 다차원 배열(Array) 를 지원한다. 배열은 [0차원부터](https://docs.julialang.org/en/v1/manual/faq/#faq-array-0dim) 존재한다. 특히 배열의 성분이 수 타입일 경우에는 가장 잘 표현할 수 있는 자료형으로 일치된다. 1 차원 배열과 2차원 배열은 다음과 같이 선언된다.

```julia
julia> arr1 = [1.0, 2.0, 3.0, 4.0]
4-element Vector{Float64}:
 1.0
 2.0
 3.0
 4.0

julia> arr2 = [4.0; 5; 6]
3-element Vector{Float64}:
 4.0
 5.0
 6.0

julia> arr3 = [1 2 3 4]
1×4 Matrix{Int64}:
 1  2  3  4

julia> arr4=[3 2;4 5]
2×2 Matrix{Int64}:
 3  2
 4  5
```

`arr1` 과 같이 `[ ]` 안에 콤마로 분리된 경우와 `arr2` 와 같이 `;` 로 분리된 경우는 1 차원 벡터이다. 출력의 `Vector{Float64}` 는 성분이 `Float64` 타입인 1차원 배열이라는 의미이다. `Vector` 는 1차원 배열과 같다(`alias` 라고 하며 본질적으로 같고, 부르는 이름이 다르다는 의미이다.) `Matrix` 는 2차원 배열의 alias 이다. `arr2` 와 같이 공백으로 분리되는 경우는 2차원 배열이다. 즉 `[1 2]` 와 `[1, 2]` 는 다르다. `arr3` 은 2차원 배열로, 행 순서대로 나열하되 같은 행에서는 공백으로 열을 구분하며, 행의 구분은 `;` 를 사용한다. 배열의 성분에 접근할 때는 `arr2[3]` 이나 `arr3[1, 1]` 과 같이 접근한다. 이 때 배열의 위치를 나타내는 숫자를 인덱스라고 한다. 

</br>

#### Array comprehension {#sec-array_comprehension}

`[ ]` 안에 루프를 사용하여 배열을 만들 수 있다. 1 부터 10 까지의 정수의 제곱을 순서대로 포함하는 배열은 아래와 같이 만들 수 있다.

```julia
ac1 = [x^2 for x in 1:10]
```

다차원 배열도 다음과 같이 만들 수 있다.

```julia
julia> [x+y for x = 1:3, y = 1:2]
3×2 Matrix{Int64}:
 2  3
 3  4
 4  5
```

`[ ]` 안에 조건을 넣을 수도 있다. 예를 들어 앞의 2차원 배열에서 `x+y>3` 인 경우에는 `0` 으로 채우고 싶다면,

```julia
julia> [if x+y > 3 0 else x+y end for x = 1:3, y = 1:2]
3×2 Matrix{Int64}:
 2  3
 3  0
 0  0
```

와 같이 쓸 수 있으며, 

```julia
julia> [x+y for x = 1:3, y = 1:2 if x+y>3]
3-element Vector{Int64}:
 4
 4
 5
```
와 같이 사용 할 수도 있다.

</br>

#### 배열의 초기화 {#sec-array_initialization}

`zeros()`, `ones()`, `fill()` 함수가 대표적으로 배열을 초기화 하는 함수이다. `zeros(T, dims)` 는 `T` 의 타입에서의 0 값(`zero(T)`)으로 채워진 `dims` 차원의 배열을 반환한다. `ones()` 와 `fill()` 에 대해서는 아래의 코드로 이해 할 수 있을 것이다. `T` 가 주어지지 않을 경우는 `Float64` 타입으로 정해지며 `dims` 는 튜플이거나, 차원을 나타내는 연속적인 수이다.
 
```julia
julia> zeros(Float32, (2, 3))
2×3 Matrix{Float32}:
 0.0  0.0  0.0
 0.0  0.0  0.0

julia> ones(UInt8, (2,2,2))
2×2×2 Array{UInt8, 3}:
[:, :, 1] =
 0x01  0x01
 0x01  0x01

[:, :, 2] =
 0x01  0x01
 0x01  0x01

julia> fill(2.0, 1, 3)
1×3 Matrix{Float64}:
 2.0  2.0  2.0
```

`undef` 키워드를 사용하여 타입과 크기만을 지정하고 값을 정하지 않고 초기화 할 수도 있다.

```julia
A1 = Vector{Int8}(undef, 4) # 1차원 배열 초기화
A2 = Matrix{Float64}(undef,10,10) # 2차원 배열 초기화
A3 = Array{Float32}(undef, 2, 2, 2) #3차원 배열 초기화
```

이 경우 배열의 성분은 특정되지 않은 값이 주어진다. 이렇게 임의의 값이 채워진 배열을 초기화 하는 이유는 배열을 만드는 것이 빠르기 때문이다. 본인의 PC 에서 직접 `BenchmarkTools` 를 이용하여 수행시간을 비교해 보면 속도가 두배 이상 차이가 난다. 만약 배열의 모든 성분이 계산과정에서 채워진다면 굳이 특정 값으로 초기화 시키지 않고 `undef` 를 사용하여 배열을 만들 수 있다.

```julia
julia> @btime zeros(Float64, 100, 100)
  3.199 μs (2 allocations: 78.17 KiB)

julia> @btime Matrix{Float64}(undef, 100, 100)
  1.325 μs (2 allocations: 78.17 KiB)
```

</br>

배열의 타입과 크기를 지정하지 않고 이미 존재하는 배열을 이용하여 초기화 할 수 있다. 예를 들어 어떤 배열 `A` 와 같은 크기와 타입을 갖지만 모든 성분이 0 인 배열을 만들 때 `zero(A)` 를 사용 할 수 있다. `A` 가 정사각 행렬일 경우 `one(A)` 는 `A` 와 같은 크기와 타입을 갖는 항등행렬을 리턴한다.

```julia
julia> A=[1.0 -2.0 3.0;4.0 -3.0 -1.0]
2×3 Matrix{Float64}:
 1.0  -2.0   3.0
 4.0  -3.0  -1.0

julia> zero(A)
2×3 Matrix{Float64}:
 0.0  0.0  0.0
 0.0  0.0  0.0

julia> B=[1 2;3 4]
2×2 Matrix{Int64}:
 1  2
 3  4

julia> one(B)
2×2 Matrix{Int64}:
 1  0
 0  1
```

값을 지정하지 않고 주어진 배열과 같은 타입과 크기의 배열을 생성하는 함수로 `similar()` 가 있다. `similar()` 를 사용하는 이유도 속도 때문이며, 계산 수행중 그 값이 다 채워진다면 충분히 사용할 만 하다.

```julia
julia> C=[1.0 3.0;2.0 -1.0]
2×2 Matrix{Float64}:
 1.0   3.0
 2.0  -1.0

julia> similar(C)
2×2 Matrix{Float64}:
 5.98008e197  1.75739e159
 5.98008e197  3.05176e-5
```

배열을 복사할 때는 `copy()` 혹은 `deepcopy()` 명령어를 사용한다. 

</br>

#### 인덱스는 1부터, 마지막은 `end`, 범위는 `:` {#sec-index_convension}

프로그래밍 언어에서 배열을 다룰 때 첫번째 인덱스가 `0` 인 언어가 있으며(C/C++, Java, Python, Javascript 등), `1` 인 언어(Fortran, Matlab, R 등) 이 있다. Julia는 1부터 시작한다. `end` 는 각 차원의 마지막 인덱스를 의미하는 키워드이다. 물론 배열의 차원과 각 차원의 크기를 알고 있다면 인덱스를 직접 써도 된다. 인덱스는 자연수 뿐만 아니라 `start:step:stop` 혹은 `start:stop` 형식의 범위를 지정 할 수도 있으며, 전체 범위를 지정할 때는 `:` 를 사용한다. 

```julia
julia> a = [1 4 7 10;2 5 8 11;3 6 9 12] 
3×4 Matrix{Int64}:
 1  4  7  10
 2  5  8  11
 3  6  9  12

julia> a[1, 1] # a의 1 행 1열
1

julia> a[2, end] # a의 2 행 마지막 열
11

julia> a[end, end] # a 의 마지막 행 마지막 열
12

julia> a[1, :] # a 의 1행을 벡터로
4-element Vector{Int64}:
  1
  4
  7
 10

julia> a[1:1, :] # a 의 1행을 행렬로
1×4 Matrix{Int64}:
 1  4  7  10

julia> a[2, 1:2:end] # a 의 2행에서 1:2:end 열
2-element Vector{Int64}:
 2
 8

julia> a[3, [1, 2, 4]] # a 의 3행 1, 2, 4 열을 벡터로
3-element Vector{Int64}:
  3
  6
 12

julia> a[2:3, [1, 2, 4]] # a 의 2행부터 3행까지, 1, 2, 4 열
2×3 Matrix{Int64}:
 2  5  11
 3  6  12
```


</br>

#### `.` 연산자 {#sec-dot_operator}

배열의 성분별 계산을 지원하기 위한 연산자이다. 예를 들어 `[1, 2, 3]` 의 각 성분별 제곱을 구하고 싶다면 `[1, 2, 3] .^2` 을 구하면 된다. 두 행렬의 곱이 아닌 성분별 곱을 구할때에는 `.*` 를 사용한다. 즉 연산자 앞에 `.` 를 사용하면 성분별 연산이 된다.

```julia
julia> a=[1, 2, 3];b=[3, 4,5];a.*b

3-element Vector{Int64}:
  3
  8
 15
```

`.` 연산자는 함수의 성분별 계산을 위해서도 사용된다. 예를 들어 `θ=0.0:0.1:π` 에 대해 `sin` 함수값을 배열로 얻고 싶다면 다음과 같이 하면 된다.

```julia
julia> θ=0.0:0.1:π
0.0:0.1:3.1

julia> sin.(θ)
```

하나의 변수를 받는 함수 다음에 `.` 를 붙여 배열의 각각의 성분에 대한 함수값을 입력값과 같은 크기의 배열로 얻으며 이것은 당신이 정의한 함수에 대해서도 똑같이 성립한다.

```julia
julia> function myfunc(x)
       return x+1
       end
myfunc (generic function with 1 method)

julia> myfunc.([1,2,3,4])
4-element Vector{Int64}:
 2
 3
 4
 5
```

::: {#exr-dot_operator_1}
다음 코드의 결과는 무엇일까 예측해보고 실행해서 확인해보라.

```julia
a=[1,2,3,4]
(a .* a).^a
```
:::

</br>

#### 행렬의 열/행 우선 방식

예를 들어 $\boldsymbol{A} =\begin{bmatrix} 1&2\\3&4\end{bmatrix}$ 를 메모리(RAM)상에 저장할 때 1행 1열, 1행 2열,... 1행 마지막열, 2행 1열, ... 순으로 저장하는 것을 행 우선 순서(row-major order) 이라고 하고 1행 1열 2행 1열, 마지막행 1열, 2행 1열, 2행 2열,...  순으로 저장하는 것을 열 우선 방식(column-major order)이라고 한다. 행 우선 방식에서는 $1 2 3 4$ 의 순으로 저장이 되며 열 우선방식에서는 $1 3 2 4$ 순으로 저장이 된다. Julia 에서는 행렬이라도 하나의 인덱스로 모두 표현 할 수 있는데, 예를 들어 `A[1]==1`, `A[2]==3` 이다. 즉 Julia 는 Fortran 이나 matlab 과 같은 열 우선 순서를 따른다. C/C++ 이나 python 의 numpy array 는 row-major order 이다. 아래의 두 함수는 행렬 `A` 에 대해 각각의 성분의 합을 구하는 함수인데 `row_major` 함수는 각 행에 대해 열을 순회하며 합을 구하는 방식, `column_major` 함수는 각 열에 대해 행을 순회하며 합을 구하는 방식이다. Julia 에서는 후자가 다소 빠름을 확인 할 수 있다.

```{.julia code-line-numbers="true"}
function row_major(A)
    M, N = size(A)
    result = 0.0
    for i in 1:M, j = 1:N
        result += A[i, j]
    end
    return result
end

function column_major(A)
    M, N = size(A)
    result = 0.0
    for j in 1:N, i = 1:M
        result += A[i, j]
    end
    return result
end
```










